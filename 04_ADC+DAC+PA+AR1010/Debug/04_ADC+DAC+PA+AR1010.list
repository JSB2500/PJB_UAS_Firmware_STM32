
04_ADC+DAC+PA+AR1010.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084cc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f80  080086d0  080086d0  000186d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009650  08009650  00019650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009658  08009658  00019658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800965c  0800965c  0001965c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000021c  20000000  08009660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009cc  2000021c  0800987c  0002021c  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  20000be8  0800987c  00020be8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002331c  00000000  00000000  0002024a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b91  00000000  00000000  00043566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00012b3c  00000000  00000000  000480f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001380  00000000  00000000  0005ac38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001bf0  00000000  00000000  0005bfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00029f07  00000000  00000000  0005dba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00020a6c  00000000  00000000  00087aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f9191  00000000  00000000  000a851b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001a16ac  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004c1c  00000000  00000000  001a16fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  001a6318  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  001a63e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000021c 	.word	0x2000021c
 800021c:	00000000 	.word	0x00000000
 8000220:	080086b4 	.word	0x080086b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000220 	.word	0x20000220
 800023c:	080086b4 	.word	0x080086b4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_InitTick+0x3c>)
{
 80005f8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <HAL_InitTick+0x40>)
 80005fc:	7818      	ldrb	r0, [r3, #0]
 80005fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000602:	fbb3 f3f0 	udiv	r3, r3, r0
 8000606:	6810      	ldr	r0, [r2, #0]
 8000608:	fbb0 f0f3 	udiv	r0, r0, r3
 800060c:	f000 f898 	bl	8000740 <HAL_SYSTICK_Config>
 8000610:	4604      	mov	r4, r0
 8000612:	b958      	cbnz	r0, 800062c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000614:	2d0f      	cmp	r5, #15
 8000616:	d809      	bhi.n	800062c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	4602      	mov	r2, r0
 800061a:	4629      	mov	r1, r5
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f84e 	bl	80006c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <HAL_InitTick+0x44>)
 8000626:	4620      	mov	r0, r4
 8000628:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800062a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800062c:	2001      	movs	r0, #1
 800062e:	e7fc      	b.n	800062a <HAL_InitTick+0x36>
 8000630:	20000000 	.word	0x20000000
 8000634:	20000048 	.word	0x20000048
 8000638:	20000004 	.word	0x20000004

0800063c <HAL_Init>:
{
 800063c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063e:	2003      	movs	r0, #3
 8000640:	f000 f82c 	bl	800069c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff ffd5 	bl	80005f4 <HAL_InitTick>
  HAL_MspInit();
 800064a:	f004 ffff 	bl	800564c <HAL_MspInit>
}
 800064e:	2000      	movs	r0, #0
 8000650:	bd08      	pop	{r3, pc}
	...

08000654 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <HAL_IncTick+0x10>)
 8000656:	4b04      	ldr	r3, [pc, #16]	; (8000668 <HAL_IncTick+0x14>)
 8000658:	6811      	ldr	r1, [r2, #0]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	440b      	add	r3, r1
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000238 	.word	0x20000238
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800066c:	4b01      	ldr	r3, [pc, #4]	; (8000674 <HAL_GetTick+0x8>)
 800066e:	6818      	ldr	r0, [r3, #0]
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000238 	.word	0x20000238

08000678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000678:	b538      	push	{r3, r4, r5, lr}
 800067a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff fff6 	bl	800066c <HAL_GetTick>
 8000680:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000682:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000684:	bf1e      	ittt	ne
 8000686:	4b04      	ldrne	r3, [pc, #16]	; (8000698 <HAL_Delay+0x20>)
 8000688:	781b      	ldrbne	r3, [r3, #0]
 800068a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	1b43      	subs	r3, r0, r5
 8000692:	42a3      	cmp	r3, r4
 8000694:	d3fa      	bcc.n	800068c <HAL_Delay+0x14>
  {
  }
}
 8000696:	bd38      	pop	{r3, r4, r5, pc}
 8000698:	20000000 	.word	0x20000000

0800069c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800069e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80006aa:	0412      	lsls	r2, r2, #16
 80006ac:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80006b8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	68dc      	ldr	r4, [r3, #12]
 80006c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ca:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	2d04      	cmp	r5, #4
 80006d2:	bf28      	it	cs
 80006d4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006dc:	bf8c      	ite	hi
 80006de:	3c03      	subhi	r4, #3
 80006e0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e2:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80006e6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	fa01 f104 	lsl.w	r1, r1, r4
 80006f8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000700:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000702:	db06      	blt.n	8000712 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000708:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800070c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000710:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	f000 000f 	and.w	r0, r0, #15
 8000716:	4a02      	ldr	r2, [pc, #8]	; (8000720 <HAL_NVIC_SetPriority+0x60>)
 8000718:	5413      	strb	r3, [r2, r0]
 800071a:	e7f9      	b.n	8000710 <HAL_NVIC_SetPriority+0x50>
 800071c:	e000ed00 	.word	0xe000ed00
 8000720:	e000ed14 	.word	0xe000ed14

08000724 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000724:	2800      	cmp	r0, #0
 8000726:	db08      	blt.n	800073a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000728:	0942      	lsrs	r2, r0, #5
 800072a:	2301      	movs	r3, #1
 800072c:	f000 001f 	and.w	r0, r0, #31
 8000730:	fa03 f000 	lsl.w	r0, r3, r0
 8000734:	4b01      	ldr	r3, [pc, #4]	; (800073c <HAL_NVIC_EnableIRQ+0x18>)
 8000736:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800073a:	4770      	bx	lr
 800073c:	e000e100 	.word	0xe000e100

08000740 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	3801      	subs	r0, #1
 8000742:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000746:	d20b      	bcs.n	8000760 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000748:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	4a05      	ldr	r2, [pc, #20]	; (8000764 <HAL_SYSTICK_Config+0x24>)
 800074e:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000750:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000752:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000758:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800075e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000760:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000768:	6803      	ldr	r3, [r0, #0]
{
 800076a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800076c:	2018      	movs	r0, #24
 800076e:	b2d9      	uxtb	r1, r3
 8000770:	3910      	subs	r1, #16
 8000772:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8000776:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000778:	4c05      	ldr	r4, [pc, #20]	; (8000790 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800077a:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800077c:	5c20      	ldrb	r0, [r4, r0]
 800077e:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000780:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8000784:	f020 0003 	bic.w	r0, r0, #3
 8000788:	bf88      	it	hi
 800078a:	3004      	addhi	r0, #4
 800078c:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800078e:	bd10      	pop	{r4, pc}
 8000790:	080086d0 	.word	0x080086d0

08000794 <HAL_DMA_Init>:
{
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000798:	f7ff ff68 	bl	800066c <HAL_GetTick>
 800079c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800079e:	2c00      	cmp	r4, #0
 80007a0:	d073      	beq.n	800088a <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 80007a2:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80007a4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80007a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80007b0:	6813      	ldr	r3, [r2, #0]
 80007b2:	f023 0301 	bic.w	r3, r3, #1
 80007b6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80007b8:	6821      	ldr	r1, [r4, #0]
 80007ba:	680b      	ldr	r3, [r1, #0]
 80007bc:	07d8      	lsls	r0, r3, #31
 80007be:	d42f      	bmi.n	8000820 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 80007c0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007c2:	4d33      	ldr	r5, [pc, #204]	; (8000890 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007c4:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007c6:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007c8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	68e2      	ldr	r2, [r4, #12]
 80007d0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007d2:	6922      	ldr	r2, [r4, #16]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	6962      	ldr	r2, [r4, #20]
 80007d8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007da:	69e2      	ldr	r2, [r4, #28]
 80007dc:	4303      	orrs	r3, r0
 80007de:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80007e0:	6a22      	ldr	r2, [r4, #32]
 80007e2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007e6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007e8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80007ec:	bf02      	ittt	eq
 80007ee:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80007f2:	4335      	orreq	r5, r6
 80007f4:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007f6:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 80007f8:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80007fa:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80007fc:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000800:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000804:	d133      	bne.n	800086e <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8000806:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000808:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800080a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800080c:	b37d      	cbz	r5, 800086e <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800080e:	b990      	cbnz	r0, 8000836 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8000810:	2a01      	cmp	r2, #1
 8000812:	d021      	beq.n	8000858 <HAL_DMA_Init+0xc4>
 8000814:	f032 0202 	bics.w	r2, r2, #2
 8000818:	d129      	bne.n	800086e <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800081a:	01ea      	lsls	r2, r5, #7
 800081c:	d527      	bpl.n	800086e <HAL_DMA_Init+0xda>
 800081e:	e01e      	b.n	800085e <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000820:	f7ff ff24 	bl	800066c <HAL_GetTick>
 8000824:	1b40      	subs	r0, r0, r5
 8000826:	2805      	cmp	r0, #5
 8000828:	d9c6      	bls.n	80007b8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800082a:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800082c:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800082e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000830:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000834:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000836:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800083a:	d114      	bne.n	8000866 <HAL_DMA_Init+0xd2>
    switch (tmp)
 800083c:	2a03      	cmp	r2, #3
 800083e:	d816      	bhi.n	800086e <HAL_DMA_Init+0xda>
 8000840:	a001      	add	r0, pc, #4	; (adr r0, 8000848 <HAL_DMA_Init+0xb4>)
 8000842:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000846:	bf00      	nop
 8000848:	0800085f 	.word	0x0800085f
 800084c:	0800081b 	.word	0x0800081b
 8000850:	0800085f 	.word	0x0800085f
 8000854:	08000859 	.word	0x08000859
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000858:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800085c:	d107      	bne.n	800086e <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800085e:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000860:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000862:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000864:	e7e4      	b.n	8000830 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8000866:	2a02      	cmp	r2, #2
 8000868:	d9f9      	bls.n	800085e <HAL_DMA_Init+0xca>
 800086a:	2a03      	cmp	r2, #3
 800086c:	d0d5      	beq.n	800081a <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800086e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000870:	4620      	mov	r0, r4
 8000872:	f7ff ff79 	bl	8000768 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000876:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000878:	233f      	movs	r3, #63	; 0x3f
 800087a:	4093      	lsls	r3, r2
 800087c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800087e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000880:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000882:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000884:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000888:	e7d4      	b.n	8000834 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800088a:	2001      	movs	r0, #1
 800088c:	e7d2      	b.n	8000834 <HAL_DMA_Init+0xa0>
 800088e:	bf00      	nop
 8000890:	e010803f 	.word	0xe010803f

08000894 <HAL_DMA_Start_IT>:
{
 8000894:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000896:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800089a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800089c:	2c01      	cmp	r4, #1
 800089e:	d034      	beq.n	800090a <HAL_DMA_Start_IT+0x76>
 80008a0:	2401      	movs	r4, #1
 80008a2:	2500      	movs	r5, #0
 80008a4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80008a8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80008ac:	2c01      	cmp	r4, #1
 80008ae:	f04f 0402 	mov.w	r4, #2
 80008b2:	d128      	bne.n	8000906 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 80008b4:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80008b8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008ba:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80008bc:	6825      	ldr	r5, [r4, #0]
 80008be:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80008c2:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80008c4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008c6:	6883      	ldr	r3, [r0, #8]
 80008c8:	2b40      	cmp	r3, #64	; 0x40
 80008ca:	d119      	bne.n	8000900 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 80008cc:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80008ce:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008d0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80008d2:	233f      	movs	r3, #63	; 0x3f
 80008d4:	4093      	lsls	r3, r2
 80008d6:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80008d8:	6823      	ldr	r3, [r4, #0]
 80008da:	f043 0316 	orr.w	r3, r3, #22
 80008de:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80008e0:	6963      	ldr	r3, [r4, #20]
 80008e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e6:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80008e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80008ea:	b11b      	cbz	r3, 80008f4 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80008ec:	6823      	ldr	r3, [r4, #0]
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80008f4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80008f6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6023      	str	r3, [r4, #0]
}
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8000900:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000902:	60e2      	str	r2, [r4, #12]
 8000904:	e7e4      	b.n	80008d0 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000906:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800090a:	2002      	movs	r0, #2
 800090c:	e7f7      	b.n	80008fe <HAL_DMA_Start_IT+0x6a>

0800090e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800090e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000912:	2b02      	cmp	r3, #2
 8000914:	d003      	beq.n	800091e <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800091a:	2001      	movs	r0, #1
 800091c:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800091e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000920:	2305      	movs	r3, #5
 8000922:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8000926:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000928:	6813      	ldr	r3, [r2, #0]
 800092a:	f023 0301 	bic.w	r3, r3, #1
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	4770      	bx	lr
	...

08000934 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000934:	2300      	movs	r3, #0
{
 8000936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000938:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800093a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 800093c:	4b5b      	ldr	r3, [pc, #364]	; (8000aac <HAL_DMA_IRQHandler+0x178>)
{
 800093e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000940:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000942:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000944:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000946:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000948:	409a      	lsls	r2, r3
 800094a:	4232      	tst	r2, r6
 800094c:	d00c      	beq.n	8000968 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800094e:	6801      	ldr	r1, [r0, #0]
 8000950:	6808      	ldr	r0, [r1, #0]
 8000952:	0740      	lsls	r0, r0, #29
 8000954:	d508      	bpl.n	8000968 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000956:	6808      	ldr	r0, [r1, #0]
 8000958:	f020 0004 	bic.w	r0, r0, #4
 800095c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800095e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000960:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000962:	f042 0201 	orr.w	r2, r2, #1
 8000966:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000968:	2201      	movs	r2, #1
 800096a:	409a      	lsls	r2, r3
 800096c:	4232      	tst	r2, r6
 800096e:	d008      	beq.n	8000982 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000970:	6821      	ldr	r1, [r4, #0]
 8000972:	6949      	ldr	r1, [r1, #20]
 8000974:	0609      	lsls	r1, r1, #24
 8000976:	d504      	bpl.n	8000982 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000978:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800097a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800097c:	f042 0202 	orr.w	r2, r2, #2
 8000980:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000982:	2204      	movs	r2, #4
 8000984:	409a      	lsls	r2, r3
 8000986:	4232      	tst	r2, r6
 8000988:	d008      	beq.n	800099c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800098a:	6821      	ldr	r1, [r4, #0]
 800098c:	6809      	ldr	r1, [r1, #0]
 800098e:	0788      	lsls	r0, r1, #30
 8000990:	d504      	bpl.n	800099c <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000992:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000994:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000996:	f042 0204 	orr.w	r2, r2, #4
 800099a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800099c:	2210      	movs	r2, #16
 800099e:	409a      	lsls	r2, r3
 80009a0:	4232      	tst	r2, r6
 80009a2:	d010      	beq.n	80009c6 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	6819      	ldr	r1, [r3, #0]
 80009a8:	0709      	lsls	r1, r1, #28
 80009aa:	d50c      	bpl.n	80009c6 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80009ac:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	0350      	lsls	r0, r2, #13
 80009b2:	d537      	bpl.n	8000a24 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	0319      	lsls	r1, r3, #12
 80009b8:	d401      	bmi.n	80009be <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80009ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009bc:	e000      	b.n	80009c0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80009be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80009c0:	b10b      	cbz	r3, 80009c6 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80009c2:	4620      	mov	r0, r4
 80009c4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80009c6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80009c8:	2220      	movs	r2, #32
 80009ca:	408a      	lsls	r2, r1
 80009cc:	4232      	tst	r2, r6
 80009ce:	d03a      	beq.n	8000a46 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80009d0:	6823      	ldr	r3, [r4, #0]
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	06c6      	lsls	r6, r0, #27
 80009d6:	d536      	bpl.n	8000a46 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80009d8:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009da:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80009de:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009e0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009e2:	d127      	bne.n	8000a34 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009e4:	f022 0216 	bic.w	r2, r2, #22
 80009e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009ea:	695a      	ldr	r2, [r3, #20]
 80009ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009f0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80009f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009f4:	b90a      	cbnz	r2, 80009fa <HAL_DMA_IRQHandler+0xc6>
 80009f6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80009f8:	b11a      	cbz	r2, 8000a02 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	f022 0208 	bic.w	r2, r2, #8
 8000a00:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a02:	233f      	movs	r3, #63	; 0x3f
 8000a04:	408b      	lsls	r3, r1
 8000a06:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000a14:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d045      	beq.n	8000aa6 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8000a1a:	4620      	mov	r0, r4
}
 8000a1c:	b003      	add	sp, #12
 8000a1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8000a22:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	05d2      	lsls	r2, r2, #23
 8000a28:	d4c7      	bmi.n	80009ba <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	f022 0208 	bic.w	r2, r2, #8
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	e7c2      	b.n	80009ba <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a34:	0350      	lsls	r0, r2, #13
 8000a36:	d527      	bpl.n	8000a88 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	0319      	lsls	r1, r3, #12
 8000a3c:	d431      	bmi.n	8000aa2 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8000a3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000a40:	b10b      	cbz	r3, 8000a46 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8000a42:	4620      	mov	r0, r4
 8000a44:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000a46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a48:	b36b      	cbz	r3, 8000aa6 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000a4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a4c:	07da      	lsls	r2, r3, #31
 8000a4e:	d519      	bpl.n	8000a84 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8000a50:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 8000a54:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000a56:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a5a:	2305      	movs	r3, #5
 8000a5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000a60:	6813      	ldr	r3, [r2, #0]
 8000a62:	f023 0301 	bic.w	r3, r3, #1
 8000a66:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000a68:	9b01      	ldr	r3, [sp, #4]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	42bb      	cmp	r3, r7
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	d802      	bhi.n	8000a78 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000a72:	6813      	ldr	r3, [r2, #0]
 8000a74:	07db      	lsls	r3, r3, #31
 8000a76:	d4f7      	bmi.n	8000a68 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000a84:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a86:	e7c6      	b.n	8000a16 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a8e:	d108      	bne.n	8000aa2 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	f021 0110 	bic.w	r1, r1, #16
 8000a96:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000a98:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000a9a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000a9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000aa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000aa4:	e7cc      	b.n	8000a40 <HAL_DMA_IRQHandler+0x10c>
}
 8000aa6:	b003      	add	sp, #12
 8000aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000048 	.word	0x20000048

08000ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ab4:	2300      	movs	r3, #0
{
 8000ab6:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab8:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000c8c <HAL_GPIO_Init+0x1dc>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000abc:	4a71      	ldr	r2, [pc, #452]	; (8000c84 <HAL_GPIO_Init+0x1d4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000abe:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8000c90 <HAL_GPIO_Init+0x1e0>
    ioposition = ((uint32_t)0x01) << position;
 8000ac2:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac4:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000ac6:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac8:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8000acc:	ea37 0404 	bics.w	r4, r7, r4
 8000ad0:	f040 80be 	bne.w	8000c50 <HAL_GPIO_Init+0x1a0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad4:	684c      	ldr	r4, [r1, #4]
 8000ad6:	f024 0a10 	bic.w	sl, r4, #16
 8000ada:	f1ba 0f02 	cmp.w	sl, #2
 8000ade:	d116      	bne.n	8000b0e <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3];
 8000ae0:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ae4:	f003 0b07 	and.w	fp, r3, #7
 8000ae8:	f04f 0c0f 	mov.w	ip, #15
 8000aec:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8000af0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000af4:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000af8:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000afc:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b00:	690e      	ldr	r6, [r1, #16]
 8000b02:	fa06 f60b 	lsl.w	r6, r6, fp
 8000b06:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000b0a:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8000b0e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b12:	f04f 0c03 	mov.w	ip, #3
      temp = GPIOx->MODER;
 8000b16:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b1e:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b22:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b26:	ea6f 060c 	mvn.w	r6, ip
 8000b2a:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b2e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b32:	9601      	str	r6, [sp, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b34:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000b38:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000b3c:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b40:	d815      	bhi.n	8000b6e <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR; 
 8000b42:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b46:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b4a:	68ce      	ldr	r6, [r1, #12]
 8000b4c:	fa06 fa0e 	lsl.w	sl, r6, lr
 8000b50:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 8000b54:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b58:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b5c:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b60:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 8000b64:	fa0c fc03 	lsl.w	ip, ip, r3
 8000b68:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 8000b6c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b6e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b70:	9e01      	ldr	r6, [sp, #4]
 8000b72:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b74:	688e      	ldr	r6, [r1, #8]
 8000b76:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b7a:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000b7c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b7e:	00e6      	lsls	r6, r4, #3
 8000b80:	d566      	bpl.n	8000c50 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000b86:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b8a:	f003 0c03 	and.w	ip, r3, #3
 8000b8e:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000b96:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b9a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000ba2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000ba6:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000baa:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000bae:	9603      	str	r6, [sp, #12]
 8000bb0:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bb2:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 8000bb6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bba:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bbe:	4e32      	ldr	r6, [pc, #200]	; (8000c88 <HAL_GPIO_Init+0x1d8>)
 8000bc0:	42b0      	cmp	r0, r6
 8000bc2:	d04c      	beq.n	8000c5e <HAL_GPIO_Init+0x1ae>
 8000bc4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bc8:	42b0      	cmp	r0, r6
 8000bca:	d04a      	beq.n	8000c62 <HAL_GPIO_Init+0x1b2>
 8000bcc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bd0:	42b0      	cmp	r0, r6
 8000bd2:	d048      	beq.n	8000c66 <HAL_GPIO_Init+0x1b6>
 8000bd4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bd8:	42b0      	cmp	r0, r6
 8000bda:	d046      	beq.n	8000c6a <HAL_GPIO_Init+0x1ba>
 8000bdc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000be0:	42b0      	cmp	r0, r6
 8000be2:	d044      	beq.n	8000c6e <HAL_GPIO_Init+0x1be>
 8000be4:	4548      	cmp	r0, r9
 8000be6:	d044      	beq.n	8000c72 <HAL_GPIO_Init+0x1c2>
 8000be8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000bec:	42b0      	cmp	r0, r6
 8000bee:	d042      	beq.n	8000c76 <HAL_GPIO_Init+0x1c6>
 8000bf0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bf4:	42b0      	cmp	r0, r6
 8000bf6:	d040      	beq.n	8000c7a <HAL_GPIO_Init+0x1ca>
 8000bf8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bfc:	42b0      	cmp	r0, r6
 8000bfe:	d03e      	beq.n	8000c7e <HAL_GPIO_Init+0x1ce>
 8000c00:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c04:	42b0      	cmp	r0, r6
 8000c06:	bf0c      	ite	eq
 8000c08:	2609      	moveq	r6, #9
 8000c0a:	260a      	movne	r6, #10
 8000c0c:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c10:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c14:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c18:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c1a:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8000c1e:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c20:	bf0c      	ite	eq
 8000c22:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c24:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c26:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000c2a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000c2c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c2e:	bf0c      	ite	eq
 8000c30:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c32:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c34:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000c38:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000c3a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c3c:	bf0c      	ite	eq
 8000c3e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c40:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c42:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000c44:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000c46:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c48:	bf54      	ite	pl
 8000c4a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000c4c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000c4e:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c50:	3301      	adds	r3, #1
 8000c52:	2b10      	cmp	r3, #16
 8000c54:	f47f af35 	bne.w	8000ac2 <HAL_GPIO_Init+0x12>
      }
    }
  }
}
 8000c58:	b005      	add	sp, #20
 8000c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c5e:	2600      	movs	r6, #0
 8000c60:	e7d4      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c62:	2601      	movs	r6, #1
 8000c64:	e7d2      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c66:	2602      	movs	r6, #2
 8000c68:	e7d0      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c6a:	2603      	movs	r6, #3
 8000c6c:	e7ce      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c6e:	2604      	movs	r6, #4
 8000c70:	e7cc      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c72:	2605      	movs	r6, #5
 8000c74:	e7ca      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c76:	2606      	movs	r6, #6
 8000c78:	e7c8      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c7a:	2607      	movs	r6, #7
 8000c7c:	e7c6      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c7e:	2608      	movs	r6, #8
 8000c80:	e7c4      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c82:	bf00      	nop
 8000c84:	40013c00 	.word	0x40013c00
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40021400 	.word	0x40021400

08000c94 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c94:	6903      	ldr	r3, [r0, #16]
 8000c96:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000c98:	bf14      	ite	ne
 8000c9a:	2001      	movne	r0, #1
 8000c9c:	2000      	moveq	r0, #0
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ca0:	b10a      	cbz	r2, 8000ca6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000ca2:	6181      	str	r1, [r0, #24]
  }
}
 8000ca4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000ca6:	0409      	lsls	r1, r1, #16
 8000ca8:	e7fb      	b.n	8000ca2 <HAL_GPIO_WritePin+0x2>

08000caa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000caa:	6943      	ldr	r3, [r0, #20]
 8000cac:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000cb0:	bf08      	it	eq
 8000cb2:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cb4:	6181      	str	r1, [r0, #24]
  }
}
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cb8:	4770      	bx	lr
	...

08000cbc <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000cbe:	6951      	ldr	r1, [r2, #20]
 8000cc0:	4201      	tst	r1, r0
{
 8000cc2:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000cc4:	d002      	beq.n	8000ccc <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cc6:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cc8:	f7ff fff6 	bl	8000cb8 <HAL_GPIO_EXTI_Callback>
}
 8000ccc:	bd08      	pop	{r3, pc}
 8000cce:	bf00      	nop
 8000cd0:	40013c00 	.word	0x40013c00

08000cd4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000cd4:	6803      	ldr	r3, [r0, #0]
 8000cd6:	699a      	ldr	r2, [r3, #24]
 8000cd8:	0791      	lsls	r1, r2, #30
 8000cda:	d501      	bpl.n	8000ce0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000cdc:	2200      	movs	r2, #0
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ce0:	699a      	ldr	r2, [r3, #24]
 8000ce2:	07d2      	lsls	r2, r2, #31
 8000ce4:	d403      	bmi.n	8000cee <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000ce6:	699a      	ldr	r2, [r3, #24]
 8000ce8:	f042 0201 	orr.w	r2, r2, #1
 8000cec:	619a      	str	r2, [r3, #24]
  }
}
 8000cee:	4770      	bx	lr

08000cf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000cf0:	b530      	push	{r4, r5, lr}
 8000cf2:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000cf4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000cf8:	6804      	ldr	r4, [r0, #0]
 8000cfa:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8000cfe:	6860      	ldr	r0, [r4, #4]
 8000d00:	431a      	orrs	r2, r3
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <I2C_TransferConfig+0x24>)
 8000d04:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	ea20 0003 	bic.w	r0, r0, r3
 8000d0e:	4302      	orrs	r2, r0
 8000d10:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000d12:	bd30      	pop	{r4, r5, pc}
 8000d14:	03ff63ff 	.word	0x03ff63ff

08000d18 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000d18:	f011 0301 	ands.w	r3, r1, #1
 8000d1c:	d007      	beq.n	8000d2e <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000d1e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000d22:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000d26:	2b28      	cmp	r3, #40	; 0x28
 8000d28:	bf0c      	ite	eq
 8000d2a:	2342      	moveq	r3, #66	; 0x42
 8000d2c:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000d2e:	078a      	lsls	r2, r1, #30
 8000d30:	d509      	bpl.n	8000d46 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000d32:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000d36:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000d3a:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000d3c:	bf0c      	ite	eq
 8000d3e:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000d42:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000d46:	074a      	lsls	r2, r1, #29
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000d48:	6801      	ldr	r1, [r0, #0]
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000d4a:	bf48      	it	mi
 8000d4c:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000d50:	680a      	ldr	r2, [r1, #0]
 8000d52:	ea22 0303 	bic.w	r3, r2, r3
 8000d56:	600b      	str	r3, [r1, #0]
}
 8000d58:	4770      	bx	lr

08000d5a <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d5a:	6803      	ldr	r3, [r0, #0]
{
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d60:	6998      	ldr	r0, [r3, #24]
{
 8000d62:	460d      	mov	r5, r1
 8000d64:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d66:	f010 0010 	ands.w	r0, r0, #16
 8000d6a:	d116      	bne.n	8000d9a <I2C_IsAcknowledgeFailed+0x40>
}
 8000d6c:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000d6e:	1c69      	adds	r1, r5, #1
 8000d70:	d014      	beq.n	8000d9c <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d72:	f7ff fc7b 	bl	800066c <HAL_GetTick>
 8000d76:	1b80      	subs	r0, r0, r6
 8000d78:	4285      	cmp	r5, r0
 8000d7a:	d300      	bcc.n	8000d7e <I2C_IsAcknowledgeFailed+0x24>
 8000d7c:	b96d      	cbnz	r5, 8000d9a <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d80:	f043 0320 	orr.w	r3, r3, #32
 8000d84:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000d86:	2320      	movs	r3, #32
 8000d88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000d92:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000d96:	2001      	movs	r0, #1
 8000d98:	e7e8      	b.n	8000d6c <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	699a      	ldr	r2, [r3, #24]
 8000d9e:	0692      	lsls	r2, r2, #26
 8000da0:	d5e5      	bpl.n	8000d6e <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000da2:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000da4:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8000da6:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000da8:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000daa:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000dac:	f7ff ff92 	bl	8000cd4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000db0:	6822      	ldr	r2, [r4, #0]
 8000db2:	6853      	ldr	r3, [r2, #4]
 8000db4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000db8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000dbc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000dc0:	f023 0301 	bic.w	r3, r3, #1
 8000dc4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000dc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dce:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000dd0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000dd4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000ddc:	e7db      	b.n	8000d96 <I2C_IsAcknowledgeFailed+0x3c>

08000dde <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000dde:	b570      	push	{r4, r5, r6, lr}
 8000de0:	4604      	mov	r4, r0
 8000de2:	460d      	mov	r5, r1
 8000de4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	079b      	lsls	r3, r3, #30
 8000dec:	d501      	bpl.n	8000df2 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000dee:	2000      	movs	r0, #0
}
 8000df0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000df2:	4632      	mov	r2, r6
 8000df4:	4629      	mov	r1, r5
 8000df6:	4620      	mov	r0, r4
 8000df8:	f7ff ffaf 	bl	8000d5a <I2C_IsAcknowledgeFailed>
 8000dfc:	b9a0      	cbnz	r0, 8000e28 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000dfe:	1c6a      	adds	r2, r5, #1
 8000e00:	d0f1      	beq.n	8000de6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e02:	f7ff fc33 	bl	800066c <HAL_GetTick>
 8000e06:	1b80      	subs	r0, r0, r6
 8000e08:	42a8      	cmp	r0, r5
 8000e0a:	d801      	bhi.n	8000e10 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d1ea      	bne.n	8000de6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e12:	f043 0320 	orr.w	r3, r3, #32
 8000e16:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000e18:	2320      	movs	r3, #32
 8000e1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000e24:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000e28:	2001      	movs	r0, #1
 8000e2a:	e7e1      	b.n	8000df0 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08000e2c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	4604      	mov	r4, r0
 8000e30:	460d      	mov	r5, r1
 8000e32:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	075b      	lsls	r3, r3, #29
 8000e3a:	d40e      	bmi.n	8000e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e3c:	4632      	mov	r2, r6
 8000e3e:	4629      	mov	r1, r5
 8000e40:	4620      	mov	r0, r4
 8000e42:	f7ff ff8a 	bl	8000d5a <I2C_IsAcknowledgeFailed>
 8000e46:	b9f0      	cbnz	r0, 8000e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	699a      	ldr	r2, [r3, #24]
 8000e4c:	0691      	lsls	r1, r2, #26
 8000e4e:	d51c      	bpl.n	8000e8a <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8000e50:	699a      	ldr	r2, [r3, #24]
 8000e52:	0752      	lsls	r2, r2, #29
 8000e54:	d503      	bpl.n	8000e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8000e56:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000e58:	b10a      	cbz	r2, 8000e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8000e5a:	2000      	movs	r0, #0
}
 8000e5c:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e5e:	2120      	movs	r1, #32
 8000e60:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000e68:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000e6c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000e70:	f022 0201 	bic.w	r2, r2, #1
 8000e74:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000e7a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000e82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000e86:	2001      	movs	r0, #1
 8000e88:	e7e8      	b.n	8000e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e8a:	f7ff fbef 	bl	800066c <HAL_GetTick>
 8000e8e:	1b80      	subs	r0, r0, r6
 8000e90:	42a8      	cmp	r0, r5
 8000e92:	d801      	bhi.n	8000e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8000e94:	2d00      	cmp	r5, #0
 8000e96:	d1cd      	bne.n	8000e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e9a:	f043 0320 	orr.w	r3, r3, #32
 8000e9e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e7eb      	b.n	8000e82 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08000eaa <I2C_WaitOnFlagUntilTimeout>:
{
 8000eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eae:	9f06      	ldr	r7, [sp, #24]
 8000eb0:	4604      	mov	r4, r0
 8000eb2:	4688      	mov	r8, r1
 8000eb4:	4616      	mov	r6, r2
 8000eb6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000eb8:	6822      	ldr	r2, [r4, #0]
 8000eba:	6993      	ldr	r3, [r2, #24]
 8000ebc:	ea38 0303 	bics.w	r3, r8, r3
 8000ec0:	bf0c      	ite	eq
 8000ec2:	2301      	moveq	r3, #1
 8000ec4:	2300      	movne	r3, #0
 8000ec6:	42b3      	cmp	r3, r6
 8000ec8:	d001      	beq.n	8000ece <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8000eca:	2000      	movs	r0, #0
 8000ecc:	e015      	b.n	8000efa <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000ece:	1c6b      	adds	r3, r5, #1
 8000ed0:	d0f3      	beq.n	8000eba <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ed2:	f7ff fbcb 	bl	800066c <HAL_GetTick>
 8000ed6:	1bc0      	subs	r0, r0, r7
 8000ed8:	42a8      	cmp	r0, r5
 8000eda:	d801      	bhi.n	8000ee0 <I2C_WaitOnFlagUntilTimeout+0x36>
 8000edc:	2d00      	cmp	r5, #0
 8000ede:	d1eb      	bne.n	8000eb8 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ee0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000ee2:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ee4:	f043 0320 	orr.w	r3, r3, #32
 8000ee8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000eea:	2320      	movs	r3, #32
 8000eec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000ef6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8000efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000f00 <I2C_RequestMemoryWrite>:
{
 8000f00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000f04:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <I2C_RequestMemoryWrite+0x68>)
{
 8000f08:	4605      	mov	r5, r0
 8000f0a:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	b2f2      	uxtb	r2, r6
 8000f10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8000f14:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f18:	f7ff feea 	bl	8000cf0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	4642      	mov	r2, r8
 8000f20:	4639      	mov	r1, r7
 8000f22:	f7ff ff5c 	bl	8000dde <I2C_WaitOnTXISFlagUntilTimeout>
 8000f26:	b118      	cbz	r0, 8000f30 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8000f28:	2001      	movs	r0, #1
}
 8000f2a:	b002      	add	sp, #8
 8000f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000f30:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f32:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000f34:	d10d      	bne.n	8000f52 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f36:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f3e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000f40:	463b      	mov	r3, r7
 8000f42:	f8cd 8000 	str.w	r8, [sp]
 8000f46:	f7ff ffb0 	bl	8000eaa <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8000f4a:	3800      	subs	r0, #0
 8000f4c:	bf18      	it	ne
 8000f4e:	2001      	movne	r0, #1
 8000f50:	e7eb      	b.n	8000f2a <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000f52:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f54:	4639      	mov	r1, r7
 8000f56:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f5a:	4642      	mov	r2, r8
 8000f5c:	f7ff ff3f 	bl	8000dde <I2C_WaitOnTXISFlagUntilTimeout>
 8000f60:	2800      	cmp	r0, #0
 8000f62:	d1e1      	bne.n	8000f28 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f64:	682b      	ldr	r3, [r5, #0]
 8000f66:	e7e6      	b.n	8000f36 <I2C_RequestMemoryWrite+0x36>
 8000f68:	80002000 	.word	0x80002000

08000f6c <I2C_RequestMemoryRead>:
{
 8000f6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000f70:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <I2C_RequestMemoryRead+0x68>)
{
 8000f74:	4605      	mov	r5, r0
 8000f76:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	b2f2      	uxtb	r2, r6
 8000f7c:	2300      	movs	r3, #0
{
 8000f7e:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000f82:	f7ff feb5 	bl	8000cf0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f86:	4628      	mov	r0, r5
 8000f88:	4642      	mov	r2, r8
 8000f8a:	4639      	mov	r1, r7
 8000f8c:	f7ff ff27 	bl	8000dde <I2C_WaitOnTXISFlagUntilTimeout>
 8000f90:	b118      	cbz	r0, 8000f9a <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8000f92:	2001      	movs	r0, #1
}
 8000f94:	b002      	add	sp, #8
 8000f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000f9a:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f9c:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000f9e:	d10d      	bne.n	8000fbc <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000fa0:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2140      	movs	r1, #64	; 0x40
 8000fa6:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000fa8:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000faa:	463b      	mov	r3, r7
 8000fac:	f8cd 8000 	str.w	r8, [sp]
 8000fb0:	f7ff ff7b 	bl	8000eaa <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8000fb4:	3800      	subs	r0, #0
 8000fb6:	bf18      	it	ne
 8000fb8:	2001      	movne	r0, #1
 8000fba:	e7eb      	b.n	8000f94 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000fbc:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fbe:	4639      	mov	r1, r7
 8000fc0:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fc4:	4642      	mov	r2, r8
 8000fc6:	f7ff ff0a 	bl	8000dde <I2C_WaitOnTXISFlagUntilTimeout>
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d1e1      	bne.n	8000f92 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000fce:	682b      	ldr	r3, [r5, #0]
 8000fd0:	e7e6      	b.n	8000fa0 <I2C_RequestMemoryRead+0x34>
 8000fd2:	bf00      	nop
 8000fd4:	80002000 	.word	0x80002000

08000fd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000fd8:	b570      	push	{r4, r5, r6, lr}
 8000fda:	4604      	mov	r4, r0
 8000fdc:	460d      	mov	r5, r1
 8000fde:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000fe0:	6823      	ldr	r3, [r4, #0]
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	069b      	lsls	r3, r3, #26
 8000fe6:	d501      	bpl.n	8000fec <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000fe8:	2000      	movs	r0, #0
}
 8000fea:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fec:	4632      	mov	r2, r6
 8000fee:	4629      	mov	r1, r5
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f7ff feb2 	bl	8000d5a <I2C_IsAcknowledgeFailed>
 8000ff6:	b990      	cbnz	r0, 800101e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ff8:	f7ff fb38 	bl	800066c <HAL_GetTick>
 8000ffc:	1b80      	subs	r0, r0, r6
 8000ffe:	42a8      	cmp	r0, r5
 8001000:	d801      	bhi.n	8001006 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d1ec      	bne.n	8000fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001006:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001008:	f043 0320 	orr.w	r3, r3, #32
 800100c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800100e:	2320      	movs	r3, #32
 8001010:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001014:	2300      	movs	r3, #0
 8001016:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800101a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800101e:	2001      	movs	r0, #1
 8001020:	e7e3      	b.n	8000fea <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08001022 <HAL_I2C_Init>:
{
 8001022:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001024:	4604      	mov	r4, r0
 8001026:	2800      	cmp	r0, #0
 8001028:	d04a      	beq.n	80010c0 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800102a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800102e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001032:	b91b      	cbnz	r3, 800103c <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001034:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001038:	f003 ffaa 	bl	8004f90 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800103c:	2324      	movs	r3, #36	; 0x24
 800103e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	f022 0201 	bic.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800104c:	6862      	ldr	r2, [r4, #4]
 800104e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001052:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800105a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800105c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001060:	2901      	cmp	r1, #1
 8001062:	d124      	bne.n	80010ae <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001068:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800106a:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800106c:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800106e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001076:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800107e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001080:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8001084:	430a      	orrs	r2, r1
 8001086:	69a1      	ldr	r1, [r4, #24]
 8001088:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800108c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800108e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8001092:	430a      	orrs	r2, r1
 8001094:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	f042 0201 	orr.w	r2, r2, #1
 800109c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800109e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010a0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010a6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010a8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80010ac:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010b2:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010b4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010b6:	d1d8      	bne.n	800106a <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	e7d4      	b.n	800106a <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80010c0:	2001      	movs	r0, #1
 80010c2:	e7f3      	b.n	80010ac <HAL_I2C_Init+0x8a>

080010c4 <HAL_I2C_Master_Transmit>:
{
 80010c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80010c8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010ca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80010ce:	4604      	mov	r4, r0
 80010d0:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010d2:	2b20      	cmp	r3, #32
{
 80010d4:	4691      	mov	r9, r2
 80010d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010d8:	f040 8086 	bne.w	80011e8 <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 80010dc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	f000 8081 	beq.w	80011e8 <HAL_I2C_Master_Transmit+0x124>
 80010e6:	f04f 0a01 	mov.w	sl, #1
 80010ea:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80010ee:	f7ff fabd 	bl	800066c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010f2:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80010f4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010f6:	9000      	str	r0, [sp, #0]
 80010f8:	4652      	mov	r2, sl
 80010fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010fe:	4620      	mov	r0, r4
 8001100:	f7ff fed3 	bl	8000eaa <I2C_WaitOnFlagUntilTimeout>
 8001104:	b118      	cbz	r0, 800110e <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 8001106:	2001      	movs	r0, #1
}
 8001108:	b002      	add	sp, #8
 800110a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800110e:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8001110:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001114:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001116:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800111a:	2310      	movs	r3, #16
 800111c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001120:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001122:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001126:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001128:	b29b      	uxth	r3, r3
 800112a:	2bff      	cmp	r3, #255	; 0xff
 800112c:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <HAL_I2C_Master_Transmit+0x128>)
 800112e:	d926      	bls.n	800117e <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001130:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001132:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001134:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001136:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800113a:	4631      	mov	r1, r6
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff fdd7 	bl	8000cf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001142:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001144:	462a      	mov	r2, r5
 8001146:	4639      	mov	r1, r7
 8001148:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800114a:	b29b      	uxth	r3, r3
 800114c:	b9fb      	cbnz	r3, 800118e <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800114e:	f7ff ff43 	bl	8000fd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001152:	2800      	cmp	r0, #0
 8001154:	d1d7      	bne.n	8001106 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	2120      	movs	r1, #32
 800115a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001162:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001166:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001170:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001174:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001178:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800117c:	e7c4      	b.n	8001108 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800117e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001180:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001182:	b292      	uxth	r2, r2
 8001184:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	e7d5      	b.n	800113a <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800118e:	f7ff fe26 	bl	8000dde <I2C_WaitOnTXISFlagUntilTimeout>
 8001192:	2800      	cmp	r0, #0
 8001194:	d1b7      	bne.n	8001106 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001198:	6822      	ldr	r2, [r4, #0]
 800119a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800119e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80011a0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80011a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80011a4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80011a6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80011a8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80011aa:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80011ac:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80011ae:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80011b2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0c3      	beq.n	8001142 <HAL_I2C_Master_Transmit+0x7e>
 80011ba:	2a00      	cmp	r2, #0
 80011bc:	d1c1      	bne.n	8001142 <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	4620      	mov	r0, r4
 80011c4:	9500      	str	r5, [sp, #0]
 80011c6:	f7ff fe70 	bl	8000eaa <I2C_WaitOnFlagUntilTimeout>
 80011ca:	2800      	cmp	r0, #0
 80011cc:	d19b      	bne.n	8001106 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	2bff      	cmp	r3, #255	; 0xff
 80011d4:	d903      	bls.n	80011de <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011d6:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011d8:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011da:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011dc:	e7ab      	b.n	8001136 <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 80011de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011e0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80011e2:	b292      	uxth	r2, r2
 80011e4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011e6:	e7ce      	b.n	8001186 <HAL_I2C_Master_Transmit+0xc2>
    return HAL_BUSY;
 80011e8:	2002      	movs	r0, #2
 80011ea:	e78d      	b.n	8001108 <HAL_I2C_Master_Transmit+0x44>
 80011ec:	80002000 	.word	0x80002000

080011f0 <HAL_I2C_Master_Receive>:
{
 80011f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80011f4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011f6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80011fa:	4604      	mov	r4, r0
 80011fc:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011fe:	2b20      	cmp	r3, #32
{
 8001200:	4691      	mov	r9, r2
 8001202:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001204:	f040 8087 	bne.w	8001316 <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 8001208:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800120c:	2b01      	cmp	r3, #1
 800120e:	f000 8082 	beq.w	8001316 <HAL_I2C_Master_Receive+0x126>
 8001212:	f04f 0a01 	mov.w	sl, #1
 8001216:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800121a:	f7ff fa27 	bl	800066c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800121e:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001220:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001222:	9000      	str	r0, [sp, #0]
 8001224:	4652      	mov	r2, sl
 8001226:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff fe3d 	bl	8000eaa <I2C_WaitOnFlagUntilTimeout>
 8001230:	b118      	cbz	r0, 800123a <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 8001232:	2001      	movs	r0, #1
}
 8001234:	b002      	add	sp, #8
 8001236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800123a:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800123c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001240:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001242:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001246:	2310      	movs	r3, #16
 8001248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800124c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800124e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001252:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001254:	b29b      	uxth	r3, r3
 8001256:	2bff      	cmp	r3, #255	; 0xff
 8001258:	4b30      	ldr	r3, [pc, #192]	; (800131c <HAL_I2C_Master_Receive+0x12c>)
 800125a:	d926      	bls.n	80012aa <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800125c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800125e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001260:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001262:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001266:	4631      	mov	r1, r6
 8001268:	4620      	mov	r0, r4
 800126a:	f7ff fd41 	bl	8000cf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800126e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001270:	462a      	mov	r2, r5
 8001272:	4639      	mov	r1, r7
 8001274:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001276:	b29b      	uxth	r3, r3
 8001278:	b9fb      	cbnz	r3, 80012ba <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800127a:	f7ff fead 	bl	8000fd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800127e:	2800      	cmp	r0, #0
 8001280:	d1d7      	bne.n	8001232 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	2120      	movs	r1, #32
 8001286:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800128e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001292:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001296:	f022 0201 	bic.w	r2, r2, #1
 800129a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800129c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012a0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012a4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80012a8:	e7c4      	b.n	8001234 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80012aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80012ac:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80012ae:	b292      	uxth	r2, r2
 80012b0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	e7d5      	b.n	8001266 <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012ba:	f7ff fdb7 	bl	8000e2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80012be:	2800      	cmp	r0, #0
 80012c0:	d1b7      	bne.n	8001232 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012c8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80012ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80012cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80012ce:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80012d0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80012d2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80012d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80012d6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80012d8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80012da:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80012dc:	b29b      	uxth	r3, r3
 80012de:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0c2      	beq.n	800126e <HAL_I2C_Master_Receive+0x7e>
 80012e8:	2a00      	cmp	r2, #0
 80012ea:	d1c0      	bne.n	800126e <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	2180      	movs	r1, #128	; 0x80
 80012f0:	4620      	mov	r0, r4
 80012f2:	9500      	str	r5, [sp, #0]
 80012f4:	f7ff fdd9 	bl	8000eaa <I2C_WaitOnFlagUntilTimeout>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d19a      	bne.n	8001232 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012fe:	b29b      	uxth	r3, r3
 8001300:	2bff      	cmp	r3, #255	; 0xff
 8001302:	d903      	bls.n	800130c <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001304:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001306:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001308:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800130a:	e7aa      	b.n	8001262 <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 800130c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800130e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001310:	b292      	uxth	r2, r2
 8001312:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001314:	e7cd      	b.n	80012b2 <HAL_I2C_Master_Receive+0xc2>
    return HAL_BUSY;
 8001316:	2002      	movs	r0, #2
 8001318:	e78c      	b.n	8001234 <HAL_I2C_Master_Receive+0x44>
 800131a:	bf00      	nop
 800131c:	80002400 	.word	0x80002400

08001320 <HAL_I2C_Mem_Write>:
{
 8001320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001324:	b085      	sub	sp, #20
 8001326:	469b      	mov	fp, r3
 8001328:	4604      	mov	r4, r0
 800132a:	460f      	mov	r7, r1
 800132c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8001330:	4692      	mov	sl, r2
 8001332:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8001336:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001338:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800133c:	2b20      	cmp	r3, #32
 800133e:	f040 80a3 	bne.w	8001488 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8001342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001344:	b10b      	cbz	r3, 800134a <HAL_I2C_Mem_Write+0x2a>
 8001346:	9b03      	ldr	r3, [sp, #12]
 8001348:	b933      	cbnz	r3, 8001358 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800134a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800134e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001350:	2001      	movs	r0, #1
}
 8001352:	b005      	add	sp, #20
 8001354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001358:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800135c:	2b01      	cmp	r3, #1
 800135e:	f000 8093 	beq.w	8001488 <HAL_I2C_Mem_Write+0x168>
 8001362:	2501      	movs	r5, #1
 8001364:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001368:	f7ff f980 	bl	800066c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800136c:	2319      	movs	r3, #25
 800136e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001370:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001372:	462a      	mov	r2, r5
 8001374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001378:	4620      	mov	r0, r4
 800137a:	f7ff fd96 	bl	8000eaa <I2C_WaitOnFlagUntilTimeout>
 800137e:	4680      	mov	r8, r0
 8001380:	2800      	cmp	r0, #0
 8001382:	d1e5      	bne.n	8001350 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001384:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8001386:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001388:	4652      	mov	r2, sl
 800138a:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800138c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001390:	2340      	movs	r3, #64	; 0x40
 8001392:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001398:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800139a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800139c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800139e:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013a0:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 80013a4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013a6:	465b      	mov	r3, fp
 80013a8:	f7ff fdaa 	bl	8000f00 <I2C_RequestMemoryWrite>
 80013ac:	b110      	cbz	r0, 80013b4 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 80013ae:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 80013b2:	e7cd      	b.n	8001350 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	2bff      	cmp	r3, #255	; 0xff
 80013ba:	d955      	bls.n	8001468 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013bc:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013c2:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013c4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013c6:	4639      	mov	r1, r7
 80013c8:	4620      	mov	r0, r4
 80013ca:	f7ff fc91 	bl	8000cf0 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ce:	4632      	mov	r2, r6
 80013d0:	4649      	mov	r1, r9
 80013d2:	4620      	mov	r0, r4
 80013d4:	f7ff fd03 	bl	8000dde <I2C_WaitOnTXISFlagUntilTimeout>
 80013d8:	2800      	cmp	r0, #0
 80013da:	d1b9      	bne.n	8001350 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013de:	6822      	ldr	r2, [r4, #0]
 80013e0:	f813 1b01 	ldrb.w	r1, [r3], #1
 80013e4:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80013e6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80013e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80013ea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80013ec:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80013ee:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80013f0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80013f2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80013f4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80013f8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b1ab      	cbz	r3, 800142a <HAL_I2C_Mem_Write+0x10a>
 80013fe:	b9a2      	cbnz	r2, 800142a <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001400:	464b      	mov	r3, r9
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	4620      	mov	r0, r4
 8001406:	9600      	str	r6, [sp, #0]
 8001408:	f7ff fd4f 	bl	8000eaa <I2C_WaitOnFlagUntilTimeout>
 800140c:	2800      	cmp	r0, #0
 800140e:	d19f      	bne.n	8001350 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001410:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001412:	b29b      	uxth	r3, r3
 8001414:	2bff      	cmp	r3, #255	; 0xff
 8001416:	d92f      	bls.n	8001478 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001418:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800141a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800141e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001420:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001422:	4639      	mov	r1, r7
 8001424:	4620      	mov	r0, r4
 8001426:	f7ff fc63 	bl	8000cf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800142a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800142c:	b29b      	uxth	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1cd      	bne.n	80013ce <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001432:	4632      	mov	r2, r6
 8001434:	4649      	mov	r1, r9
 8001436:	4620      	mov	r0, r4
 8001438:	f7ff fdce 	bl	8000fd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800143c:	2800      	cmp	r0, #0
 800143e:	d187      	bne.n	8001350 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	2120      	movs	r1, #32
 8001444:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800144c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001450:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800145a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800145e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001462:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001466:	e774      	b.n	8001352 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001468:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800146a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800146e:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001470:	b292      	uxth	r2, r2
 8001472:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	e7a6      	b.n	80013c6 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8001478:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800147a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800147e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001480:	b292      	uxth	r2, r2
 8001482:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	e7cc      	b.n	8001422 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8001488:	2002      	movs	r0, #2
 800148a:	e762      	b.n	8001352 <HAL_I2C_Mem_Write+0x32>

0800148c <HAL_I2C_Mem_Read>:
{
 800148c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001490:	b085      	sub	sp, #20
 8001492:	469b      	mov	fp, r3
 8001494:	4604      	mov	r4, r0
 8001496:	460f      	mov	r7, r1
 8001498:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800149c:	4692      	mov	sl, r2
 800149e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80014a2:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80014a8:	2b20      	cmp	r3, #32
 80014aa:	f040 80a7 	bne.w	80015fc <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 80014ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80014b0:	b10b      	cbz	r3, 80014b6 <HAL_I2C_Mem_Read+0x2a>
 80014b2:	9b03      	ldr	r3, [sp, #12]
 80014b4:	b933      	cbnz	r3, 80014c4 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80014b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ba:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80014bc:	2001      	movs	r0, #1
}
 80014be:	b005      	add	sp, #20
 80014c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80014c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	f000 8097 	beq.w	80015fc <HAL_I2C_Mem_Read+0x170>
 80014ce:	2501      	movs	r5, #1
 80014d0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80014d4:	f7ff f8ca 	bl	800066c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014d8:	2319      	movs	r3, #25
 80014da:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80014dc:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014de:	462a      	mov	r2, r5
 80014e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e4:	4620      	mov	r0, r4
 80014e6:	f7ff fce0 	bl	8000eaa <I2C_WaitOnFlagUntilTimeout>
 80014ea:	4680      	mov	r8, r0
 80014ec:	2800      	cmp	r0, #0
 80014ee:	d1e5      	bne.n	80014bc <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014f0:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 80014f2:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014f4:	4652      	mov	r2, sl
 80014f6:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014fc:	2340      	movs	r3, #64	; 0x40
 80014fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001504:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001506:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8001508:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800150a:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800150c:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8001510:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001512:	465b      	mov	r3, fp
 8001514:	f7ff fd2a 	bl	8000f6c <I2C_RequestMemoryRead>
 8001518:	b110      	cbz	r0, 8001520 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 800151a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800151e:	e7cd      	b.n	80014bc <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001520:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001522:	b29b      	uxth	r3, r3
 8001524:	2bff      	cmp	r3, #255	; 0xff
 8001526:	4b36      	ldr	r3, [pc, #216]	; (8001600 <HAL_I2C_Mem_Read+0x174>)
 8001528:	d958      	bls.n	80015dc <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800152a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001532:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001534:	4639      	mov	r1, r7
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff fbda 	bl	8000cf0 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800153c:	464b      	mov	r3, r9
 800153e:	2200      	movs	r2, #0
 8001540:	2104      	movs	r1, #4
 8001542:	4620      	mov	r0, r4
 8001544:	9600      	str	r6, [sp, #0]
 8001546:	f7ff fcb0 	bl	8000eaa <I2C_WaitOnFlagUntilTimeout>
 800154a:	2800      	cmp	r0, #0
 800154c:	d1b6      	bne.n	80014bc <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001554:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001556:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001558:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800155a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800155c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800155e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001560:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001562:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001564:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001566:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001568:	b29b      	uxth	r3, r3
 800156a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800156c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800156e:	b29b      	uxth	r3, r3
 8001570:	b1ab      	cbz	r3, 800159e <HAL_I2C_Mem_Read+0x112>
 8001572:	b9a2      	cbnz	r2, 800159e <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001574:	464b      	mov	r3, r9
 8001576:	2180      	movs	r1, #128	; 0x80
 8001578:	4620      	mov	r0, r4
 800157a:	9600      	str	r6, [sp, #0]
 800157c:	f7ff fc95 	bl	8000eaa <I2C_WaitOnFlagUntilTimeout>
 8001580:	2800      	cmp	r0, #0
 8001582:	d19b      	bne.n	80014bc <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001584:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001586:	b29b      	uxth	r3, r3
 8001588:	2bff      	cmp	r3, #255	; 0xff
 800158a:	d92f      	bls.n	80015ec <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800158c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800158e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001592:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001594:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001596:	4639      	mov	r1, r7
 8001598:	4620      	mov	r0, r4
 800159a:	f7ff fba9 	bl	8000cf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800159e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1ca      	bne.n	800153c <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a6:	4632      	mov	r2, r6
 80015a8:	4649      	mov	r1, r9
 80015aa:	4620      	mov	r0, r4
 80015ac:	f7ff fd14 	bl	8000fd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015b0:	2800      	cmp	r0, #0
 80015b2:	d183      	bne.n	80014bc <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	2120      	movs	r1, #32
 80015b8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80015c0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80015c4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80015c8:	f022 0201 	bic.w	r2, r2, #1
 80015cc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80015ce:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80015d2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015d6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80015da:	e770      	b.n	80014be <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80015dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80015e4:	b292      	uxth	r2, r2
 80015e6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	e7a3      	b.n	8001534 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80015ec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015f2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80015f4:	b292      	uxth	r2, r2
 80015f6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	e7cc      	b.n	8001596 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 80015fc:	2002      	movs	r0, #2
 80015fe:	e75e      	b.n	80014be <HAL_I2C_Mem_Read+0x32>
 8001600:	80002400 	.word	0x80002400

08001604 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001604:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8001606:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001608:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800160a:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 800160c:	b103      	cbz	r3, 8001610 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 800160e:	4718      	bx	r3
}
 8001610:	4770      	bx	lr

08001612 <HAL_I2C_SlaveTxCpltCallback>:
 8001612:	4770      	bx	lr

08001614 <HAL_I2C_SlaveRxCpltCallback>:
 8001614:	4770      	bx	lr

08001616 <I2C_ITSlaveSeqCplt>:
{
 8001616:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001618:	2500      	movs	r5, #0
 800161a:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800161e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001622:	2b29      	cmp	r3, #41	; 0x29
 8001624:	d10c      	bne.n	8001640 <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001626:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001628:	2101      	movs	r1, #1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800162a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800162e:	2321      	movs	r3, #33	; 0x21
 8001630:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001632:	f7ff fb71 	bl	8000d18 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001636:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800163a:	f7ff ffea 	bl	8001612 <HAL_I2C_SlaveTxCpltCallback>
}
 800163e:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001640:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001644:	2b2a      	cmp	r3, #42	; 0x2a
 8001646:	d1fa      	bne.n	800163e <I2C_ITSlaveSeqCplt+0x28>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001648:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800164a:	2102      	movs	r1, #2
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800164c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001650:	2322      	movs	r3, #34	; 0x22
 8001652:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001654:	f7ff fb60 	bl	8000d18 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001658:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800165c:	f7ff ffda 	bl	8001614 <HAL_I2C_SlaveRxCpltCallback>
}
 8001660:	e7ed      	b.n	800163e <I2C_ITSlaveSeqCplt+0x28>

08001662 <HAL_I2C_AddrCallback>:
}
 8001662:	4770      	bx	lr

08001664 <I2C_ITAddrCplt.constprop.0>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001664:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001668:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800166c:	2a28      	cmp	r2, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800166e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8001670:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001672:	d133      	bne.n	80016dc <I2C_ITAddrCplt.constprop.0+0x78>
    transferdirection = I2C_GET_DIR(hi2c);
 8001674:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001676:	68c2      	ldr	r2, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001678:	699d      	ldr	r5, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 800167a:	f3c6 4600 	ubfx	r6, r6, #16, #1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800167e:	2a02      	cmp	r2, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001680:	6899      	ldr	r1, [r3, #8]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001682:	ea4f 4515 	mov.w	r5, r5, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001686:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001688:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800168c:	d11e      	bne.n	80016cc <I2C_ITAddrCplt.constprop.0+0x68>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800168e:	ea85 15d1 	eor.w	r5, r5, r1, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001692:	f3c1 0209 	ubfx	r2, r1, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001696:	f015 0506 	ands.w	r5, r5, #6
 800169a:	d10e      	bne.n	80016ba <I2C_ITAddrCplt.constprop.0+0x56>
        hi2c->AddrEventCount++;
 800169c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800169e:	3101      	adds	r1, #1
 80016a0:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80016a2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80016a4:	2902      	cmp	r1, #2
 80016a6:	d107      	bne.n	80016b8 <I2C_ITAddrCplt.constprop.0+0x54>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80016a8:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 80016aa:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80016ac:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80016ae:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80016b2:	4631      	mov	r1, r6
 80016b4:	f7ff ffd5 	bl	8001662 <HAL_I2C_AddrCallback>
}
 80016b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80016ba:	2104      	movs	r1, #4
 80016bc:	f7ff fb2c 	bl	8000d18 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80016c0:	2300      	movs	r3, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80016c2:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
        __HAL_UNLOCK(hi2c);
 80016c6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80016ca:	e7f2      	b.n	80016b2 <I2C_ITAddrCplt.constprop.0+0x4e>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80016cc:	2104      	movs	r1, #4
 80016ce:	f7ff fb23 	bl	8000d18 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80016d2:	2300      	movs	r3, #0
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80016d4:	462a      	mov	r2, r5
      __HAL_UNLOCK(hi2c);
 80016d6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80016da:	e7ea      	b.n	80016b2 <I2C_ITAddrCplt.constprop.0+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80016dc:	2208      	movs	r2, #8
 80016de:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80016e0:	2300      	movs	r3, #0
 80016e2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 80016e6:	e7e7      	b.n	80016b8 <I2C_ITAddrCplt.constprop.0+0x54>

080016e8 <HAL_I2C_ListenCpltCallback>:
 80016e8:	4770      	bx	lr
	...

080016ec <I2C_ITListenCplt>:
{
 80016ec:	b508      	push	{r3, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <I2C_ITListenCplt+0x58>)
  hi2c->State = HAL_I2C_STATE_READY;
 80016f0:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 80016f8:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 80016fa:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fe:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001702:	074b      	lsls	r3, r1, #29
 8001704:	d512      	bpl.n	800172c <I2C_ITListenCplt+0x40>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001706:	6803      	ldr	r3, [r0, #0]
 8001708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800170c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800170e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001710:	3301      	adds	r3, #1
 8001712:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8001714:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8001716:	b14b      	cbz	r3, 800172c <I2C_ITListenCplt+0x40>
      hi2c->XferSize--;
 8001718:	3b01      	subs	r3, #1
 800171a:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 800171c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800171e:	3b01      	subs	r3, #1
 8001720:	b29b      	uxth	r3, r3
 8001722:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001724:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800172c:	2107      	movs	r1, #7
 800172e:	f7ff faf3 	bl	8000d18 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001732:	6803      	ldr	r3, [r0, #0]
 8001734:	2210      	movs	r2, #16
 8001736:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8001738:	2300      	movs	r3, #0
 800173a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800173e:	f7ff ffd3 	bl	80016e8 <HAL_I2C_ListenCpltCallback>
}
 8001742:	bd08      	pop	{r3, pc}
 8001744:	ffff0000 	.word	0xffff0000

08001748 <HAL_I2C_ErrorCallback>:
 8001748:	4770      	bx	lr

0800174a <HAL_I2C_AbortCpltCallback>:
 800174a:	4770      	bx	lr

0800174c <I2C_ITError>:
{
 800174c:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800174e:	4a32      	ldr	r2, [pc, #200]	; (8001818 <I2C_ITError+0xcc>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001750:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001752:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001756:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001758:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800175c:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800175e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001760:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8001762:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001764:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8001766:	ea41 0102 	orr.w	r1, r1, r2
 800176a:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800176c:	d821      	bhi.n	80017b2 <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800176e:	2103      	movs	r1, #3
 8001770:	f7ff fad2 	bl	8000d18 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001774:	2328      	movs	r3, #40	; 0x28
 8001776:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800177a:	4b28      	ldr	r3, [pc, #160]	; (800181c <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 800177c:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800177e:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001784:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001786:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 800178a:	d01f      	beq.n	80017cc <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800178c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    if (hi2c->hdmatx != NULL)
 8001790:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001792:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8001794:	2800      	cmp	r0, #0
 8001796:	d037      	beq.n	8001808 <I2C_ITError+0xbc>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001798:	4b21      	ldr	r3, [pc, #132]	; (8001820 <I2C_ITError+0xd4>)
 800179a:	6503      	str	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800179c:	2300      	movs	r3, #0
 800179e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80017a2:	f7ff f8b4 	bl	800090e <HAL_DMA_Abort_IT>
 80017a6:	b378      	cbz	r0, 8001808 <I2C_ITError+0xbc>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80017a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80017aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 80017ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80017b0:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80017b2:	2107      	movs	r1, #7
 80017b4:	f7ff fab0 	bl	8000d18 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80017b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80017bc:	2b60      	cmp	r3, #96	; 0x60
 80017be:	d002      	beq.n	80017c6 <I2C_ITError+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 80017c0:	2320      	movs	r3, #32
 80017c2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	6323      	str	r3, [r4, #48]	; 0x30
 80017ca:	e7d8      	b.n	800177e <I2C_ITError+0x32>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80017cc:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 80017d0:	d00e      	beq.n	80017f0 <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80017d2:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80017d4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80017d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017da:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80017dc:	b1a0      	cbz	r0, 8001808 <I2C_ITError+0xbc>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <I2C_ITError+0xd4>)
 80017e0:	6503      	str	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80017e2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80017e6:	f7ff f892 	bl	800090e <HAL_DMA_Abort_IT>
 80017ea:	b168      	cbz	r0, 8001808 <I2C_ITError+0xbc>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80017ec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80017ee:	e7dc      	b.n	80017aa <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80017f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80017f4:	2b60      	cmp	r3, #96	; 0x60
 80017f6:	d108      	bne.n	800180a <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 80017f8:	2320      	movs	r3, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 80017fa:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80017fc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001800:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001804:	f7ff ffa1 	bl	800174a <HAL_I2C_AbortCpltCallback>
}
 8001808:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_ErrorCallback(hi2c);
 800180a:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800180c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001810:	f7ff ff9a 	bl	8001748 <HAL_I2C_ErrorCallback>
}
 8001814:	e7f8      	b.n	8001808 <I2C_ITError+0xbc>
 8001816:	bf00      	nop
 8001818:	ffff0000 	.word	0xffff0000
 800181c:	0800191d 	.word	0x0800191d
 8001820:	08001a91 	.word	0x08001a91

08001824 <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001824:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001826:	2220      	movs	r2, #32
{
 8001828:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800182a:	681e      	ldr	r6, [r3, #0]
{
 800182c:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800182e:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001830:	2107      	movs	r1, #7
 8001832:	f7ff fa71 	bl	8000d18 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001836:	6803      	ldr	r3, [r0, #0]
{
 8001838:	4604      	mov	r4, r0
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001840:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001848:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800184c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001850:	f022 0201 	bic.w	r2, r2, #1
 8001854:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8001856:	f7ff fa3d 	bl	8000cd4 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800185a:	0471      	lsls	r1, r6, #17
 800185c:	d534      	bpl.n	80018c8 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 800185e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8001860:	b11b      	cbz	r3, 800186a <I2C_ITSlaveCplt+0x46>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	b29b      	uxth	r3, r3
 8001868:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800186a:	076b      	lsls	r3, r5, #29
 800186c:	d510      	bpl.n	8001890 <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800186e:	6823      	ldr	r3, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001870:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001878:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800187a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800187c:	3301      	adds	r3, #1
 800187e:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8001880:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001882:	b12b      	cbz	r3, 8001890 <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 8001884:	3b01      	subs	r3, #1
 8001886:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001888:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800188a:	3b01      	subs	r3, #1
 800188c:	b29b      	uxth	r3, r3
 800188e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8001890:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001892:	b29b      	uxth	r3, r3
 8001894:	b11b      	cbz	r3, 800189e <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001896:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 800189e:	2300      	movs	r3, #0
 80018a0:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80018a6:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 80018a8:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80018aa:	b18e      	cbz	r6, 80018d0 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80018ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff ff4c 	bl	800174c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80018b4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80018b8:	2b28      	cmp	r3, #40	; 0x28
 80018ba:	d11a      	bne.n	80018f2 <I2C_ITSlaveCplt+0xce>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80018bc:	4629      	mov	r1, r5
 80018be:	4620      	mov	r0, r4
}
 80018c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80018c4:	f7ff bf12 	b.w	80016ec <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80018c8:	0432      	lsls	r2, r6, #16
 80018ca:	d5ce      	bpl.n	800186a <I2C_ITSlaveCplt+0x46>
    if (hi2c->hdmarx != NULL)
 80018cc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80018ce:	e7c7      	b.n	8001860 <I2C_ITSlaveCplt+0x3c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80018d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018d6:	d00d      	beq.n	80018f4 <I2C_ITSlaveCplt+0xd0>
    I2C_ITSlaveSeqCplt(hi2c);
 80018d8:	4620      	mov	r0, r4
 80018da:	f7ff fe9c 	bl	8001616 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <I2C_ITSlaveCplt+0xf4>)
    HAL_I2C_ListenCpltCallback(hi2c);
 80018e0:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80018e2:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018e6:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80018e8:	2320      	movs	r3, #32
 80018ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 80018ee:	f7ff fefb 	bl	80016e8 <HAL_I2C_ListenCpltCallback>
}
 80018f2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80018f4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80018f8:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80018fa:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80018fe:	2b22      	cmp	r3, #34	; 0x22
 8001900:	f04f 0320 	mov.w	r3, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8001904:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001908:	d102      	bne.n	8001910 <I2C_ITSlaveCplt+0xec>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800190a:	f7ff fe83 	bl	8001614 <HAL_I2C_SlaveRxCpltCallback>
 800190e:	e7f0      	b.n	80018f2 <I2C_ITSlaveCplt+0xce>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001910:	f7ff fe7f 	bl	8001612 <HAL_I2C_SlaveTxCpltCallback>
}
 8001914:	e7ed      	b.n	80018f2 <I2C_ITSlaveCplt+0xce>
 8001916:	bf00      	nop
 8001918:	ffff0000 	.word	0xffff0000

0800191c <I2C_Slave_ISR_IT>:
{
 800191c:	b570      	push	{r4, r5, r6, lr}
 800191e:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8001920:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
{
 8001924:	4604      	mov	r4, r0
 8001926:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8001928:	2a01      	cmp	r2, #1
  uint32_t tmpoptions = hi2c->XferOptions;
 800192a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800192c:	d07e      	beq.n	8001a2c <I2C_Slave_ISR_IT+0x110>
 800192e:	2201      	movs	r2, #1
 8001930:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001934:	06ca      	lsls	r2, r1, #27
 8001936:	d538      	bpl.n	80019aa <I2C_Slave_ISR_IT+0x8e>
 8001938:	06f2      	lsls	r2, r6, #27
 800193a:	d536      	bpl.n	80019aa <I2C_Slave_ISR_IT+0x8e>
    if (hi2c->XferCount == 0U)
 800193c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800193e:	b292      	uxth	r2, r2
 8001940:	bb2a      	cbnz	r2, 800198e <I2C_Slave_ISR_IT+0x72>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001942:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001946:	2a28      	cmp	r2, #40	; 0x28
 8001948:	d110      	bne.n	800196c <I2C_Slave_ISR_IT+0x50>
 800194a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800194e:	d10d      	bne.n	800196c <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001950:	f7ff fecc 	bl	80016ec <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001954:	06aa      	lsls	r2, r5, #26
 8001956:	d505      	bpl.n	8001964 <I2C_Slave_ISR_IT+0x48>
 8001958:	06b3      	lsls	r3, r6, #26
 800195a:	d503      	bpl.n	8001964 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800195c:	4629      	mov	r1, r5
 800195e:	4620      	mov	r0, r4
 8001960:	f7ff ff60 	bl	8001824 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8001964:	2000      	movs	r0, #0
 8001966:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800196a:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800196c:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001970:	6822      	ldr	r2, [r4, #0]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001972:	2929      	cmp	r1, #41	; 0x29
 8001974:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001978:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800197a:	d1eb      	bne.n	8001954 <I2C_Slave_ISR_IT+0x38>
 800197c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001980:	d0e8      	beq.n	8001954 <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 8001982:	4620      	mov	r0, r4
 8001984:	f7ff f9a6 	bl	8000cd4 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8001988:	f7ff fe45 	bl	8001616 <I2C_ITSlaveSeqCplt>
 800198c:	e7e2      	b.n	8001954 <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800198e:	6802      	ldr	r2, [r0, #0]
 8001990:	2110      	movs	r1, #16
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001992:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001996:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001998:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800199a:	f042 0204 	orr.w	r2, r2, #4
 800199e:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80019a0:	d1d8      	bne.n	8001954 <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80019a2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80019a4:	f7ff fed2 	bl	800174c <I2C_ITError>
 80019a8:	e7d4      	b.n	8001954 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80019aa:	076a      	lsls	r2, r5, #29
 80019ac:	d51d      	bpl.n	80019ea <I2C_Slave_ISR_IT+0xce>
 80019ae:	0770      	lsls	r0, r6, #29
 80019b0:	d51b      	bpl.n	80019ea <I2C_Slave_ISR_IT+0xce>
    if (hi2c->XferCount > 0U)
 80019b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80019b4:	b292      	uxth	r2, r2
 80019b6:	b17a      	cbz	r2, 80019d8 <I2C_Slave_ISR_IT+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019b8:	6822      	ldr	r2, [r4, #0]
      tmpITFlags &= ~I2C_FLAG_RXNE;
 80019ba:	f025 0504 	bic.w	r5, r5, #4
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019be:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80019c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019c2:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 80019c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019c6:	3201      	adds	r2, #1
 80019c8:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80019ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80019cc:	3a01      	subs	r2, #1
 80019ce:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80019d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80019d2:	3a01      	subs	r2, #1
 80019d4:	b292      	uxth	r2, r2
 80019d6:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80019d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80019da:	b292      	uxth	r2, r2
 80019dc:	2a00      	cmp	r2, #0
 80019de:	d1b9      	bne.n	8001954 <I2C_Slave_ISR_IT+0x38>
 80019e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019e4:	d0b6      	beq.n	8001954 <I2C_Slave_ISR_IT+0x38>
        I2C_ITSlaveSeqCplt(hi2c);
 80019e6:	4620      	mov	r0, r4
 80019e8:	e7ce      	b.n	8001988 <I2C_Slave_ISR_IT+0x6c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80019ea:	0729      	lsls	r1, r5, #28
 80019ec:	d505      	bpl.n	80019fa <I2C_Slave_ISR_IT+0xde>
 80019ee:	0732      	lsls	r2, r6, #28
 80019f0:	d503      	bpl.n	80019fa <I2C_Slave_ISR_IT+0xde>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80019f2:	4620      	mov	r0, r4
 80019f4:	f7ff fe36 	bl	8001664 <I2C_ITAddrCplt.constprop.0>
 80019f8:	e7ac      	b.n	8001954 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80019fa:	07a8      	lsls	r0, r5, #30
 80019fc:	d5aa      	bpl.n	8001954 <I2C_Slave_ISR_IT+0x38>
 80019fe:	07b1      	lsls	r1, r6, #30
 8001a00:	d5a8      	bpl.n	8001954 <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 8001a02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001a04:	b292      	uxth	r2, r2
 8001a06:	b16a      	cbz	r2, 8001a24 <I2C_Slave_ISR_IT+0x108>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a0a:	6822      	ldr	r2, [r4, #0]
 8001a0c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001a10:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001a12:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001a14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001a1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	8523      	strh	r3, [r4, #40]	; 0x28
 8001a22:	e797      	b.n	8001954 <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001a24:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8001a28:	d194      	bne.n	8001954 <I2C_Slave_ISR_IT+0x38>
 8001a2a:	e7dc      	b.n	80019e6 <I2C_Slave_ISR_IT+0xca>
  __HAL_LOCK(hi2c);
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	e79c      	b.n	800196a <I2C_Slave_ISR_IT+0x4e>

08001a30 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001a30:	6803      	ldr	r3, [r0, #0]
 8001a32:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001a34:	681a      	ldr	r2, [r3, #0]
{
 8001a36:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a38:	05cc      	lsls	r4, r1, #23
 8001a3a:	d508      	bpl.n	8001a4e <HAL_I2C_ER_IRQHandler+0x1e>
 8001a3c:	0614      	lsls	r4, r2, #24
 8001a3e:	d506      	bpl.n	8001a4e <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001a40:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a42:	f044 0401 	orr.w	r4, r4, #1
 8001a46:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a48:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001a4c:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a4e:	054c      	lsls	r4, r1, #21
 8001a50:	d508      	bpl.n	8001a64 <HAL_I2C_ER_IRQHandler+0x34>
 8001a52:	0614      	lsls	r4, r2, #24
 8001a54:	d506      	bpl.n	8001a64 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001a56:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a58:	f044 0408 	orr.w	r4, r4, #8
 8001a5c:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001a62:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a64:	0589      	lsls	r1, r1, #22
 8001a66:	d508      	bpl.n	8001a7a <HAL_I2C_ER_IRQHandler+0x4a>
 8001a68:	0612      	lsls	r2, r2, #24
 8001a6a:	d506      	bpl.n	8001a7a <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001a6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001a6e:	f042 0202 	orr.w	r2, r2, #2
 8001a72:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a78:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8001a7a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001a7c:	f011 0f0b 	tst.w	r1, #11
 8001a80:	d003      	beq.n	8001a8a <HAL_I2C_ER_IRQHandler+0x5a>
}
 8001a82:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8001a86:	f7ff be61 	b.w	800174c <I2C_ITError>
}
 8001a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001a90:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001a92:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001a94:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001a96:	2300      	movs	r3, #0
 8001a98:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001a9a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001a9c:	6513      	str	r3, [r2, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001a9e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001aa2:	2b60      	cmp	r3, #96	; 0x60
 8001aa4:	d105      	bne.n	8001ab2 <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001aac:	f7ff fe4d 	bl	800174a <HAL_I2C_AbortCpltCallback>
}
 8001ab0:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8001ab2:	f7ff fe49 	bl	8001748 <HAL_I2C_ErrorCallback>
}
 8001ab6:	e7fb      	b.n	8001ab0 <I2C_DMAAbort+0x20>

08001ab8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ab8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001abe:	2b20      	cmp	r3, #32
 8001ac0:	b2dc      	uxtb	r4, r3
 8001ac2:	d11d      	bne.n	8001b00 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d019      	beq.n	8001b00 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001acc:	2324      	movs	r3, #36	; 0x24
 8001ace:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ad2:	6803      	ldr	r3, [r0, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ae2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4311      	orrs	r1, r2
 8001ae8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	f042 0201 	orr.w	r2, r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001af4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001af8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001afc:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001afe:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001b00:	2002      	movs	r0, #2
 8001b02:	e7fc      	b.n	8001afe <HAL_I2CEx_ConfigAnalogFilter+0x46>

08001b04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b04:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b06:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	b2dc      	uxtb	r4, r3
 8001b0e:	d11c      	bne.n	8001b4a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b10:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d018      	beq.n	8001b4a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b18:	2324      	movs	r3, #36	; 0x24
 8001b1a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b1e:	6803      	ldr	r3, [r0, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b28:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b2a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b2e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b32:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b3c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001b3e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001b42:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001b46:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001b48:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	e7fc      	b.n	8001b48 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08001b50 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001b52:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b56:	4c19      	ldr	r4, [pc, #100]	; (8001bbc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b70:	f7fe fd7c 	bl	800066c <HAL_GetTick>
 8001b74:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b76:	6863      	ldr	r3, [r4, #4]
 8001b78:	03da      	lsls	r2, r3, #15
 8001b7a:	d50c      	bpl.n	8001b96 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b7c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b7e:	4d0f      	ldr	r5, [pc, #60]	; (8001bbc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b84:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001b86:	f7fe fd71 	bl	800066c <HAL_GetTick>
 8001b8a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b8c:	686b      	ldr	r3, [r5, #4]
 8001b8e:	039b      	lsls	r3, r3, #14
 8001b90:	d50a      	bpl.n	8001ba8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001b92:	2000      	movs	r0, #0
 8001b94:	e006      	b.n	8001ba4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b96:	f7fe fd69 	bl	800066c <HAL_GetTick>
 8001b9a:	1b40      	subs	r0, r0, r5
 8001b9c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001ba0:	d9e9      	bls.n	8001b76 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001ba2:	2003      	movs	r0, #3
}
 8001ba4:	b003      	add	sp, #12
 8001ba6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ba8:	f7fe fd60 	bl	800066c <HAL_GetTick>
 8001bac:	1b00      	subs	r0, r0, r4
 8001bae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001bb2:	d9eb      	bls.n	8001b8c <HAL_PWREx_EnableOverDrive+0x3c>
 8001bb4:	e7f5      	b.n	8001ba2 <HAL_PWREx_EnableOverDrive+0x52>
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000

08001bc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	b918      	cbnz	r0, 8001bd0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001bc8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001bca:	b002      	add	sp, #8
 8001bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd0:	6803      	ldr	r3, [r0, #0]
 8001bd2:	07db      	lsls	r3, r3, #31
 8001bd4:	d410      	bmi.n	8001bf8 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	079f      	lsls	r7, r3, #30
 8001bda:	d461      	bmi.n	8001ca0 <HAL_RCC_OscConfig+0xe0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	0719      	lsls	r1, r3, #28
 8001be0:	f100 80a8 	bmi.w	8001d34 <HAL_RCC_OscConfig+0x174>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	075a      	lsls	r2, r3, #29
 8001be8:	f100 80c9 	bmi.w	8001d7e <HAL_RCC_OscConfig+0x1be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bec:	69a2      	ldr	r2, [r4, #24]
 8001bee:	2a00      	cmp	r2, #0
 8001bf0:	f040 8132 	bne.w	8001e58 <HAL_RCC_OscConfig+0x298>
  return HAL_OK;
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	e7e8      	b.n	8001bca <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf8:	4b95      	ldr	r3, [pc, #596]	; (8001e50 <HAL_RCC_OscConfig+0x290>)
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	f002 020c 	and.w	r2, r2, #12
 8001c00:	2a04      	cmp	r2, #4
 8001c02:	d007      	beq.n	8001c14 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	f002 020c 	and.w	r2, r2, #12
 8001c0a:	2a08      	cmp	r2, #8
 8001c0c:	d10a      	bne.n	8001c24 <HAL_RCC_OscConfig+0x64>
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	0256      	lsls	r6, r2, #9
 8001c12:	d507      	bpl.n	8001c24 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	4b8e      	ldr	r3, [pc, #568]	; (8001e50 <HAL_RCC_OscConfig+0x290>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	039d      	lsls	r5, r3, #14
 8001c1a:	d5dc      	bpl.n	8001bd6 <HAL_RCC_OscConfig+0x16>
 8001c1c:	6863      	ldr	r3, [r4, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1d9      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x16>
 8001c22:	e7d1      	b.n	8001bc8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c24:	6862      	ldr	r2, [r4, #4]
 8001c26:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001c2a:	d111      	bne.n	8001c50 <HAL_RCC_OscConfig+0x90>
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c32:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c34:	f7fe fd1a 	bl	800066c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c38:	4e85      	ldr	r6, [pc, #532]	; (8001e50 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8001c3a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3c:	6833      	ldr	r3, [r6, #0]
 8001c3e:	0398      	lsls	r0, r3, #14
 8001c40:	d4c9      	bmi.n	8001bd6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c42:	f7fe fd13 	bl	800066c <HAL_GetTick>
 8001c46:	1b40      	subs	r0, r0, r5
 8001c48:	2864      	cmp	r0, #100	; 0x64
 8001c4a:	d9f7      	bls.n	8001c3c <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	e7bc      	b.n	8001bca <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c50:	4d7f      	ldr	r5, [pc, #508]	; (8001e50 <HAL_RCC_OscConfig+0x290>)
 8001c52:	682b      	ldr	r3, [r5, #0]
 8001c54:	b992      	cbnz	r2, 8001c7c <HAL_RCC_OscConfig+0xbc>
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5a:	602b      	str	r3, [r5, #0]
 8001c5c:	682b      	ldr	r3, [r5, #0]
 8001c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c62:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c64:	f7fe fd02 	bl	800066c <HAL_GetTick>
 8001c68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	682b      	ldr	r3, [r5, #0]
 8001c6c:	0399      	lsls	r1, r3, #14
 8001c6e:	d5b2      	bpl.n	8001bd6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c70:	f7fe fcfc 	bl	800066c <HAL_GetTick>
 8001c74:	1b80      	subs	r0, r0, r6
 8001c76:	2864      	cmp	r0, #100	; 0x64
 8001c78:	d9f7      	bls.n	8001c6a <HAL_RCC_OscConfig+0xaa>
 8001c7a:	e7e7      	b.n	8001c4c <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_OscConfig+0xd2>
 8001c82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c86:	602b      	str	r3, [r5, #0]
 8001c88:	682b      	ldr	r3, [r5, #0]
 8001c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8e:	602b      	str	r3, [r5, #0]
 8001c90:	e7d0      	b.n	8001c34 <HAL_RCC_OscConfig+0x74>
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c96:	602b      	str	r3, [r5, #0]
 8001c98:	682b      	ldr	r3, [r5, #0]
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9e:	e7f6      	b.n	8001c8e <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca0:	4b6b      	ldr	r3, [pc, #428]	; (8001e50 <HAL_RCC_OscConfig+0x290>)
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	f012 0f0c 	tst.w	r2, #12
 8001ca8:	d007      	beq.n	8001cba <HAL_RCC_OscConfig+0xfa>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	f002 020c 	and.w	r2, r2, #12
 8001cb0:	2a08      	cmp	r2, #8
 8001cb2:	d112      	bne.n	8001cda <HAL_RCC_OscConfig+0x11a>
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	0252      	lsls	r2, r2, #9
 8001cb8:	d40f      	bmi.n	8001cda <HAL_RCC_OscConfig+0x11a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	4a65      	ldr	r2, [pc, #404]	; (8001e50 <HAL_RCC_OscConfig+0x290>)
 8001cbc:	6813      	ldr	r3, [r2, #0]
 8001cbe:	079b      	lsls	r3, r3, #30
 8001cc0:	d503      	bpl.n	8001cca <HAL_RCC_OscConfig+0x10a>
 8001cc2:	68e3      	ldr	r3, [r4, #12]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	f47f af7f 	bne.w	8001bc8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cca:	6813      	ldr	r3, [r2, #0]
 8001ccc:	6921      	ldr	r1, [r4, #16]
 8001cce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001cd2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cd6:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd8:	e780      	b.n	8001bdc <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cda:	68e2      	ldr	r2, [r4, #12]
 8001cdc:	b1c2      	cbz	r2, 8001d10 <HAL_RCC_OscConfig+0x150>
        __HAL_RCC_HSI_ENABLE();
 8001cde:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	4d5b      	ldr	r5, [pc, #364]	; (8001e50 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ce8:	f7fe fcc0 	bl	800066c <HAL_GetTick>
 8001cec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cee:	682b      	ldr	r3, [r5, #0]
 8001cf0:	079f      	lsls	r7, r3, #30
 8001cf2:	d507      	bpl.n	8001d04 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	682b      	ldr	r3, [r5, #0]
 8001cf6:	6922      	ldr	r2, [r4, #16]
 8001cf8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001cfc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d00:	602b      	str	r3, [r5, #0]
 8001d02:	e76b      	b.n	8001bdc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d04:	f7fe fcb2 	bl	800066c <HAL_GetTick>
 8001d08:	1b80      	subs	r0, r0, r6
 8001d0a:	2802      	cmp	r0, #2
 8001d0c:	d9ef      	bls.n	8001cee <HAL_RCC_OscConfig+0x12e>
 8001d0e:	e79d      	b.n	8001c4c <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 8001d10:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d12:	4e4f      	ldr	r6, [pc, #316]	; (8001e50 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_DISABLE();
 8001d14:	f022 0201 	bic.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d1a:	f7fe fca7 	bl	800066c <HAL_GetTick>
 8001d1e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d20:	6833      	ldr	r3, [r6, #0]
 8001d22:	0798      	lsls	r0, r3, #30
 8001d24:	f57f af5a 	bpl.w	8001bdc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d28:	f7fe fca0 	bl	800066c <HAL_GetTick>
 8001d2c:	1b40      	subs	r0, r0, r5
 8001d2e:	2802      	cmp	r0, #2
 8001d30:	d9f6      	bls.n	8001d20 <HAL_RCC_OscConfig+0x160>
 8001d32:	e78b      	b.n	8001c4c <HAL_RCC_OscConfig+0x8c>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d34:	6963      	ldr	r3, [r4, #20]
 8001d36:	4d46      	ldr	r5, [pc, #280]	; (8001e50 <HAL_RCC_OscConfig+0x290>)
 8001d38:	b183      	cbz	r3, 8001d5c <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_LSI_ENABLE();
 8001d3a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001d42:	f7fe fc93 	bl	800066c <HAL_GetTick>
 8001d46:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d48:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d4a:	079b      	lsls	r3, r3, #30
 8001d4c:	f53f af4a 	bmi.w	8001be4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d50:	f7fe fc8c 	bl	800066c <HAL_GetTick>
 8001d54:	1b80      	subs	r0, r0, r6
 8001d56:	2802      	cmp	r0, #2
 8001d58:	d9f6      	bls.n	8001d48 <HAL_RCC_OscConfig+0x188>
 8001d5a:	e777      	b.n	8001c4c <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 8001d5c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001d64:	f7fe fc82 	bl	800066c <HAL_GetTick>
 8001d68:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d6c:	079f      	lsls	r7, r3, #30
 8001d6e:	f57f af39 	bpl.w	8001be4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d72:	f7fe fc7b 	bl	800066c <HAL_GetTick>
 8001d76:	1b80      	subs	r0, r0, r6
 8001d78:	2802      	cmp	r0, #2
 8001d7a:	d9f6      	bls.n	8001d6a <HAL_RCC_OscConfig+0x1aa>
 8001d7c:	e766      	b.n	8001c4c <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7e:	4b34      	ldr	r3, [pc, #208]	; (8001e50 <HAL_RCC_OscConfig+0x290>)
 8001d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d82:	00d0      	lsls	r0, r2, #3
 8001d84:	d427      	bmi.n	8001dd6 <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001d88:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9a:	4d2e      	ldr	r5, [pc, #184]	; (8001e54 <HAL_RCC_OscConfig+0x294>)
 8001d9c:	682b      	ldr	r3, [r5, #0]
 8001d9e:	05d9      	lsls	r1, r3, #23
 8001da0:	d51b      	bpl.n	8001dda <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da2:	68a3      	ldr	r3, [r4, #8]
 8001da4:	4d2a      	ldr	r5, [pc, #168]	; (8001e50 <HAL_RCC_OscConfig+0x290>)
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d127      	bne.n	8001dfa <HAL_RCC_OscConfig+0x23a>
 8001daa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001db6:	f7fe fc59 	bl	800066c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dba:	4e25      	ldr	r6, [pc, #148]	; (8001e50 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8001dbc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbe:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001dc0:	079b      	lsls	r3, r3, #30
 8001dc2:	d53f      	bpl.n	8001e44 <HAL_RCC_OscConfig+0x284>
    if(pwrclkchanged == SET)
 8001dc4:	2f00      	cmp	r7, #0
 8001dc6:	f43f af11 	beq.w	8001bec <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dca:	4a21      	ldr	r2, [pc, #132]	; (8001e50 <HAL_RCC_OscConfig+0x290>)
 8001dcc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd4:	e70a      	b.n	8001bec <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001dd6:	2700      	movs	r7, #0
 8001dd8:	e7df      	b.n	8001d9a <HAL_RCC_OscConfig+0x1da>
      PWR->CR1 |= PWR_CR1_DBP;
 8001dda:	682b      	ldr	r3, [r5, #0]
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001de2:	f7fe fc43 	bl	800066c <HAL_GetTick>
 8001de6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de8:	682b      	ldr	r3, [r5, #0]
 8001dea:	05da      	lsls	r2, r3, #23
 8001dec:	d4d9      	bmi.n	8001da2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001dee:	f7fe fc3d 	bl	800066c <HAL_GetTick>
 8001df2:	1b80      	subs	r0, r0, r6
 8001df4:	2864      	cmp	r0, #100	; 0x64
 8001df6:	d9f7      	bls.n	8001de8 <HAL_RCC_OscConfig+0x228>
 8001df8:	e728      	b.n	8001c4c <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dfa:	b9ab      	cbnz	r3, 8001e28 <HAL_RCC_OscConfig+0x268>
 8001dfc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	672b      	str	r3, [r5, #112]	; 0x70
 8001e08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e0a:	f023 0304 	bic.w	r3, r3, #4
 8001e0e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001e10:	f7fe fc2c 	bl	800066c <HAL_GetTick>
 8001e14:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e16:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e18:	0798      	lsls	r0, r3, #30
 8001e1a:	d5d3      	bpl.n	8001dc4 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1c:	f7fe fc26 	bl	800066c <HAL_GetTick>
 8001e20:	1b80      	subs	r0, r0, r6
 8001e22:	4540      	cmp	r0, r8
 8001e24:	d9f7      	bls.n	8001e16 <HAL_RCC_OscConfig+0x256>
 8001e26:	e711      	b.n	8001c4c <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e2c:	d103      	bne.n	8001e36 <HAL_RCC_OscConfig+0x276>
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	672b      	str	r3, [r5, #112]	; 0x70
 8001e34:	e7b9      	b.n	8001daa <HAL_RCC_OscConfig+0x1ea>
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	672b      	str	r3, [r5, #112]	; 0x70
 8001e3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e3e:	f023 0304 	bic.w	r3, r3, #4
 8001e42:	e7b5      	b.n	8001db0 <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7fe fc12 	bl	800066c <HAL_GetTick>
 8001e48:	1b40      	subs	r0, r0, r5
 8001e4a:	4540      	cmp	r0, r8
 8001e4c:	d9b7      	bls.n	8001dbe <HAL_RCC_OscConfig+0x1fe>
 8001e4e:	e6fd      	b.n	8001c4c <HAL_RCC_OscConfig+0x8c>
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e58:	4d24      	ldr	r5, [pc, #144]	; (8001eec <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	68ab      	ldr	r3, [r5, #8]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	f43f aeb1 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001e66:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e68:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e70:	d12f      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x312>
        tickstart = HAL_GetTick();
 8001e72:	f7fe fbfb 	bl	800066c <HAL_GetTick>
 8001e76:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e78:	682b      	ldr	r3, [r5, #0]
 8001e7a:	0199      	lsls	r1, r3, #6
 8001e7c:	d423      	bmi.n	8001ec6 <HAL_RCC_OscConfig+0x306>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e7e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e86:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e90:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e92:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001e96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e98:	0852      	lsrs	r2, r2, #1
 8001e9a:	3a01      	subs	r2, #1
 8001e9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ea0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ea2:	682b      	ldr	r3, [r5, #0]
 8001ea4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001eaa:	f7fe fbdf 	bl	800066c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	4d0f      	ldr	r5, [pc, #60]	; (8001eec <HAL_RCC_OscConfig+0x32c>)
        tickstart = HAL_GetTick();
 8001eb0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb2:	682b      	ldr	r3, [r5, #0]
 8001eb4:	019a      	lsls	r2, r3, #6
 8001eb6:	f53f ae9d 	bmi.w	8001bf4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eba:	f7fe fbd7 	bl	800066c <HAL_GetTick>
 8001ebe:	1b00      	subs	r0, r0, r4
 8001ec0:	2802      	cmp	r0, #2
 8001ec2:	d9f6      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x2f2>
 8001ec4:	e6c2      	b.n	8001c4c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7fe fbd1 	bl	800066c <HAL_GetTick>
 8001eca:	1b80      	subs	r0, r0, r6
 8001ecc:	2802      	cmp	r0, #2
 8001ece:	d9d3      	bls.n	8001e78 <HAL_RCC_OscConfig+0x2b8>
 8001ed0:	e6bc      	b.n	8001c4c <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 8001ed2:	f7fe fbcb 	bl	800066c <HAL_GetTick>
 8001ed6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed8:	682b      	ldr	r3, [r5, #0]
 8001eda:	019b      	lsls	r3, r3, #6
 8001edc:	f57f ae8a 	bpl.w	8001bf4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7fe fbc4 	bl	800066c <HAL_GetTick>
 8001ee4:	1b00      	subs	r0, r0, r4
 8001ee6:	2802      	cmp	r0, #2
 8001ee8:	d9f6      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x318>
 8001eea:	e6af      	b.n	8001c4c <HAL_RCC_OscConfig+0x8c>
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ef0:	4913      	ldr	r1, [pc, #76]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001ef2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ef4:	688b      	ldr	r3, [r1, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d01b      	beq.n	8001f36 <HAL_RCC_GetSysClockFreq+0x46>
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d11b      	bne.n	8001f3a <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f02:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f04:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f06:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f08:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f0c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f10:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001f14:	bf1a      	itte	ne
 8001f16:	480b      	ldrne	r0, [pc, #44]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x54>)
 8001f18:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1a:	480b      	ldreq	r0, [pc, #44]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x58>)
 8001f1c:	fba1 0100 	umull	r0, r1, r1, r0
 8001f20:	f7fe f9e6 	bl	80002f0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x50>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001f30:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f34:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f36:	4803      	ldr	r0, [pc, #12]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x54>)
 8001f38:	e7fc      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8001f3a:	4803      	ldr	r0, [pc, #12]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001f3c:	e7fa      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x44>
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	017d7840 	.word	0x017d7840
 8001f48:	00f42400 	.word	0x00f42400

08001f4c <HAL_RCC_ClockConfig>:
{
 8001f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f50:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001f52:	4604      	mov	r4, r0
 8001f54:	b910      	cbnz	r0, 8001f5c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f56:	2001      	movs	r0, #1
}
 8001f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f5c:	4a45      	ldr	r2, [pc, #276]	; (8002074 <HAL_RCC_ClockConfig+0x128>)
 8001f5e:	6813      	ldr	r3, [r2, #0]
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	428b      	cmp	r3, r1
 8001f66:	d327      	bcc.n	8001fb8 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f68:	6822      	ldr	r2, [r4, #0]
 8001f6a:	0797      	lsls	r7, r2, #30
 8001f6c:	d42f      	bmi.n	8001fce <HAL_RCC_ClockConfig+0x82>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	07d0      	lsls	r0, r2, #31
 8001f70:	d443      	bmi.n	8001ffa <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f72:	4a40      	ldr	r2, [pc, #256]	; (8002074 <HAL_RCC_ClockConfig+0x128>)
 8001f74:	6813      	ldr	r3, [r2, #0]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	42ab      	cmp	r3, r5
 8001f7c:	d866      	bhi.n	800204c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7e:	6822      	ldr	r2, [r4, #0]
 8001f80:	0751      	lsls	r1, r2, #29
 8001f82:	d46f      	bmi.n	8002064 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f84:	0713      	lsls	r3, r2, #28
 8001f86:	d507      	bpl.n	8001f98 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f88:	4a3b      	ldr	r2, [pc, #236]	; (8002078 <HAL_RCC_ClockConfig+0x12c>)
 8001f8a:	6921      	ldr	r1, [r4, #16]
 8001f8c:	6893      	ldr	r3, [r2, #8]
 8001f8e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f92:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f96:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f98:	f7ff ffaa 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8001f9c:	4b36      	ldr	r3, [pc, #216]	; (8002078 <HAL_RCC_ClockConfig+0x12c>)
 8001f9e:	4a37      	ldr	r2, [pc, #220]	; (800207c <HAL_RCC_ClockConfig+0x130>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	40d8      	lsrs	r0, r3
 8001faa:	4b35      	ldr	r3, [pc, #212]	; (8002080 <HAL_RCC_ClockConfig+0x134>)
 8001fac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f7fe fb20 	bl	80005f4 <HAL_InitTick>
  return HAL_OK;
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	e7cf      	b.n	8001f58 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb8:	6813      	ldr	r3, [r2, #0]
 8001fba:	f023 030f 	bic.w	r3, r3, #15
 8001fbe:	430b      	orrs	r3, r1
 8001fc0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	6813      	ldr	r3, [r2, #0]
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	428b      	cmp	r3, r1
 8001fca:	d1c4      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xa>
 8001fcc:	e7cc      	b.n	8001f68 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fce:	f012 0f04 	tst.w	r2, #4
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <HAL_RCC_ClockConfig+0x12c>)
 8001fd4:	d003      	beq.n	8001fde <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd6:	6899      	ldr	r1, [r3, #8]
 8001fd8:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8001fdc:	6099      	str	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fde:	0716      	lsls	r6, r2, #28
 8001fe0:	d503      	bpl.n	8001fea <HAL_RCC_ClockConfig+0x9e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe2:	6899      	ldr	r1, [r3, #8]
 8001fe4:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8001fe8:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fea:	4923      	ldr	r1, [pc, #140]	; (8002078 <HAL_RCC_ClockConfig+0x12c>)
 8001fec:	68a0      	ldr	r0, [r4, #8]
 8001fee:	688b      	ldr	r3, [r1, #8]
 8001ff0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ff4:	4303      	orrs	r3, r0
 8001ff6:	608b      	str	r3, [r1, #8]
 8001ff8:	e7b9      	b.n	8001f6e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffa:	6861      	ldr	r1, [r4, #4]
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <HAL_RCC_ClockConfig+0x12c>)
 8001ffe:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002000:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	d11b      	bne.n	800203c <HAL_RCC_ClockConfig+0xf0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002004:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	d0a5      	beq.n	8001f56 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200a:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200c:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002010:	4f19      	ldr	r7, [pc, #100]	; (8002078 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002012:	f022 0203 	bic.w	r2, r2, #3
 8002016:	430a      	orrs	r2, r1
 8002018:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800201a:	f7fe fb27 	bl	800066c <HAL_GetTick>
 800201e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	6862      	ldr	r2, [r4, #4]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800202c:	d0a1      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202e:	f7fe fb1d 	bl	800066c <HAL_GetTick>
 8002032:	1b80      	subs	r0, r0, r6
 8002034:	4540      	cmp	r0, r8
 8002036:	d9f3      	bls.n	8002020 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8002038:	2003      	movs	r0, #3
 800203a:	e78d      	b.n	8001f58 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203c:	2902      	cmp	r1, #2
 800203e:	d102      	bne.n	8002046 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002040:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002044:	e7e0      	b.n	8002008 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002046:	f012 0f02 	tst.w	r2, #2
 800204a:	e7dd      	b.n	8002008 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204c:	6813      	ldr	r3, [r2, #0]
 800204e:	f023 030f 	bic.w	r3, r3, #15
 8002052:	432b      	orrs	r3, r5
 8002054:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	6813      	ldr	r3, [r2, #0]
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	42ab      	cmp	r3, r5
 800205e:	f47f af7a 	bne.w	8001f56 <HAL_RCC_ClockConfig+0xa>
 8002062:	e78c      	b.n	8001f7e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002064:	4904      	ldr	r1, [pc, #16]	; (8002078 <HAL_RCC_ClockConfig+0x12c>)
 8002066:	68e0      	ldr	r0, [r4, #12]
 8002068:	688b      	ldr	r3, [r1, #8]
 800206a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800206e:	4303      	orrs	r3, r0
 8002070:	608b      	str	r3, [r1, #8]
 8002072:	e787      	b.n	8001f84 <HAL_RCC_ClockConfig+0x38>
 8002074:	40023c00 	.word	0x40023c00
 8002078:	40023800 	.word	0x40023800
 800207c:	0800925e 	.word	0x0800925e
 8002080:	20000048 	.word	0x20000048

08002084 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002084:	6803      	ldr	r3, [r0, #0]
{
 8002086:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800208a:	f013 0601 	ands.w	r6, r3, #1
{
 800208e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002090:	d00b      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002092:	4ab3      	ldr	r2, [pc, #716]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002094:	6891      	ldr	r1, [r2, #8]
 8002096:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800209a:	6091      	str	r1, [r2, #8]
 800209c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800209e:	6891      	ldr	r1, [r2, #8]
 80020a0:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80020a2:	fab6 f686 	clz	r6, r6
 80020a6:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020a8:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020aa:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80020ae:	d012      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020b0:	49ab      	ldr	r1, [pc, #684]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80020b2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80020b4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020b8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020bc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80020c0:	bf08      	it	eq
 80020c2:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020c4:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020c8:	bf16      	itet	ne
 80020ca:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80020ce:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020d0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020d2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020d6:	02df      	lsls	r7, r3, #11
 80020d8:	d510      	bpl.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020da:	48a1      	ldr	r0, [pc, #644]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80020dc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80020de:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020e2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020e6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80020ea:	ea42 0201 	orr.w	r2, r2, r1
 80020ee:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020f2:	f000 81a7 	beq.w	8002444 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80020f6:	2900      	cmp	r1, #0
 80020f8:	bf08      	it	eq
 80020fa:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80020fc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002100:	bf18      	it	ne
 8002102:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002104:	0698      	lsls	r0, r3, #26
 8002106:	d531      	bpl.n	800216c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002108:	4b95      	ldr	r3, [pc, #596]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800210a:	4f96      	ldr	r7, [pc, #600]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800210c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800210e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002112:	641a      	str	r2, [r3, #64]	; 0x40
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002126:	f7fe faa1 	bl	800066c <HAL_GetTick>
 800212a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	05d9      	lsls	r1, r3, #23
 8002130:	f140 818a 	bpl.w	8002448 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002134:	4f8a      	ldr	r7, [pc, #552]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002136:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002138:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800213c:	f040 818f 	bne.w	800245e <HAL_RCCEx_PeriphCLKConfig+0x3da>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002140:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002142:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002146:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800214a:	4a85      	ldr	r2, [pc, #532]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800214c:	f040 81ad 	bne.w	80024aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002150:	6891      	ldr	r1, [r2, #8]
 8002152:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002156:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800215a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800215e:	4301      	orrs	r1, r0
 8002160:	6091      	str	r1, [r2, #8]
 8002162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002166:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002168:	430b      	orrs	r3, r1
 800216a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	06df      	lsls	r7, r3, #27
 8002170:	d50c      	bpl.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002172:	4a7b      	ldr	r2, [pc, #492]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002174:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002178:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800217c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002180:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002184:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002186:	4301      	orrs	r1, r0
 8002188:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800218c:	0458      	lsls	r0, r3, #17
 800218e:	d508      	bpl.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002190:	4973      	ldr	r1, [pc, #460]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002192:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002194:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002198:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800219c:	4302      	orrs	r2, r0
 800219e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021a2:	0419      	lsls	r1, r3, #16
 80021a4:	d508      	bpl.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021a6:	496e      	ldr	r1, [pc, #440]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80021a8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80021aa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021ae:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80021b2:	4302      	orrs	r2, r0
 80021b4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b8:	03da      	lsls	r2, r3, #15
 80021ba:	d508      	bpl.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021bc:	4968      	ldr	r1, [pc, #416]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80021be:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80021c0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021c4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80021c8:	4302      	orrs	r2, r0
 80021ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021ce:	039f      	lsls	r7, r3, #14
 80021d0:	d508      	bpl.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021d2:	4963      	ldr	r1, [pc, #396]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80021d4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80021d6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021da:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80021de:	4302      	orrs	r2, r0
 80021e0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e4:	0658      	lsls	r0, r3, #25
 80021e6:	d508      	bpl.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e8:	495d      	ldr	r1, [pc, #372]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80021ea:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80021ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021f0:	f022 0203 	bic.w	r2, r2, #3
 80021f4:	4302      	orrs	r2, r0
 80021f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021fa:	0619      	lsls	r1, r3, #24
 80021fc:	d508      	bpl.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021fe:	4958      	ldr	r1, [pc, #352]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002200:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002202:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002206:	f022 020c 	bic.w	r2, r2, #12
 800220a:	4302      	orrs	r2, r0
 800220c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002210:	05da      	lsls	r2, r3, #23
 8002212:	d508      	bpl.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002214:	4952      	ldr	r1, [pc, #328]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002216:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002218:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800221c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002220:	4302      	orrs	r2, r0
 8002222:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002226:	059f      	lsls	r7, r3, #22
 8002228:	d508      	bpl.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800222a:	494d      	ldr	r1, [pc, #308]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800222c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800222e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002232:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002236:	4302      	orrs	r2, r0
 8002238:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800223c:	0558      	lsls	r0, r3, #21
 800223e:	d508      	bpl.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002240:	4947      	ldr	r1, [pc, #284]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002242:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002244:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002248:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800224c:	4302      	orrs	r2, r0
 800224e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002252:	0519      	lsls	r1, r3, #20
 8002254:	d508      	bpl.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002256:	4942      	ldr	r1, [pc, #264]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800225a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800225e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002262:	4302      	orrs	r2, r0
 8002264:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002268:	04da      	lsls	r2, r3, #19
 800226a:	d508      	bpl.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800226c:	493c      	ldr	r1, [pc, #240]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800226e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002270:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002274:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002278:	4302      	orrs	r2, r0
 800227a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800227e:	049f      	lsls	r7, r3, #18
 8002280:	d508      	bpl.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002282:	4937      	ldr	r1, [pc, #220]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002284:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002286:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800228a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800228e:	4302      	orrs	r2, r0
 8002290:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002294:	0258      	lsls	r0, r3, #9
 8002296:	d508      	bpl.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002298:	4931      	ldr	r1, [pc, #196]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800229a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800229c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80022a0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80022a4:	4302      	orrs	r2, r0
 80022a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022aa:	0299      	lsls	r1, r3, #10
 80022ac:	d50c      	bpl.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022ae:	482c      	ldr	r0, [pc, #176]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80022b0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80022b2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80022b6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022ba:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80022be:	bf08      	it	eq
 80022c0:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022c2:	430a      	orrs	r2, r1
 80022c4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80022c8:	f013 0f08 	tst.w	r3, #8
 80022cc:	bf18      	it	ne
 80022ce:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022d0:	035a      	lsls	r2, r3, #13
 80022d2:	d508      	bpl.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022d4:	4922      	ldr	r1, [pc, #136]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80022d6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80022d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80022dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022e0:	4302      	orrs	r2, r0
 80022e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022e6:	021f      	lsls	r7, r3, #8
 80022e8:	d509      	bpl.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022ea:	491d      	ldr	r1, [pc, #116]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80022ec:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80022f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80022f4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80022f8:	4302      	orrs	r2, r0
 80022fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80022fe:	0158      	lsls	r0, r3, #5
 8002300:	d509      	bpl.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002302:	4917      	ldr	r1, [pc, #92]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002304:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8002308:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800230c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002310:	4302      	orrs	r2, r0
 8002312:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002316:	0119      	lsls	r1, r3, #4
 8002318:	d509      	bpl.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800231a:	4911      	ldr	r1, [pc, #68]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800231c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8002320:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002324:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002328:	4302      	orrs	r2, r0
 800232a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800232e:	00da      	lsls	r2, r3, #3
 8002330:	f140 813d 	bpl.w	80025ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002336:	2e01      	cmp	r6, #1
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002338:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800233c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002340:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002344:	ea43 0301 	orr.w	r3, r3, r1
 8002348:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800234c:	f000 80b1 	beq.w	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002350:	2d01      	cmp	r5, #1
 8002352:	d175      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002354:	4d02      	ldr	r5, [pc, #8]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002356:	682b      	ldr	r3, [r5, #0]
 8002358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235c:	e004      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40007000 	.word	0x40007000
 8002368:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800236a:	f7fe f97f 	bl	800066c <HAL_GetTick>
 800236e:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	009f      	lsls	r7, r3, #2
 8002374:	f100 8128 	bmi.w	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x544>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002378:	6822      	ldr	r2, [r4, #0]
 800237a:	0316      	lsls	r6, r2, #12
 800237c:	d501      	bpl.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800237e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002380:	b11b      	cbz	r3, 800238a <HAL_RCCEx_PeriphCLKConfig+0x306>
 8002382:	02d0      	lsls	r0, r2, #11
 8002384:	d51c      	bpl.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002388:	b9d3      	cbnz	r3, 80023c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800238a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800238e:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002392:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002396:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800239a:	430b      	orrs	r3, r1
 800239c:	6961      	ldr	r1, [r4, #20]
 800239e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80023a2:	69a1      	ldr	r1, [r4, #24]
 80023a4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80023a8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023ac:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80023b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80023b2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80023b6:	3901      	subs	r1, #1
 80023b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023bc:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80023c0:	0291      	lsls	r1, r2, #10
 80023c2:	d515      	bpl.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80023c4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80023c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ca:	d111      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023cc:	4985      	ldr	r1, [pc, #532]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80023ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023d2:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80023d6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80023da:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80023de:	4303      	orrs	r3, r0
 80023e0:	6960      	ldr	r0, [r4, #20]
 80023e2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80023e6:	6a20      	ldr	r0, [r4, #32]
 80023e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80023ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80023f0:	0712      	lsls	r2, r2, #28
 80023f2:	d519      	bpl.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023f4:	4a7b      	ldr	r2, [pc, #492]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80023f6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80023fe:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002402:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002406:	430b      	orrs	r3, r1
 8002408:	6961      	ldr	r1, [r4, #20]
 800240a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800240e:	69e1      	ldr	r1, [r4, #28]
 8002410:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002418:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800241c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800241e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002422:	430b      	orrs	r3, r1
 8002424:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002428:	4c6e      	ldr	r4, [pc, #440]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002430:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002432:	f7fe f91b 	bl	800066c <HAL_GetTick>
 8002436:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	f140 80cb 	bpl.w	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x552>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002440:	2000      	movs	r0, #0
 8002442:	e009      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      plli2sused = 1;
 8002444:	2601      	movs	r6, #1
 8002446:	e659      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002448:	f7fe f910 	bl	800066c <HAL_GetTick>
 800244c:	eba0 0008 	sub.w	r0, r0, r8
 8002450:	2864      	cmp	r0, #100	; 0x64
 8002452:	f67f ae6b 	bls.w	800212c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002456:	2003      	movs	r0, #3
}
 8002458:	b003      	add	sp, #12
 800245a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800245e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002460:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002464:	429a      	cmp	r2, r3
 8002466:	f43f ae6b 	beq.w	8002140 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800246a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800246c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800246e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002472:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002476:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002478:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800247a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800247e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002480:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002484:	07da      	lsls	r2, r3, #31
 8002486:	f57f ae5b 	bpl.w	8002140 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800248a:	f7fe f8ef 	bl	800066c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002492:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002496:	079b      	lsls	r3, r3, #30
 8002498:	f53f ae52 	bmi.w	8002140 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249c:	f7fe f8e6 	bl	800066c <HAL_GetTick>
 80024a0:	eba0 0008 	sub.w	r0, r0, r8
 80024a4:	4548      	cmp	r0, r9
 80024a6:	d9f5      	bls.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80024a8:	e7d5      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024aa:	6891      	ldr	r1, [r2, #8]
 80024ac:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80024b0:	e656      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80024b2:	4e4c      	ldr	r6, [pc, #304]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80024b4:	6833      	ldr	r3, [r6, #0]
 80024b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024ba:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80024bc:	f7fe f8d6 	bl	800066c <HAL_GetTick>
 80024c0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024c2:	6833      	ldr	r3, [r6, #0]
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	d478      	bmi.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024c8:	6822      	ldr	r2, [r4, #0]
 80024ca:	07d7      	lsls	r7, r2, #31
 80024cc:	d512      	bpl.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80024ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024d0:	b983      	cbnz	r3, 80024f4 <HAL_RCCEx_PeriphCLKConfig+0x470>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024d2:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024d6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024de:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80024e2:	430b      	orrs	r3, r1
 80024e4:	6861      	ldr	r1, [r4, #4]
 80024e6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80024ea:	68a1      	ldr	r1, [r4, #8]
 80024ec:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80024f0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024f4:	0316      	lsls	r6, r2, #12
 80024f6:	d503      	bpl.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80024f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024fe:	d005      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002500:	02d0      	lsls	r0, r2, #11
 8002502:	d51e      	bpl.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x4be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002504:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250a:	d11a      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800250c:	4935      	ldr	r1, [pc, #212]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800250e:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002512:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800251a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800251e:	4303      	orrs	r3, r0
 8002520:	6860      	ldr	r0, [r4, #4]
 8002522:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002526:	68e0      	ldr	r0, [r4, #12]
 8002528:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800252c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002530:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002536:	f020 001f 	bic.w	r0, r0, #31
 800253a:	3b01      	subs	r3, #1
 800253c:	4303      	orrs	r3, r0
 800253e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002542:	01d1      	lsls	r1, r2, #7
 8002544:	d511      	bpl.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002546:	4927      	ldr	r1, [pc, #156]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002548:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800254c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002550:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002554:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002558:	4303      	orrs	r3, r0
 800255a:	6860      	ldr	r0, [r4, #4]
 800255c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002560:	6920      	ldr	r0, [r4, #16]
 8002562:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002566:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800256a:	0192      	lsls	r2, r2, #6
 800256c:	d50d      	bpl.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x506>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800256e:	6923      	ldr	r3, [r4, #16]
 8002570:	6862      	ldr	r2, [r4, #4]
 8002572:	041b      	lsls	r3, r3, #16
 8002574:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002578:	68e2      	ldr	r2, [r4, #12]
 800257a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800257e:	68a2      	ldr	r2, [r4, #8]
 8002580:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002584:	4a17      	ldr	r2, [pc, #92]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002586:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800258a:	4e16      	ldr	r6, [pc, #88]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800258c:	6833      	ldr	r3, [r6, #0]
 800258e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002592:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002594:	f7fe f86a 	bl	800066c <HAL_GetTick>
 8002598:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800259a:	6833      	ldr	r3, [r6, #0]
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	f53f aed7 	bmi.w	8002350 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025a2:	f7fe f863 	bl	800066c <HAL_GetTick>
 80025a6:	1bc0      	subs	r0, r0, r7
 80025a8:	2864      	cmp	r0, #100	; 0x64
 80025aa:	d9f6      	bls.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x516>
 80025ac:	e753      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80025ae:	2e01      	cmp	r6, #1
 80025b0:	f43f af7f 	beq.w	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80025b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025b8:	e6c8      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025ba:	f7fe f857 	bl	800066c <HAL_GetTick>
 80025be:	1bc0      	subs	r0, r0, r7
 80025c0:	2864      	cmp	r0, #100	; 0x64
 80025c2:	f67f af7e 	bls.w	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80025c6:	e746      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025c8:	f7fe f850 	bl	800066c <HAL_GetTick>
 80025cc:	1b80      	subs	r0, r0, r6
 80025ce:	2864      	cmp	r0, #100	; 0x64
 80025d0:	f67f aece 	bls.w	8002370 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 80025d4:	e73f      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025d6:	f7fe f849 	bl	800066c <HAL_GetTick>
 80025da:	1b40      	subs	r0, r0, r5
 80025dc:	2864      	cmp	r0, #100	; 0x64
 80025de:	f67f af2b 	bls.w	8002438 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80025e2:	e738      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80025e4:	40023800 	.word	0x40023800

080025e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80025e8:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80025ec:	d131      	bne.n	8002652 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80025ee:	4b35      	ldr	r3, [pc, #212]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80025f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80025f4:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 80025f8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80025fc:	d05f      	beq.n	80026be <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80025fe:	d806      	bhi.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8002600:	2a00      	cmp	r2, #0
 8002602:	d039      	beq.n	8002678 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8002604:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8002608:	d051      	beq.n	80026ae <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    default :
      {
        break;
      }
    }
  }
 800260a:	2000      	movs	r0, #0
 800260c:	4770      	bx	lr
    switch (saiclocksource)
 800260e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
    switch (saiclocksource)
 8002612:	d1fa      	bne.n	800260a <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002614:	685b      	ldr	r3, [r3, #4]
          frequency = HSI_VALUE;
 8002616:	482c      	ldr	r0, [pc, #176]	; (80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002618:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800261c:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 800261e:	bf08      	it	eq
 8002620:	4618      	moveq	r0, r3
 8002622:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002624:	4828      	ldr	r0, [pc, #160]	; (80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002626:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002628:	fbb0 f3f3 	udiv	r3, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800262c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8002630:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8002634:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002638:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800263a:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800263e:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8002642:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 800264c:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002650:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8002652:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8002656:	d1d8      	bne.n	800260a <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    saiclocksource = RCC->DCKCFGR1;
 8002658:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800265a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800265e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8002662:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002666:	d02a      	beq.n	80026be <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002668:	d803      	bhi.n	8002672 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 800266a:	b12a      	cbz	r2, 8002678 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 800266c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002670:	e7ca      	b.n	8002608 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
 8002672:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8002676:	e7cc      	b.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002678:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800267a:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800267c:	0251      	lsls	r1, r2, #9
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800267e:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002684:	bf54      	ite	pl
 8002686:	4811      	ldrpl	r0, [pc, #68]	; (80026cc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002688:	480f      	ldrmi	r0, [pc, #60]	; (80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800268a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800268e:	fbb0 f3f3 	udiv	r3, r0, r3
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8002692:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8002696:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800269a:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800269c:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80026a0:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80026a4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80026a8:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80026ac:	e7cd      	b.n	800264a <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80026ae:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80026b0:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80026b2:	0252      	lsls	r2, r2, #9
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80026b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80026b8:	d4b4      	bmi.n	8002624 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80026ba:	4804      	ldr	r0, [pc, #16]	; (80026cc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 80026bc:	e7b3      	b.n	8002626 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
        frequency = EXTERNAL_CLOCK_VALUE;
 80026be:	4804      	ldr	r0, [pc, #16]	; (80026d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)

  return frequency;
}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	017d7840 	.word	0x017d7840
 80026cc:	00f42400 	.word	0x00f42400
 80026d0:	01770000 	.word	0x01770000

080026d4 <SAI_InterruptFlag>:
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if(mode == SAI_MODE_IT)
  {
    tmpIT|= SAI_IT_FREQ;
 80026d4:	2901      	cmp	r1, #1
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80026d6:	6b01      	ldr	r1, [r0, #48]	; 0x30
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80026d8:	6842      	ldr	r2, [r0, #4]
    tmpIT|= SAI_IT_FREQ;
 80026da:	bf14      	ite	ne
 80026dc:	2301      	movne	r3, #1
 80026de:	2309      	moveq	r3, #9
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80026e0:	2908      	cmp	r1, #8
 80026e2:	d105      	bne.n	80026f0 <SAI_InterruptFlag+0x1c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80026e4:	f022 0102 	bic.w	r1, r2, #2
 80026e8:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_CNRDY;
 80026ea:	bf08      	it	eq
 80026ec:	f043 0310 	orreq.w	r3, r3, #16
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80026f0:	3a02      	subs	r2, #2
 80026f2:	2a01      	cmp	r2, #1
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80026f4:	bf94      	ite	ls
 80026f6:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 80026fa:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 80026fe:	4770      	bx	lr

08002700 <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <SAI_Disable.isra.0+0x34>)
 8002702:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800270c:	6802      	ldr	r2, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800270e:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8002710:	6811      	ldr	r1, [r2, #0]
 8002712:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002716:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8002718:	3b01      	subs	r3, #1
 800271a:	d206      	bcs.n	800272a <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800271c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8002720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002724:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
      break;
 8002728:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800272a:	6811      	ldr	r1, [r2, #0]
 800272c:	03c9      	lsls	r1, r1, #15
 800272e:	d4f3      	bmi.n	8002718 <SAI_Disable.isra.0+0x18>

  return status;
}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000048 	.word	0x20000048

08002738 <HAL_SAI_Init>:
{
 8002738:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 800273a:	4604      	mov	r4, r0
 800273c:	2800      	cmp	r0, #0
 800273e:	f000 80c6 	beq.w	80028ce <HAL_SAI_Init+0x196>
  if(hsai->State == HAL_SAI_STATE_RESET)
 8002742:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8002746:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800274a:	b91b      	cbnz	r3, 8002754 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 800274c:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8002750:	f002 fdb4 	bl	80052bc <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8002754:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8002756:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8002758:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 800275c:	f7ff ffd0 	bl	8002700 <SAI_Disable.isra.0>
  switch(hsai->Init.SynchroExt)
 8002760:	68e3      	ldr	r3, [r4, #12]
 8002762:	2b01      	cmp	r3, #1
 8002764:	f000 80a1 	beq.w	80028aa <HAL_SAI_Init+0x172>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8002768:	2b02      	cmp	r3, #2
 800276a:	bf14      	ite	ne
 800276c:	2300      	movne	r3, #0
 800276e:	2320      	moveq	r3, #32
  switch(hsai->Init.Synchro)
 8002770:	68a2      	ldr	r2, [r4, #8]
 8002772:	2a02      	cmp	r2, #2
 8002774:	f000 809d 	beq.w	80028b2 <HAL_SAI_Init+0x17a>
 8002778:	2a03      	cmp	r2, #3
 800277a:	f000 8098 	beq.w	80028ae <HAL_SAI_Init+0x176>
 800277e:	2a01      	cmp	r2, #1
 8002780:	bf14      	ite	ne
 8002782:	2500      	movne	r5, #0
 8002784:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8002788:	6822      	ldr	r2, [r4, #0]
 800278a:	4952      	ldr	r1, [pc, #328]	; (80028d4 <HAL_SAI_Init+0x19c>)
 800278c:	4852      	ldr	r0, [pc, #328]	; (80028d8 <HAL_SAI_Init+0x1a0>)
 800278e:	428a      	cmp	r2, r1
 8002790:	d003      	beq.n	800279a <HAL_SAI_Init+0x62>
 8002792:	4e52      	ldr	r6, [pc, #328]	; (80028dc <HAL_SAI_Init+0x1a4>)
 8002794:	42b2      	cmp	r2, r6
 8002796:	f040 808f 	bne.w	80028b8 <HAL_SAI_Init+0x180>
    SAI1->GCR = tmpregisterGCR;
 800279a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800279e:	69e3      	ldr	r3, [r4, #28]
 80027a0:	b313      	cbz	r3, 80027e8 <HAL_SAI_Init+0xb0>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80027a2:	428a      	cmp	r2, r1
 80027a4:	d003      	beq.n	80027ae <HAL_SAI_Init+0x76>
 80027a6:	4b4d      	ldr	r3, [pc, #308]	; (80028dc <HAL_SAI_Init+0x1a4>)
 80027a8:	429a      	cmp	r2, r3
 80027aa:	f040 8088 	bne.w	80028be <HAL_SAI_Init+0x186>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80027ae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80027b2:	f7ff ff19 	bl	80025e8 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	4a49      	ldr	r2, [pc, #292]	; (80028e0 <HAL_SAI_Init+0x1a8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d002      	beq.n	80027c4 <HAL_SAI_Init+0x8c>
 80027be:	3220      	adds	r2, #32
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d103      	bne.n	80027cc <HAL_SAI_Init+0x94>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80027c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80027c8:	f7ff ff0e 	bl	80025e8 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80027cc:	220a      	movs	r2, #10
 80027ce:	69e3      	ldr	r3, [r4, #28]
 80027d0:	4350      	muls	r0, r2
 80027d2:	025b      	lsls	r3, r3, #9
 80027d4:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 80027d8:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 80027dc:	fb02 0013 	mls	r0, r2, r3, r0
 80027e0:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 80027e2:	bf08      	it	eq
 80027e4:	3301      	addeq	r3, #1
 80027e6:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80027e8:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80027ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80027ec:	f033 0102 	bics.w	r1, r3, #2
 80027f0:	d167      	bne.n	80028c2 <HAL_SAI_Init+0x18a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80027f2:	2a01      	cmp	r2, #1
 80027f4:	bf18      	it	ne
 80027f6:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80027fa:	6822      	ldr	r2, [r4, #0]
 80027fc:	4839      	ldr	r0, [pc, #228]	; (80028e4 <HAL_SAI_Init+0x1ac>)
 80027fe:	6816      	ldr	r6, [r2, #0]
 8002800:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002802:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8002804:	4333      	orrs	r3, r6
 8002806:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002808:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800280a:	4333      	orrs	r3, r6
 800280c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800280e:	6810      	ldr	r0, [r2, #0]
 8002810:	4333      	orrs	r3, r6
 8002812:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002814:	4333      	orrs	r3, r6
 8002816:	6926      	ldr	r6, [r4, #16]
 8002818:	4333      	orrs	r3, r6
 800281a:	6966      	ldr	r6, [r4, #20]
 800281c:	4333      	orrs	r3, r6
 800281e:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8002820:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002822:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002826:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002828:	432b      	orrs	r3, r5
 800282a:	430b      	orrs	r3, r1
 800282c:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800282e:	6853      	ldr	r3, [r2, #4]
 8002830:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002834:	f023 030f 	bic.w	r3, r3, #15
 8002838:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800283a:	69a3      	ldr	r3, [r4, #24]
 800283c:	6851      	ldr	r1, [r2, #4]
 800283e:	4303      	orrs	r3, r0
 8002840:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002842:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002844:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002846:	430b      	orrs	r3, r1
 8002848:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800284a:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <HAL_SAI_Init+0x1b0>)
 800284c:	6891      	ldr	r1, [r2, #8]
 800284e:	400b      	ands	r3, r1
 8002850:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002852:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002854:	6891      	ldr	r1, [r2, #8]
 8002856:	4303      	orrs	r3, r0
 8002858:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800285a:	4303      	orrs	r3, r0
 800285c:	430b      	orrs	r3, r1
 800285e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002860:	3901      	subs	r1, #1
 8002862:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8002864:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002866:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002868:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800286c:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800286e:	68d3      	ldr	r3, [r2, #12]
 8002870:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8002874:	f023 030f 	bic.w	r3, r3, #15
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	0c1b      	lsrs	r3, r3, #16
 800287c:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800287e:	68d1      	ldr	r1, [r2, #12]
 8002880:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
 8002884:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002886:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8002888:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800288a:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800288c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8002890:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002892:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8002894:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002898:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 800289a:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800289c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 80028a0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 80028a4:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 80028a8:	bd70      	pop	{r4, r5, r6, pc}
  switch(hsai->Init.SynchroExt)
 80028aa:	2310      	movs	r3, #16
 80028ac:	e760      	b.n	8002770 <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80028ae:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80028b2:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80028b6:	e767      	b.n	8002788 <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 80028b8:	f8c0 3c00 	str.w	r3, [r0, #3072]	; 0xc00
 80028bc:	e76f      	b.n	800279e <HAL_SAI_Init+0x66>
    uint32_t freq = 0;
 80028be:	2000      	movs	r0, #0
 80028c0:	e779      	b.n	80027b6 <HAL_SAI_Init+0x7e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80028c2:	2a01      	cmp	r2, #1
 80028c4:	bf14      	ite	ne
 80028c6:	2100      	movne	r1, #0
 80028c8:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80028cc:	e795      	b.n	80027fa <HAL_SAI_Init+0xc2>
    return HAL_ERROR;
 80028ce:	2001      	movs	r0, #1
 80028d0:	e7ea      	b.n	80028a8 <HAL_SAI_Init+0x170>
 80028d2:	bf00      	nop
 80028d4:	40015804 	.word	0x40015804
 80028d8:	40015000 	.word	0x40015000
 80028dc:	40015824 	.word	0x40015824
 80028e0:	40015c04 	.word	0x40015c04
 80028e4:	ff05c010 	.word	0xff05c010
 80028e8:	fff88000 	.word	0xfff88000

080028ec <HAL_SAI_InitProtocol>:
  switch(protocol)
 80028ec:	2902      	cmp	r1, #2
{
 80028ee:	b430      	push	{r4, r5}
  switch(protocol)
 80028f0:	d905      	bls.n	80028fe <HAL_SAI_InitProtocol+0x12>
 80028f2:	1ecc      	subs	r4, r1, #3
 80028f4:	2c01      	cmp	r4, #1
 80028f6:	d95b      	bls.n	80029b0 <HAL_SAI_InitProtocol+0xc4>
}
 80028f8:	2001      	movs	r0, #1
 80028fa:	bc30      	pop	{r4, r5}
 80028fc:	4770      	bx	lr
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80028fe:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8002900:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 8002902:	65c3      	str	r3, [r0, #92]	; 0x5c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002904:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8002908:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800290a:	6384      	str	r4, [r0, #56]	; 0x38
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800290c:	bf14      	ite	ne
 800290e:	2501      	movne	r5, #1
 8002910:	4625      	moveq	r5, r4
  hsai->SlotInit.FirstBitOffset  = 0;
 8002912:	6544      	str	r4, [r0, #84]	; 0x54
  if((nbslot & 0x1) != 0 )
 8002914:	f013 0401 	ands.w	r4, r3, #1
 8002918:	63c5      	str	r5, [r0, #60]	; 0x3c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800291a:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800291e:	6485      	str	r5, [r0, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8002920:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002924:	6605      	str	r5, [r0, #96]	; 0x60
  if((nbslot & 0x1) != 0 )
 8002926:	d1e7      	bne.n	80028f8 <HAL_SAI_InitProtocol+0xc>
  switch(protocol)
 8002928:	1e4d      	subs	r5, r1, #1
 800292a:	2d01      	cmp	r5, #1
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800292c:	bf93      	iteet	ls
 800292e:	f44f 3500 	movls.w	r5, #131072	; 0x20000
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002932:	64c4      	strhi	r4, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8002934:	f44f 2480 	movhi.w	r4, #262144	; 0x40000
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8002938:	64c5      	strls	r5, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800293a:	6504      	str	r4, [r0, #80]	; 0x50
  switch(datasize)
 800293c:	2a03      	cmp	r2, #3
 800293e:	d8db      	bhi.n	80028f8 <HAL_SAI_InitProtocol+0xc>
 8002940:	e8df f002 	tbb	[pc, r2]
 8002944:	2d1d0c02 	.word	0x2d1d0c02
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002948:	2280      	movs	r2, #128	; 0x80
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 800294a:	085b      	lsrs	r3, r3, #1
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800294c:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 800294e:	015a      	lsls	r2, r3, #5
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 8002950:	011b      	lsls	r3, r3, #4
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 8002952:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 8002954:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8002956:	2340      	movs	r3, #64	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002958:	6583      	str	r3, [r0, #88]	; 0x58
  if(status == HAL_OK)
 800295a:	e00d      	b.n	8002978 <HAL_SAI_InitProtocol+0x8c>
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800295c:	085b      	lsrs	r3, r3, #1
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800295e:	2280      	movs	r2, #128	; 0x80
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 8002960:	2902      	cmp	r1, #2
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002962:	ea4f 1483 	mov.w	r4, r3, lsl #6
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002966:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002968:	ea4f 1343 	mov.w	r3, r3, lsl #5
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800296c:	6582      	str	r2, [r0, #88]	; 0x58
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800296e:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002970:	6443      	str	r3, [r0, #68]	; 0x44
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 8002972:	d101      	bne.n	8002978 <HAL_SAI_InitProtocol+0x8c>
      hsai->SlotInit.FirstBitOffset = 16;
 8002974:	2310      	movs	r3, #16
      hsai->SlotInit.FirstBitOffset = 8;
 8002976:	6543      	str	r3, [r0, #84]	; 0x54
}
 8002978:	bc30      	pop	{r4, r5}
    status = HAL_SAI_Init(hsai);
 800297a:	f7ff bedd 	b.w	8002738 <HAL_SAI_Init>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 800297e:	22c0      	movs	r2, #192	; 0xc0
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002980:	085b      	lsrs	r3, r3, #1
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 8002982:	2902      	cmp	r1, #2
    hsai->Init.DataSize = SAI_DATASIZE_24;
 8002984:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002986:	ea4f 1283 	mov.w	r2, r3, lsl #6
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 800298a:	ea4f 1343 	mov.w	r3, r3, lsl #5
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800298e:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002990:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002992:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002996:	6583      	str	r3, [r0, #88]	; 0x58
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 8002998:	d1ee      	bne.n	8002978 <HAL_SAI_InitProtocol+0x8c>
      hsai->SlotInit.FirstBitOffset = 8;
 800299a:	2308      	movs	r3, #8
 800299c:	e7eb      	b.n	8002976 <HAL_SAI_InitProtocol+0x8a>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 800299e:	22e0      	movs	r2, #224	; 0xe0
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80029a0:	085b      	lsrs	r3, r3, #1
    hsai->Init.DataSize = SAI_DATASIZE_32;
 80029a2:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80029a4:	019a      	lsls	r2, r3, #6
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80029a6:	015b      	lsls	r3, r3, #5
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80029a8:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80029aa:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	e7d3      	b.n	8002958 <HAL_SAI_InitProtocol+0x6c>
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80029b0:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80029b2:	2400      	movs	r4, #0
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80029b4:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
  hsai->SlotInit.SlotNumber      = nbslot;
 80029b8:	65c3      	str	r3, [r0, #92]	; 0x5c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80029ba:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80029be:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80029c0:	6384      	str	r4, [r0, #56]	; 0x38
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80029c2:	bf14      	ite	ne
 80029c4:	4625      	movne	r5, r4
 80029c6:	2501      	moveq	r5, #1
    hsai->FrameInit.ActiveFrameLength = 13;
 80029c8:	2904      	cmp	r1, #4
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80029ca:	6484      	str	r4, [r0, #72]	; 0x48
 80029cc:	63c5      	str	r5, [r0, #60]	; 0x3c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80029ce:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    hsai->FrameInit.ActiveFrameLength = 13;
 80029d2:	bf0c      	ite	eq
 80029d4:	2101      	moveq	r1, #1
 80029d6:	210d      	movne	r1, #13
  hsai->SlotInit.FirstBitOffset  = 0;
 80029d8:	6544      	str	r4, [r0, #84]	; 0x54
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80029da:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80029de:	6441      	str	r1, [r0, #68]	; 0x44
 80029e0:	6604      	str	r4, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80029e2:	e9c0 c513 	strd	ip, r5, [r0, #76]	; 0x4c
  switch(datasize)
 80029e6:	2a03      	cmp	r2, #3
 80029e8:	d886      	bhi.n	80028f8 <HAL_SAI_InitProtocol+0xc>
 80029ea:	e8df f002 	tbb	[pc, r2]
 80029ee:	0702      	.short	0x0702
 80029f0:	120d      	.short	0x120d
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80029f2:	2280      	movs	r2, #128	; 0x80
    hsai->FrameInit.FrameLength = 16 * nbslot;
 80029f4:	011b      	lsls	r3, r3, #4
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80029f6:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 16 * nbslot;
 80029f8:	6403      	str	r3, [r0, #64]	; 0x40
 80029fa:	e7ac      	b.n	8002956 <HAL_SAI_InitProtocol+0x6a>
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80029fc:	2280      	movs	r2, #128	; 0x80
    hsai->FrameInit.FrameLength = 32 * nbslot;
 80029fe:	015b      	lsls	r3, r3, #5
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002a00:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8002a02:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002a04:	6582      	str	r2, [r0, #88]	; 0x58
  if(status == HAL_OK)
 8002a06:	e7b7      	b.n	8002978 <HAL_SAI_InitProtocol+0x8c>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 8002a08:	22c0      	movs	r2, #192	; 0xc0
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8002a0a:	015b      	lsls	r3, r3, #5
    hsai->Init.DataSize = SAI_DATASIZE_32;
 8002a0c:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8002a0e:	6403      	str	r3, [r0, #64]	; 0x40
 8002a10:	e7cc      	b.n	80029ac <HAL_SAI_InitProtocol+0xc0>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 8002a12:	22e0      	movs	r2, #224	; 0xe0
 8002a14:	e7f9      	b.n	8002a0a <HAL_SAI_InitProtocol+0x11e>
	...

08002a18 <HAL_SAI_Transmit_DMA>:
{
 8002a18:	b570      	push	{r4, r5, r6, lr}
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
 8002a1e:	2900      	cmp	r1, #0
 8002a20:	d03f      	beq.n	8002aa2 <HAL_SAI_Transmit_DMA+0x8a>
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d03d      	beq.n	8002aa2 <HAL_SAI_Transmit_DMA+0x8a>
  if(hsai->State == HAL_SAI_STATE_READY)
 8002a26:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
 8002a2a:	2801      	cmp	r0, #1
 8002a2c:	b2c5      	uxtb	r5, r0
 8002a2e:	d13a      	bne.n	8002aa6 <HAL_SAI_Transmit_DMA+0x8e>
    __HAL_LOCK(hsai);
 8002a30:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
 8002a34:	2801      	cmp	r0, #1
 8002a36:	d036      	beq.n	8002aa6 <HAL_SAI_Transmit_DMA+0x8e>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002a38:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8002a3a:	2212      	movs	r2, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8002a3c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002a3e:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8002a42:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8002a46:	4a19      	ldr	r2, [pc, #100]	; (8002aac <HAL_SAI_Transmit_DMA+0x94>)
    __HAL_LOCK(hsai);
 8002a48:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 8002a4c:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 8002a4e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 8002a52:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8002a56:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8002a58:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <HAL_SAI_Transmit_DMA+0x98>)
 8002a5a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8002a5c:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <HAL_SAI_Transmit_DMA+0x9c>)
    hsai->hdmatx->XferAbortCallback = NULL;
 8002a5e:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8002a62:	6822      	ldr	r2, [r4, #0]
 8002a64:	321c      	adds	r2, #28
 8002a66:	f7fd ff15 	bl	8000894 <HAL_DMA_Start_IT>
 8002a6a:	b118      	cbz	r0, 8002a74 <HAL_SAI_Transmit_DMA+0x5c>
      __HAL_UNLOCK(hsai);
 8002a6c:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
 8002a70:	4628      	mov	r0, r5
 8002a72:	bd70      	pop	{r4, r5, r6, pc}
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8002a74:	6825      	ldr	r5, [r4, #0]
 8002a76:	682b      	ldr	r3, [r5, #0]
 8002a78:	03db      	lsls	r3, r3, #15
 8002a7a:	d403      	bmi.n	8002a84 <HAL_SAI_Transmit_DMA+0x6c>
      __HAL_SAI_ENABLE(hsai);
 8002a7c:	682b      	ldr	r3, [r5, #0]
 8002a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a82:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002a84:	2100      	movs	r1, #0
 8002a86:	4620      	mov	r0, r4
 8002a88:	f7ff fe24 	bl	80026d4 <SAI_InterruptFlag>
 8002a8c:	692b      	ldr	r3, [r5, #16]
 8002a8e:	4318      	orrs	r0, r3
 8002a90:	6128      	str	r0, [r5, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8002a92:	682b      	ldr	r3, [r5, #0]
 8002a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a98:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
 8002a9a:	2500      	movs	r5, #0
 8002a9c:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
 8002aa0:	e7e6      	b.n	8002a70 <HAL_SAI_Transmit_DMA+0x58>
    return  HAL_ERROR;
 8002aa2:	2501      	movs	r5, #1
 8002aa4:	e7e4      	b.n	8002a70 <HAL_SAI_Transmit_DMA+0x58>
    return HAL_BUSY;
 8002aa6:	2502      	movs	r5, #2
 8002aa8:	e7e2      	b.n	8002a70 <HAL_SAI_Transmit_DMA+0x58>
 8002aaa:	bf00      	nop
 8002aac:	08002b91 	.word	0x08002b91
 8002ab0:	08002b59 	.word	0x08002b59
 8002ab4:	08002bdf 	.word	0x08002bdf

08002ab8 <HAL_SAI_Receive_DMA>:
{
 8002ab8:	4613      	mov	r3, r2
  if((pData == NULL) || (Size == 0))
 8002aba:	460a      	mov	r2, r1
{
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
 8002ac0:	2900      	cmp	r1, #0
 8002ac2:	d03f      	beq.n	8002b44 <HAL_SAI_Receive_DMA+0x8c>
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d03d      	beq.n	8002b44 <HAL_SAI_Receive_DMA+0x8c>
  if(hsai->State == HAL_SAI_STATE_READY)
 8002ac8:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
 8002acc:	2901      	cmp	r1, #1
 8002ace:	b2cd      	uxtb	r5, r1
 8002ad0:	d13a      	bne.n	8002b48 <HAL_SAI_Receive_DMA+0x90>
    __HAL_LOCK(hsai);
 8002ad2:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
 8002ad6:	2901      	cmp	r1, #1
 8002ad8:	d036      	beq.n	8002b48 <HAL_SAI_Receive_DMA+0x90>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002ada:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8002adc:	2122      	movs	r1, #34	; 0x22
    __HAL_LOCK(hsai);
 8002ade:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002ae2:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    hsai->pBuffPtr = pData;
 8002ae6:	6642      	str	r2, [r0, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8002ae8:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    hsai->XferSize = Size;
 8002aec:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8002af0:	4916      	ldr	r1, [pc, #88]	; (8002b4c <HAL_SAI_Receive_DMA+0x94>)
    hsai->XferCount = Size;
 8002af2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8002af6:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8002af8:	6401      	str	r1, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8002afa:	4915      	ldr	r1, [pc, #84]	; (8002b50 <HAL_SAI_Receive_DMA+0x98>)
 8002afc:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8002afe:	4915      	ldr	r1, [pc, #84]	; (8002b54 <HAL_SAI_Receive_DMA+0x9c>)
    hsai->hdmarx->XferAbortCallback = NULL;
 8002b00:	e9c0 1613 	strd	r1, r6, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8002b04:	6821      	ldr	r1, [r4, #0]
 8002b06:	311c      	adds	r1, #28
 8002b08:	f7fd fec4 	bl	8000894 <HAL_DMA_Start_IT>
 8002b0c:	b118      	cbz	r0, 8002b16 <HAL_SAI_Receive_DMA+0x5e>
      __HAL_UNLOCK(hsai);
 8002b0e:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
 8002b12:	4628      	mov	r0, r5
 8002b14:	bd70      	pop	{r4, r5, r6, pc}
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8002b16:	6825      	ldr	r5, [r4, #0]
 8002b18:	682b      	ldr	r3, [r5, #0]
 8002b1a:	03db      	lsls	r3, r3, #15
 8002b1c:	d403      	bmi.n	8002b26 <HAL_SAI_Receive_DMA+0x6e>
      __HAL_SAI_ENABLE(hsai);
 8002b1e:	682b      	ldr	r3, [r5, #0]
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b24:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002b26:	2100      	movs	r1, #0
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f7ff fdd3 	bl	80026d4 <SAI_InterruptFlag>
 8002b2e:	692b      	ldr	r3, [r5, #16]
 8002b30:	4318      	orrs	r0, r3
 8002b32:	6128      	str	r0, [r5, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8002b34:	682b      	ldr	r3, [r5, #0]
 8002b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3a:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
 8002b3c:	2500      	movs	r5, #0
 8002b3e:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
 8002b42:	e7e6      	b.n	8002b12 <HAL_SAI_Receive_DMA+0x5a>
    return  HAL_ERROR;
 8002b44:	2501      	movs	r5, #1
 8002b46:	e7e4      	b.n	8002b12 <HAL_SAI_Receive_DMA+0x5a>
    return HAL_BUSY;
 8002b48:	2502      	movs	r5, #2
 8002b4a:	e7e2      	b.n	8002b12 <HAL_SAI_Receive_DMA+0x5a>
 8002b4c:	08002bd3 	.word	0x08002bd3
 8002b50:	08002b9b 	.word	0x08002b9b
 8002b54:	08002bdf 	.word	0x08002bdf

08002b58 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002b58:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8002b5a:	6803      	ldr	r3, [r0, #0]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8002b5c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8002b5e:	6819      	ldr	r1, [r3, #0]
 8002b60:	f411 7180 	ands.w	r1, r1, #256	; 0x100
 8002b64:	d110      	bne.n	8002b88 <SAI_DMATxCplt+0x30>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8002b66:	6825      	ldr	r5, [r4, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002b68:	4620      	mov	r0, r4
    hsai->XferCount = 0;
 8002b6a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8002b6e:	682b      	ldr	r3, [r5, #0]
 8002b70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002b74:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002b76:	f7ff fdad 	bl	80026d4 <SAI_InterruptFlag>
 8002b7a:	692b      	ldr	r3, [r5, #16]
 8002b7c:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State= HAL_SAI_STATE_READY;
 8002b80:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002b82:	6128      	str	r0, [r5, #16]
    hsai->State= HAL_SAI_STATE_READY;
 8002b84:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f001 ffcd 	bl	8004b28 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8002b8e:	bd38      	pop	{r3, r4, r5, pc}

08002b90 <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8002b90:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002b92:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 8002b94:	f001 ffc0 	bl	8004b18 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8002b98:	bd08      	pop	{r3, pc}

08002b9a <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002b9a:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

 if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8002b9c:	6803      	ldr	r3, [r0, #0]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b9e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8002ba0:	6819      	ldr	r1, [r3, #0]
 8002ba2:	f411 7180 	ands.w	r1, r1, #256	; 0x100
 8002ba6:	d110      	bne.n	8002bca <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8002ba8:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002baa:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8002bac:	682b      	ldr	r3, [r5, #0]
 8002bae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002bb2:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
 8002bb4:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002bb8:	f7ff fd8c 	bl	80026d4 <SAI_InterruptFlag>
 8002bbc:	692b      	ldr	r3, [r5, #16]
 8002bbe:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State = HAL_SAI_STATE_READY;
 8002bc2:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002bc4:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8002bc6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8002bca:	4620      	mov	r0, r4
 8002bcc:	f001 ff96 	bl	8004afc <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8002bd0:	bd38      	pop	{r3, r4, r5, pc}

08002bd2 <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8002bd2:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002bd4:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
 8002bd6:	f001 ff83 	bl	8004ae0 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8002bda:	bd08      	pop	{r3, pc}

08002bdc <HAL_SAI_ErrorCallback>:
 8002bdc:	4770      	bx	lr

08002bde <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bde:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002be0:	b508      	push	{r3, lr}

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8002be2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8002be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bea:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8002bee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d003      	beq.n	8002bfe <SAI_DMAError+0x20>
 8002bf6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d10c      	bne.n	8002c18 <SAI_DMAError+0x3a>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8002bfe:	6802      	ldr	r2, [r0, #0]
 8002c00:	6813      	ldr	r3, [r2, #0]
 8002c02:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c06:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8002c08:	f7ff fd7a 	bl	8002700 <SAI_Disable.isra.0>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8002c18:	f7ff ffe0 	bl	8002bdc <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8002c1c:	bd08      	pop	{r3, pc}

08002c1e <SPI_WaitFifoStateUntilTimeout.part.0>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c1e:	6803      	ldr	r3, [r0, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c28:	6842      	ldr	r2, [r0, #4]
 8002c2a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002c2e:	d10a      	bne.n	8002c46 <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
 8002c30:	6882      	ldr	r2, [r0, #8]
 8002c32:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002c36:	d002      	beq.n	8002c3e <SPI_WaitFifoStateUntilTimeout.part.0+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c38:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002c3c:	d103      	bne.n	8002c46 <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c46:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002c48:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002c4c:	d107      	bne.n	8002c5e <SPI_WaitFifoStateUntilTimeout.part.0+0x40>
        {
          SPI_RESET_CRC(hspi);
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c64:	2300      	movs	r3, #0
 8002c66:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8002c6a:	2003      	movs	r0, #3
 8002c6c:	4770      	bx	lr

08002c6e <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c70:	4605      	mov	r5, r0
 8002c72:	460c      	mov	r4, r1
 8002c74:	4616      	mov	r6, r2
 8002c76:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 8002c78:	682b      	ldr	r3, [r5, #0]
 8002c7a:	6898      	ldr	r0, [r3, #8]
 8002c7c:	4020      	ands	r0, r4
 8002c7e:	d100      	bne.n	8002c82 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x14>
      }
    }
  }

  return HAL_OK;
}
 8002c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c82:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8002c86:	d100      	bne.n	8002c8a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002c88:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 8002c8a:	1c72      	adds	r2, r6, #1
 8002c8c:	d0f5      	beq.n	8002c7a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002c8e:	f7fd fced 	bl	800066c <HAL_GetTick>
 8002c92:	1bc0      	subs	r0, r0, r7
 8002c94:	4286      	cmp	r6, r0
 8002c96:	d8ef      	bhi.n	8002c78 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa>
 8002c98:	4628      	mov	r0, r5
}
 8002c9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002c9e:	f7ff bfbe 	b.w	8002c1e <SPI_WaitFifoStateUntilTimeout.part.0>

08002ca2 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002ca2:	b570      	push	{r4, r5, r6, lr}
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	460d      	mov	r5, r1
 8002ca8:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002caa:	6822      	ldr	r2, [r4, #0]
 8002cac:	6890      	ldr	r0, [r2, #8]
 8002cae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002cb2:	d100      	bne.n	8002cb6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x14>
}
 8002cb4:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002cb6:	1c6b      	adds	r3, r5, #1
 8002cb8:	d0f8      	beq.n	8002cac <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002cba:	f7fd fcd7 	bl	800066c <HAL_GetTick>
 8002cbe:	1b80      	subs	r0, r0, r6
 8002cc0:	4285      	cmp	r5, r0
 8002cc2:	d8f2      	bhi.n	8002caa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8>
 8002cc4:	4620      	mov	r0, r4
}
 8002cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002cca:	f7ff bfa8 	b.w	8002c1e <SPI_WaitFifoStateUntilTimeout.part.0>

08002cce <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cd0:	4613      	mov	r3, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cd2:	9201      	str	r2, [sp, #4]
{
 8002cd4:	460d      	mov	r5, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cd6:	460a      	mov	r2, r1
 8002cd8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8002cdc:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cde:	f7ff ffc6 	bl	8002c6e <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002ce2:	9b01      	ldr	r3, [sp, #4]
 8002ce4:	b128      	cbz	r0, 8002cf2 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ce6:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ce8:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cea:	f043 0320 	orr.w	r3, r3, #32
 8002cee:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cf0:	e010      	b.n	8002d14 <SPI_EndRxTxTransaction+0x46>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	f7ff ffd2 	bl	8002ca2 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002cfe:	9b01      	ldr	r3, [sp, #4]
 8002d00:	2800      	cmp	r0, #0
 8002d02:	d1f0      	bne.n	8002ce6 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d04:	462a      	mov	r2, r5
 8002d06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f7ff ffaf 	bl	8002c6e <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d1e8      	bne.n	8002ce6 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8002d14:	b003      	add	sp, #12
 8002d16:	bd30      	pop	{r4, r5, pc}

08002d18 <HAL_SPI_Init>:
{
 8002d18:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	2800      	cmp	r0, #0
 8002d1e:	d04a      	beq.n	8002db6 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d24:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002d28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d2c:	b91b      	cbnz	r3, 8002d36 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002d2e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002d32:	f002 fbe3 	bl	80054fc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002d36:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002d38:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d3a:	68e5      	ldr	r5, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002d3c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002d40:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d42:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d4a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	d833      	bhi.n	8002dba <HAL_SPI_Init+0xa2>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d56:	d000      	beq.n	8002d5a <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d58:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002d5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d5c:	b92b      	cbnz	r3, 8002d6a <HAL_SPI_Init+0x52>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d5e:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002d62:	bf8c      	ite	hi
 8002d64:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002d66:	2301      	movls	r3, #1
 8002d68:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002d6a:	69a0      	ldr	r0, [r4, #24]
 8002d6c:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8002d70:	4333      	orrs	r3, r6
 8002d72:	6926      	ldr	r6, [r4, #16]
 8002d74:	4333      	orrs	r3, r6
 8002d76:	6966      	ldr	r6, [r4, #20]
 8002d78:	4333      	orrs	r3, r6
 8002d7a:	69e6      	ldr	r6, [r4, #28]
 8002d7c:	4333      	orrs	r3, r6
 8002d7e:	6a26      	ldr	r6, [r4, #32]
 8002d80:	4333      	orrs	r3, r6
 8002d82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d84:	4333      	orrs	r3, r6
 8002d86:	f400 7600 	and.w	r6, r0, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002d8a:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002d8c:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002d8e:	f000 0004 	and.w	r0, r0, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002d92:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d96:	432b      	orrs	r3, r5
 8002d98:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002d9a:	432b      	orrs	r3, r5
 8002d9c:	4303      	orrs	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d9e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002da0:	430b      	orrs	r3, r1
 8002da2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002da4:	69d3      	ldr	r3, [r2, #28]
 8002da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002daa:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002dac:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dae:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002db0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002db6:	2001      	movs	r0, #1
 8002db8:	e7fc      	b.n	8002db4 <HAL_SPI_Init+0x9c>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002dba:	4619      	mov	r1, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002dbc:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 8002dc0:	e7c9      	b.n	8002d56 <HAL_SPI_Init+0x3e>

08002dc2 <HAL_SPI_TransmitReceive>:
{
 8002dc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dc6:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002dc8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8002dcc:	4604      	mov	r4, r0
 8002dce:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 8002dd0:	2b01      	cmp	r3, #1
{
 8002dd2:	4616      	mov	r6, r2
 8002dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8002dd8:	f000 811d 	beq.w	8003016 <HAL_SPI_TransmitReceive+0x254>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002de2:	f7fd fc43 	bl	800066c <HAL_GetTick>
  tmp_state           = hspi->State;
 8002de6:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 8002dea:	4681      	mov	r9, r0
  tmp_mode            = hspi->Init.Mode;
 8002dec:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dee:	2a01      	cmp	r2, #1
  tmp_state           = hspi->State;
 8002df0:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002df2:	d00a      	beq.n	8002e0a <HAL_SPI_TransmitReceive+0x48>
 8002df4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002df8:	f040 810b 	bne.w	8003012 <HAL_SPI_TransmitReceive+0x250>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002dfc:	68a2      	ldr	r2, [r4, #8]
 8002dfe:	2a00      	cmp	r2, #0
 8002e00:	f040 8107 	bne.w	8003012 <HAL_SPI_TransmitReceive+0x250>
 8002e04:	2904      	cmp	r1, #4
 8002e06:	f040 8104 	bne.w	8003012 <HAL_SPI_TransmitReceive+0x250>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e0a:	2d00      	cmp	r5, #0
 8002e0c:	d047      	beq.n	8002e9e <HAL_SPI_TransmitReceive+0xdc>
 8002e0e:	2e00      	cmp	r6, #0
 8002e10:	d045      	beq.n	8002e9e <HAL_SPI_TransmitReceive+0xdc>
 8002e12:	2f00      	cmp	r7, #0
 8002e14:	d043      	beq.n	8002e9e <HAL_SPI_TransmitReceive+0xdc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e16:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8002e1a:	2a04      	cmp	r2, #4
 8002e1c:	d002      	beq.n	8002e24 <HAL_SPI_TransmitReceive+0x62>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e1e:	2205      	movs	r2, #5
 8002e20:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e24:	68e1      	ldr	r1, [r4, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e26:	2200      	movs	r2, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e28:	6426      	str	r6, [r4, #64]	; 0x40
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e2e:	6826      	ldr	r6, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e30:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->RxXferSize  = Size;
 8002e32:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002e36:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e3a:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e3c:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e3e:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 8002e40:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e44:	6872      	ldr	r2, [r6, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e46:	d801      	bhi.n	8002e4c <HAL_SPI_TransmitReceive+0x8a>
 8002e48:	2f01      	cmp	r7, #1
 8002e4a:	d02a      	beq.n	8002ea2 <HAL_SPI_TransmitReceive+0xe0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e50:	6072      	str	r2, [r6, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e52:	6832      	ldr	r2, [r6, #0]
 8002e54:	0650      	lsls	r0, r2, #25
 8002e56:	d403      	bmi.n	8002e60 <HAL_SPI_TransmitReceive+0x9e>
    __HAL_SPI_ENABLE(hspi);
 8002e58:	6832      	ldr	r2, [r6, #0]
 8002e5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e5e:	6032      	str	r2, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002e64:	d958      	bls.n	8002f18 <HAL_SPI_TransmitReceive+0x156>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e66:	b10b      	cbz	r3, 8002e6c <HAL_SPI_TransmitReceive+0xaa>
 8002e68:	2f01      	cmp	r7, #1
 8002e6a:	d107      	bne.n	8002e7c <HAL_SPI_TransmitReceive+0xba>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e6c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002e70:	60f3      	str	r3, [r6, #12]
      hspi->TxXferCount--;
 8002e72:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e74:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002e7c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	b98b      	cbnz	r3, 8002ea8 <HAL_SPI_TransmitReceive+0xe6>
 8002e84:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	b96b      	cbnz	r3, 8002ea8 <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e8c:	464a      	mov	r2, r9
 8002e8e:	4641      	mov	r1, r8
 8002e90:	4620      	mov	r0, r4
 8002e92:	f7ff ff1c 	bl	8002cce <SPI_EndRxTxTransaction>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	d036      	beq.n	8002f08 <HAL_SPI_TransmitReceive+0x146>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	e032      	b.n	8002f08 <HAL_SPI_TransmitReceive+0x146>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ea2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ea6:	e7d3      	b.n	8002e50 <HAL_SPI_TransmitReceive+0x8e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ea8:	6821      	ldr	r1, [r4, #0]
 8002eaa:	688b      	ldr	r3, [r1, #8]
 8002eac:	079a      	lsls	r2, r3, #30
 8002eae:	d50d      	bpl.n	8002ecc <HAL_SPI_TransmitReceive+0x10a>
 8002eb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	b153      	cbz	r3, 8002ecc <HAL_SPI_TransmitReceive+0x10a>
 8002eb6:	b14d      	cbz	r5, 8002ecc <HAL_SPI_TransmitReceive+0x10a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        txallowed = 0U;
 8002eba:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ebc:	f833 2b02 	ldrh.w	r2, [r3], #2
 8002ec0:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002ec4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ecc:	688a      	ldr	r2, [r1, #8]
 8002ece:	f012 0201 	ands.w	r2, r2, #1
 8002ed2:	d00f      	beq.n	8002ef4 <HAL_SPI_TransmitReceive+0x132>
 8002ed4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	b15b      	cbz	r3, 8002ef4 <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002edc:	68c9      	ldr	r1, [r1, #12]
        txallowed = 1U;
 8002ede:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ee0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ee2:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ee6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002ee8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ef4:	f7fd fbba 	bl	800066c <HAL_GetTick>
 8002ef8:	eba0 0009 	sub.w	r0, r0, r9
 8002efc:	4540      	cmp	r0, r8
 8002efe:	d3be      	bcc.n	8002e7e <HAL_SPI_TransmitReceive+0xbc>
 8002f00:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002f04:	d0bb      	beq.n	8002e7e <HAL_SPI_TransmitReceive+0xbc>
        errorcode = HAL_TIMEOUT;
 8002f06:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f18:	b10b      	cbz	r3, 8002f1e <HAL_SPI_TransmitReceive+0x15c>
 8002f1a:	2f01      	cmp	r7, #1
 8002f1c:	d10b      	bne.n	8002f36 <HAL_SPI_TransmitReceive+0x174>
      if (hspi->TxXferCount > 1U)
 8002f1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d909      	bls.n	8002f3a <HAL_SPI_TransmitReceive+0x178>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f26:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002f2a:	60f3      	str	r3, [r6, #12]
        hspi->TxXferCount -= 2U;
 8002f2c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f2e:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f30:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002f36:	2501      	movs	r5, #1
 8002f38:	e049      	b.n	8002fce <HAL_SPI_TransmitReceive+0x20c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f3a:	782b      	ldrb	r3, [r5, #0]
 8002f3c:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr++;
 8002f3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f40:	3301      	adds	r3, #1
 8002f42:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002f44:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f46:	3b01      	subs	r3, #1
 8002f48:	e7f3      	b.n	8002f32 <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f4a:	6822      	ldr	r2, [r4, #0]
 8002f4c:	6893      	ldr	r3, [r2, #8]
 8002f4e:	079b      	lsls	r3, r3, #30
 8002f50:	d511      	bpl.n	8002f76 <HAL_SPI_TransmitReceive+0x1b4>
 8002f52:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	b173      	cbz	r3, 8002f76 <HAL_SPI_TransmitReceive+0x1b4>
 8002f58:	b16d      	cbz	r5, 8002f76 <HAL_SPI_TransmitReceive+0x1b4>
        if (hspi->TxXferCount > 1U)
 8002f5a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8002f5e:	b289      	uxth	r1, r1
 8002f60:	2901      	cmp	r1, #1
 8002f62:	d93e      	bls.n	8002fe2 <HAL_SPI_TransmitReceive+0x220>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f64:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002f68:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f6a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f6e:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8002f70:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8002f72:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 8002f74:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f76:	6822      	ldr	r2, [r4, #0]
 8002f78:	6893      	ldr	r3, [r2, #8]
 8002f7a:	f013 0301 	ands.w	r3, r3, #1
 8002f7e:	d01d      	beq.n	8002fbc <HAL_SPI_TransmitReceive+0x1fa>
 8002f80:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002f84:	b289      	uxth	r1, r1
 8002f86:	b1c9      	cbz	r1, 8002fbc <HAL_SPI_TransmitReceive+0x1fa>
        if (hspi->RxXferCount > 1U)
 8002f88:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f8c:	6c21      	ldr	r1, [r4, #64]	; 0x40
        if (hspi->RxXferCount > 1U)
 8002f8e:	b280      	uxth	r0, r0
 8002f90:	2801      	cmp	r0, #1
 8002f92:	d92e      	bls.n	8002ff2 <HAL_SPI_TransmitReceive+0x230>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f94:	68d0      	ldr	r0, [r2, #12]
 8002f96:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f9a:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002f9c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002fa0:	3902      	subs	r1, #2
 8002fa2:	b289      	uxth	r1, r1
 8002fa4:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002fa8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002fac:	b289      	uxth	r1, r1
 8002fae:	2901      	cmp	r1, #1
 8002fb0:	d803      	bhi.n	8002fba <HAL_SPI_TransmitReceive+0x1f8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fb2:	6851      	ldr	r1, [r2, #4]
 8002fb4:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8002fb8:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 8002fba:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fbc:	f7fd fb56 	bl	800066c <HAL_GetTick>
 8002fc0:	eba0 0009 	sub.w	r0, r0, r9
 8002fc4:	4540      	cmp	r0, r8
 8002fc6:	d320      	bcc.n	800300a <HAL_SPI_TransmitReceive+0x248>
 8002fc8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002fcc:	d19b      	bne.n	8002f06 <HAL_SPI_TransmitReceive+0x144>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1b9      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x188>
 8002fd6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1b4      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x188>
 8002fe0:	e754      	b.n	8002e8c <HAL_SPI_TransmitReceive+0xca>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8002fe6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fe8:	3301      	adds	r3, #1
 8002fea:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002fec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	e7be      	b.n	8002f70 <HAL_SPI_TransmitReceive+0x1ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ff2:	7b12      	ldrb	r2, [r2, #12]
 8002ff4:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 8002ff6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ff8:	3201      	adds	r2, #1
 8002ffa:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002ffc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003000:	3a01      	subs	r2, #1
 8003002:	b292      	uxth	r2, r2
 8003004:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 8003008:	e7d7      	b.n	8002fba <HAL_SPI_TransmitReceive+0x1f8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800300a:	f1b8 0f00 	cmp.w	r8, #0
 800300e:	d1de      	bne.n	8002fce <HAL_SPI_TransmitReceive+0x20c>
 8003010:	e779      	b.n	8002f06 <HAL_SPI_TransmitReceive+0x144>
    errorcode = HAL_BUSY;
 8003012:	2002      	movs	r0, #2
 8003014:	e778      	b.n	8002f08 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8003016:	2002      	movs	r0, #2
 8003018:	e77c      	b.n	8002f14 <HAL_SPI_TransmitReceive+0x152>
	...

0800301c <HAL_SPI_Transmit_DMA>:
{
 800301c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 800301e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8003022:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003024:	2b01      	cmp	r3, #1
 8003026:	d072      	beq.n	800310e <HAL_SPI_Transmit_DMA+0xf2>
 8003028:	2301      	movs	r3, #1
 800302a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800302e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003032:	2b01      	cmp	r3, #1
 8003034:	b2dd      	uxtb	r5, r3
 8003036:	d168      	bne.n	800310a <HAL_SPI_Transmit_DMA+0xee>
  if ((pData == NULL) || (Size == 0U))
 8003038:	2900      	cmp	r1, #0
 800303a:	d047      	beq.n	80030cc <HAL_SPI_Transmit_DMA+0xb0>
 800303c:	2a00      	cmp	r2, #0
 800303e:	d045      	beq.n	80030cc <HAL_SPI_Transmit_DMA+0xb0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003040:	2303      	movs	r3, #3
  hspi->TxXferSize  = Size;
 8003042:	8782      	strh	r2, [r0, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003044:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003046:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800304a:	2300      	movs	r3, #0
 800304c:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800304e:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->TxXferCount = Size;
 8003050:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8003052:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003056:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    SPI_1LINE_TX(hspi);
 800305a:	6802      	ldr	r2, [r0, #0]
  hspi->RxISR       = NULL;
 800305c:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003060:	6883      	ldr	r3, [r0, #8]
 8003062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003066:	d103      	bne.n	8003070 <HAL_SPI_Transmit_DMA+0x54>
    SPI_1LINE_TX(hspi);
 8003068:	6813      	ldr	r3, [r2, #0]
 800306a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800306e:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003070:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003072:	4b28      	ldr	r3, [pc, #160]	; (8003114 <HAL_SPI_Transmit_DMA+0xf8>)
 8003074:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003076:	4b28      	ldr	r3, [pc, #160]	; (8003118 <HAL_SPI_Transmit_DMA+0xfc>)
 8003078:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800307a:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_SPI_Transmit_DMA+0x100>)
 800307c:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 800307e:	2300      	movs	r3, #0
 8003080:	6503      	str	r3, [r0, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003082:	6853      	ldr	r3, [r2, #4]
 8003084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003088:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800308a:	68e3      	ldr	r3, [r4, #12]
 800308c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003090:	d80f      	bhi.n	80030b2 <HAL_SPI_Transmit_DMA+0x96>
 8003092:	6983      	ldr	r3, [r0, #24]
 8003094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003098:	d10b      	bne.n	80030b2 <HAL_SPI_Transmit_DMA+0x96>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800309a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800309c:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80030a0:	6853      	ldr	r3, [r2, #4]
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80030a2:	d118      	bne.n	80030d6 <HAL_SPI_Transmit_DMA+0xba>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80030a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030a8:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80030aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80030ac:	f3c3 034e 	ubfx	r3, r3, #1, #15
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80030b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80030b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80030b4:	320c      	adds	r2, #12
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f7fd fbec 	bl	8000894 <HAL_DMA_Start_IT>
 80030bc:	b198      	cbz	r0, 80030e6 <HAL_SPI_Transmit_DMA+0xca>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80030be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80030c0:	f043 0310 	orr.w	r3, r3, #16
 80030c4:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80030cc:	2300      	movs	r3, #0
 80030ce:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80030d2:	4628      	mov	r0, r5
 80030d4:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80030d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030da:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80030dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80030de:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80030e2:	3301      	adds	r3, #1
 80030e4:	e7e4      	b.n	80030b0 <HAL_SPI_Transmit_DMA+0x94>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	0652      	lsls	r2, r2, #25
 80030ec:	d403      	bmi.n	80030f6 <HAL_SPI_Transmit_DMA+0xda>
    __HAL_SPI_ENABLE(hspi);
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f4:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80030f6:	685a      	ldr	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030f8:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80030fa:	f042 0220 	orr.w	r2, r2, #32
 80030fe:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	f042 0202 	orr.w	r2, r2, #2
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	e7e0      	b.n	80030cc <HAL_SPI_Transmit_DMA+0xb0>
    errorcode = HAL_BUSY;
 800310a:	2502      	movs	r5, #2
 800310c:	e7de      	b.n	80030cc <HAL_SPI_Transmit_DMA+0xb0>
  __HAL_LOCK(hspi);
 800310e:	2502      	movs	r5, #2
 8003110:	e7df      	b.n	80030d2 <HAL_SPI_Transmit_DMA+0xb6>
 8003112:	bf00      	nop
 8003114:	08003125 	.word	0x08003125
 8003118:	08003153 	.word	0x08003153
 800311c:	08003131 	.word	0x08003131

08003120 <HAL_SPI_TxCpltCallback>:
 8003120:	4770      	bx	lr

08003122 <HAL_SPI_TxHalfCpltCallback>:
 8003122:	4770      	bx	lr

08003124 <SPI_DMAHalfTransmitCplt>:
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003124:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8003126:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003128:	f7ff fffb 	bl	8003122 <HAL_SPI_TxHalfCpltCallback>
}
 800312c:	bd08      	pop	{r3, pc}

0800312e <HAL_SPI_ErrorCallback>:
 800312e:	4770      	bx	lr

08003130 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003130:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003132:	6802      	ldr	r2, [r0, #0]
{
 8003134:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003136:	6853      	ldr	r3, [r2, #4]
 8003138:	f023 0303 	bic.w	r3, r3, #3
 800313c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800313e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003140:	f043 0310 	orr.w	r3, r3, #16
 8003144:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003146:	2301      	movs	r3, #1
 8003148:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 800314c:	f7ff ffef 	bl	800312e <HAL_SPI_ErrorCallback>
}
 8003150:	bd08      	pop	{r3, pc}

08003152 <SPI_DMATransmitCplt>:
{
 8003152:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003154:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003156:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8003158:	f7fd fa88 	bl	800066c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800315e:	682b      	ldr	r3, [r5, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	05db      	lsls	r3, r3, #23
 8003164:	d426      	bmi.n	80031b4 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003166:	6823      	ldr	r3, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003168:	4620      	mov	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	f021 0120 	bic.w	r1, r1, #32
 8003170:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	f021 0102 	bic.w	r1, r1, #2
 8003178:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800317a:	2164      	movs	r1, #100	; 0x64
 800317c:	f7ff fda7 	bl	8002cce <SPI_EndRxTxTransaction>
 8003180:	b118      	cbz	r0, 800318a <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003182:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003184:	f043 0320 	orr.w	r3, r3, #32
 8003188:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800318a:	68a3      	ldr	r3, [r4, #8]
 800318c:	b933      	cbnz	r3, 800319c <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	9201      	str	r2, [sp, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80031a8:	b123      	cbz	r3, 80031b4 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 80031aa:	4620      	mov	r0, r4
 80031ac:	f7ff ffbf 	bl	800312e <HAL_SPI_ErrorCallback>
}
 80031b0:	b003      	add	sp, #12
 80031b2:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 80031b4:	4620      	mov	r0, r4
 80031b6:	f7ff ffb3 	bl	8003120 <HAL_SPI_TxCpltCallback>
 80031ba:	e7f9      	b.n	80031b0 <SPI_DMATransmitCplt+0x5e>

080031bc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031bc:	6a03      	ldr	r3, [r0, #32]
 80031be:	f023 0301 	bic.w	r3, r3, #1
{
 80031c2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ca:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031cc:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 80031d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031d2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80031d6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80031da:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031dc:	688d      	ldr	r5, [r1, #8]
 80031de:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031e0:	4d0e      	ldr	r5, [pc, #56]	; (800321c <TIM_OC1_SetConfig+0x60>)
 80031e2:	42a8      	cmp	r0, r5
 80031e4:	d002      	beq.n	80031ec <TIM_OC1_SetConfig+0x30>
 80031e6:	4e0e      	ldr	r6, [pc, #56]	; (8003220 <TIM_OC1_SetConfig+0x64>)
 80031e8:	42b0      	cmp	r0, r6
 80031ea:	d111      	bne.n	8003210 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031ec:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031f0:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f2:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 80031f4:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80031f8:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fc:	d002      	beq.n	8003204 <TIM_OC1_SetConfig+0x48>
 80031fe:	4d08      	ldr	r5, [pc, #32]	; (8003220 <TIM_OC1_SetConfig+0x64>)
 8003200:	42a8      	cmp	r0, r5
 8003202:	d105      	bne.n	8003210 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003204:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003208:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800320c:	4335      	orrs	r5, r6
 800320e:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003210:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003212:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003214:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003216:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003218:	6203      	str	r3, [r0, #32]
}
 800321a:	bd70      	pop	{r4, r5, r6, pc}
 800321c:	40010000 	.word	0x40010000
 8003220:	40010400 	.word	0x40010400

08003224 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003224:	6a03      	ldr	r3, [r0, #32]
 8003226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800322a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800322c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003230:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003232:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8003238:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800323a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800323e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003242:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003244:	688d      	ldr	r5, [r1, #8]
 8003246:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800324a:	4d11      	ldr	r5, [pc, #68]	; (8003290 <TIM_OC3_SetConfig+0x6c>)
 800324c:	42a8      	cmp	r0, r5
 800324e:	d003      	beq.n	8003258 <TIM_OC3_SetConfig+0x34>
 8003250:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003254:	42a8      	cmp	r0, r5
 8003256:	d114      	bne.n	8003282 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003258:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800325a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800325e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003262:	4d0b      	ldr	r5, [pc, #44]	; (8003290 <TIM_OC3_SetConfig+0x6c>)
 8003264:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8003266:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800326a:	d003      	beq.n	8003274 <TIM_OC3_SetConfig+0x50>
 800326c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003270:	42a8      	cmp	r0, r5
 8003272:	d106      	bne.n	8003282 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003274:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003278:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800327c:	4335      	orrs	r5, r6
 800327e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003282:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003284:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003286:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003288:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328a:	6203      	str	r3, [r0, #32]
}
 800328c:	bd70      	pop	{r4, r5, r6, pc}
 800328e:	bf00      	nop
 8003290:	40010000 	.word	0x40010000

08003294 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003294:	6a03      	ldr	r3, [r0, #32]
 8003296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800329a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800329c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032a2:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ae:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032b6:	688d      	ldr	r5, [r1, #8]
 80032b8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032bc:	4d08      	ldr	r5, [pc, #32]	; (80032e0 <TIM_OC4_SetConfig+0x4c>)
 80032be:	42a8      	cmp	r0, r5
 80032c0:	d003      	beq.n	80032ca <TIM_OC4_SetConfig+0x36>
 80032c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032c6:	42a8      	cmp	r0, r5
 80032c8:	d104      	bne.n	80032d4 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032ca:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032ce:	694d      	ldr	r5, [r1, #20]
 80032d0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032d6:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032d8:	684b      	ldr	r3, [r1, #4]
 80032da:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032dc:	6202      	str	r2, [r0, #32]
}
 80032de:	bd30      	pop	{r4, r5, pc}
 80032e0:	40010000 	.word	0x40010000

080032e4 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80032e4:	6a03      	ldr	r3, [r0, #32]
 80032e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 80032ea:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80032ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ee:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032f2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80032f4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 80032f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8003302:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003304:	688d      	ldr	r5, [r1, #8]
 8003306:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330a:	4d09      	ldr	r5, [pc, #36]	; (8003330 <TIM_OC5_SetConfig+0x4c>)
 800330c:	42a8      	cmp	r0, r5
 800330e:	d003      	beq.n	8003318 <TIM_OC5_SetConfig+0x34>
 8003310:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003314:	42a8      	cmp	r0, r5
 8003316:	d104      	bne.n	8003322 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003318:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800331c:	694d      	ldr	r5, [r1, #20]
 800331e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003322:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003324:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003326:	684b      	ldr	r3, [r1, #4]
 8003328:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800332a:	6202      	str	r2, [r0, #32]
}
 800332c:	bd30      	pop	{r4, r5, pc}
 800332e:	bf00      	nop
 8003330:	40010000 	.word	0x40010000

08003334 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003334:	6a03      	ldr	r3, [r0, #32]
 8003336:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800333a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800333c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003340:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003342:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003344:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003348:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800334a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800334e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003352:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003356:	688d      	ldr	r5, [r1, #8]
 8003358:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800335c:	4d08      	ldr	r5, [pc, #32]	; (8003380 <TIM_OC6_SetConfig+0x4c>)
 800335e:	42a8      	cmp	r0, r5
 8003360:	d003      	beq.n	800336a <TIM_OC6_SetConfig+0x36>
 8003362:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003366:	42a8      	cmp	r0, r5
 8003368:	d104      	bne.n	8003374 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800336a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800336e:	694d      	ldr	r5, [r1, #20]
 8003370:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003374:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003376:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003378:	684b      	ldr	r3, [r1, #4]
 800337a:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337c:	6202      	str	r2, [r0, #32]
}
 800337e:	bd30      	pop	{r4, r5, pc}
 8003380:	40010000 	.word	0x40010000

08003384 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003384:	4a30      	ldr	r2, [pc, #192]	; (8003448 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003386:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003388:	4290      	cmp	r0, r2
 800338a:	d012      	beq.n	80033b2 <TIM_Base_SetConfig+0x2e>
 800338c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003390:	d00f      	beq.n	80033b2 <TIM_Base_SetConfig+0x2e>
 8003392:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003396:	4290      	cmp	r0, r2
 8003398:	d00b      	beq.n	80033b2 <TIM_Base_SetConfig+0x2e>
 800339a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800339e:	4290      	cmp	r0, r2
 80033a0:	d007      	beq.n	80033b2 <TIM_Base_SetConfig+0x2e>
 80033a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033a6:	4290      	cmp	r0, r2
 80033a8:	d003      	beq.n	80033b2 <TIM_Base_SetConfig+0x2e>
 80033aa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80033ae:	4290      	cmp	r0, r2
 80033b0:	d119      	bne.n	80033e6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80033b2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80033b8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ba:	4a23      	ldr	r2, [pc, #140]	; (8003448 <TIM_Base_SetConfig+0xc4>)
 80033bc:	4290      	cmp	r0, r2
 80033be:	d029      	beq.n	8003414 <TIM_Base_SetConfig+0x90>
 80033c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033c4:	d026      	beq.n	8003414 <TIM_Base_SetConfig+0x90>
 80033c6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80033ca:	4290      	cmp	r0, r2
 80033cc:	d022      	beq.n	8003414 <TIM_Base_SetConfig+0x90>
 80033ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033d2:	4290      	cmp	r0, r2
 80033d4:	d01e      	beq.n	8003414 <TIM_Base_SetConfig+0x90>
 80033d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033da:	4290      	cmp	r0, r2
 80033dc:	d01a      	beq.n	8003414 <TIM_Base_SetConfig+0x90>
 80033de:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80033e2:	4290      	cmp	r0, r2
 80033e4:	d016      	beq.n	8003414 <TIM_Base_SetConfig+0x90>
 80033e6:	4a19      	ldr	r2, [pc, #100]	; (800344c <TIM_Base_SetConfig+0xc8>)
 80033e8:	4290      	cmp	r0, r2
 80033ea:	d013      	beq.n	8003414 <TIM_Base_SetConfig+0x90>
 80033ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033f0:	4290      	cmp	r0, r2
 80033f2:	d00f      	beq.n	8003414 <TIM_Base_SetConfig+0x90>
 80033f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033f8:	4290      	cmp	r0, r2
 80033fa:	d00b      	beq.n	8003414 <TIM_Base_SetConfig+0x90>
 80033fc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003400:	4290      	cmp	r0, r2
 8003402:	d007      	beq.n	8003414 <TIM_Base_SetConfig+0x90>
 8003404:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003408:	4290      	cmp	r0, r2
 800340a:	d003      	beq.n	8003414 <TIM_Base_SetConfig+0x90>
 800340c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003410:	4290      	cmp	r0, r2
 8003412:	d103      	bne.n	800341c <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003418:	68ca      	ldr	r2, [r1, #12]
 800341a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800341c:	694a      	ldr	r2, [r1, #20]
 800341e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003422:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003424:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003426:	688b      	ldr	r3, [r1, #8]
 8003428:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800342a:	680b      	ldr	r3, [r1, #0]
 800342c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <TIM_Base_SetConfig+0xc4>)
 8003430:	4298      	cmp	r0, r3
 8003432:	d003      	beq.n	800343c <TIM_Base_SetConfig+0xb8>
 8003434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003438:	4298      	cmp	r0, r3
 800343a:	d101      	bne.n	8003440 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800343c:	690b      	ldr	r3, [r1, #16]
 800343e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003440:	2301      	movs	r3, #1
 8003442:	6143      	str	r3, [r0, #20]
}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40014000 	.word	0x40014000

08003450 <HAL_TIM_PWM_Init>:
{
 8003450:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003452:	4604      	mov	r4, r0
 8003454:	b1a0      	cbz	r0, 8003480 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003456:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800345a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800345e:	b91b      	cbnz	r3, 8003468 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003460:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003464:	f002 f972 	bl	800574c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346a:	6820      	ldr	r0, [r4, #0]
 800346c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800346e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003472:	f7ff ff87 	bl	8003384 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003476:	2301      	movs	r3, #1
  return HAL_OK;
 8003478:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800347a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800347e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003480:	2001      	movs	r0, #1
 8003482:	e7fc      	b.n	800347e <HAL_TIM_PWM_Init+0x2e>

08003484 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003484:	6a03      	ldr	r3, [r0, #32]
 8003486:	f023 0310 	bic.w	r3, r3, #16
{
 800348a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800348c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800348e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003490:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003492:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003494:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003498:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800349a:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800349e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034a6:	688d      	ldr	r5, [r1, #8]
 80034a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034ac:	4d10      	ldr	r5, [pc, #64]	; (80034f0 <TIM_OC2_SetConfig+0x6c>)
 80034ae:	42a8      	cmp	r0, r5
 80034b0:	d003      	beq.n	80034ba <TIM_OC2_SetConfig+0x36>
 80034b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034b6:	42a8      	cmp	r0, r5
 80034b8:	d114      	bne.n	80034e4 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034ba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80034bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c4:	4d0a      	ldr	r5, [pc, #40]	; (80034f0 <TIM_OC2_SetConfig+0x6c>)
 80034c6:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80034c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034cc:	d003      	beq.n	80034d6 <TIM_OC2_SetConfig+0x52>
 80034ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034d2:	42a8      	cmp	r0, r5
 80034d4:	d106      	bne.n	80034e4 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034da:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80034de:	4335      	orrs	r5, r6
 80034e0:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80034e4:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80034e6:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80034e8:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80034ea:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80034ec:	6203      	str	r3, [r0, #32]
}
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	40010000 	.word	0x40010000

080034f4 <HAL_TIM_PWM_ConfigChannel>:
{
 80034f4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80034f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80034fa:	4604      	mov	r4, r0
 80034fc:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d012      	beq.n	8003528 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003502:	2301      	movs	r3, #1
  switch (Channel)
 8003504:	2a0c      	cmp	r2, #12
  htim->State = HAL_TIM_STATE_BUSY;
 8003506:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800350a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800350e:	d054      	beq.n	80035ba <HAL_TIM_PWM_ConfigChannel+0xc6>
 8003510:	d80b      	bhi.n	800352a <HAL_TIM_PWM_ConfigChannel+0x36>
 8003512:	2a04      	cmp	r2, #4
 8003514:	d02f      	beq.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x82>
 8003516:	2a08      	cmp	r2, #8
 8003518:	d03e      	beq.n	8003598 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800351a:	b1da      	cbz	r2, 8003554 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_READY;
 800351c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800351e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003520:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003524:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003528:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800352a:	2a10      	cmp	r2, #16
 800352c:	d056      	beq.n	80035dc <HAL_TIM_PWM_ConfigChannel+0xe8>
 800352e:	2a14      	cmp	r2, #20
 8003530:	d1f4      	bne.n	800351c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003532:	6820      	ldr	r0, [r4, #0]
 8003534:	f7ff fefe 	bl	8003334 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003538:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800353a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800353c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800353e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003542:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800354c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800354e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003552:	e052      	b.n	80035fa <HAL_TIM_PWM_ConfigChannel+0x106>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003554:	6820      	ldr	r0, [r4, #0]
 8003556:	f7ff fe31 	bl	80031bc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800355a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800355c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800355e:	699a      	ldr	r2, [r3, #24]
 8003560:	f042 0208 	orr.w	r2, r2, #8
 8003564:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003566:	699a      	ldr	r2, [r3, #24]
 8003568:	f022 0204 	bic.w	r2, r2, #4
 800356c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003572:	619a      	str	r2, [r3, #24]
      break;
 8003574:	e7d2      	b.n	800351c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003576:	6820      	ldr	r0, [r4, #0]
 8003578:	f7ff ff84 	bl	8003484 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800357c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800357e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003596:	e7ec      	b.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003598:	6820      	ldr	r0, [r4, #0]
 800359a:	f7ff fe43 	bl	8003224 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800359e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035a0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	f042 0208 	orr.w	r2, r2, #8
 80035a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	f022 0204 	bic.w	r2, r2, #4
 80035b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035b6:	61da      	str	r2, [r3, #28]
      break;
 80035b8:	e7b0      	b.n	800351c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ba:	6820      	ldr	r0, [r4, #0]
 80035bc:	f7ff fe6a 	bl	8003294 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035c0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035c4:	69da      	ldr	r2, [r3, #28]
 80035c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035d4:	69da      	ldr	r2, [r3, #28]
 80035d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80035da:	e7ec      	b.n	80035b6 <HAL_TIM_PWM_ConfigChannel+0xc2>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035dc:	6820      	ldr	r0, [r4, #0]
 80035de:	f7ff fe81 	bl	80032e4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035e2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035e4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035e8:	f042 0208 	orr.w	r2, r2, #8
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035f0:	f022 0204 	bic.w	r2, r2, #4
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035f8:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035fc:	e78e      	b.n	800351c <HAL_TIM_PWM_ConfigChannel+0x28>
	...

08003600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003600:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003602:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003606:	2b01      	cmp	r3, #1
 8003608:	f04f 0302 	mov.w	r3, #2
 800360c:	d01f      	beq.n	800364e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800360e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003610:	4d10      	ldr	r5, [pc, #64]	; (8003654 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003612:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003616:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8003618:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800361a:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800361c:	d003      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800361e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003622:	42aa      	cmp	r2, r5
 8003624:	d103      	bne.n	800362e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003626:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800362a:	684d      	ldr	r5, [r1, #4]
 800362c:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800362e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003630:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003634:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003636:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800363a:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800363c:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800363e:	6053      	str	r3, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003640:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8003642:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003644:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003648:	2300      	movs	r3, #0
 800364a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800364e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003650:	bd30      	pop	{r4, r5, pc}
 8003652:	bf00      	nop
 8003654:	40010000 	.word	0x40010000

08003658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003658:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800365a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800365e:	2b01      	cmp	r3, #1
 8003660:	d038      	beq.n	80036d4 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003662:	68cb      	ldr	r3, [r1, #12]
 8003664:	688a      	ldr	r2, [r1, #8]
 8003666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800366a:	4c1b      	ldr	r4, [pc, #108]	; (80036d8 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800366c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800366e:	684a      	ldr	r2, [r1, #4]
 8003670:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003674:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003676:	680a      	ldr	r2, [r1, #0]
 8003678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800367c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800367e:	690a      	ldr	r2, [r1, #16]
 8003680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003684:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003686:	694a      	ldr	r2, [r1, #20]
 8003688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800368c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800368e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003694:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003696:	698a      	ldr	r2, [r1, #24]
 8003698:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800369c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80036a0:	6802      	ldr	r2, [r0, #0]
 80036a2:	42a2      	cmp	r2, r4
 80036a4:	d003      	beq.n	80036ae <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 80036a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80036aa:	42a2      	cmp	r2, r4
 80036ac:	d10c      	bne.n	80036c8 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80036ae:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80036b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036b4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80036b8:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80036ba:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80036bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80036c2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80036c6:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036c8:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80036ca:	2300      	movs	r3, #0
 80036cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80036d0:	4618      	mov	r0, r3
}
 80036d2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80036d4:	2002      	movs	r0, #2
 80036d6:	e7fc      	b.n	80036d2 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 80036d8:	40010000 	.word	0x40010000

080036dc <reg_read>:
	HAL_Delay(10);
	return 0;
}

static uint16_t reg_read(uint8_t memAddr)
{
 80036dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	I2C_write(AR1010_ADDRESS, &memAddr, 1);
 80036de:	2201      	movs	r2, #1
 80036e0:	f10d 0107 	add.w	r1, sp, #7
{
 80036e4:	f88d 0007 	strb.w	r0, [sp, #7]
	I2C_write(AR1010_ADDRESS, &memAddr, 1);
 80036e8:	2010      	movs	r0, #16
 80036ea:	f000 ff69 	bl	80045c0 <I2C_write>
	uint8_t read[2];
	I2C_read(AR1010_ADDRESS, read, 2);
 80036ee:	2202      	movs	r2, #2
 80036f0:	a903      	add	r1, sp, #12
 80036f2:	2010      	movs	r0, #16
 80036f4:	f000 ff7a 	bl	80045ec <I2C_read>
	uint8_t upper = read[0];
	uint8_t lower = read[1];
	uint16_t outputWord = (upper << 8) + lower;
 80036f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80036fc:	f89d 400d 	ldrb.w	r4, [sp, #13]
	HAL_Delay(10);
 8003700:	200a      	movs	r0, #10
	uint16_t outputWord = (upper << 8) + lower;
 8003702:	eb04 2403 	add.w	r4, r4, r3, lsl #8
	HAL_Delay(10);
 8003706:	f7fc ffb7 	bl	8000678 <HAL_Delay>
	uint16_t outputWord = (upper << 8) + lower;
 800370a:	b2a4      	uxth	r4, r4
	return outputWord;
}
 800370c:	4620      	mov	r0, r4
 800370e:	b004      	add	sp, #16
 8003710:	bd10      	pop	{r4, pc}

08003712 <reg_write.isra.0>:
	uint8_t upper = (inputWord & 0xFF00) >> 8;
 8003712:	0a0b      	lsrs	r3, r1, #8
static uint8_t reg_write(uint8_t memAddr, uint16_t inputWord)
 8003714:	b507      	push	{r0, r1, r2, lr}
	I2C_write(AR1010_ADDRESS, data, 3);
 8003716:	2203      	movs	r2, #3
	data[0] = memAddr;
 8003718:	f88d 0004 	strb.w	r0, [sp, #4]
	uint8_t lower = (inputWord & 0x00FF);
 800371c:	f88d 1006 	strb.w	r1, [sp, #6]
	I2C_write(AR1010_ADDRESS, data, 3);
 8003720:	2010      	movs	r0, #16
 8003722:	a901      	add	r1, sp, #4
	uint8_t upper = (inputWord & 0xFF00) >> 8;
 8003724:	f88d 3005 	strb.w	r3, [sp, #5]
	I2C_write(AR1010_ADDRESS, data, 3);
 8003728:	f000 ff4a 	bl	80045c0 <I2C_write>
	HAL_Delay(10);
 800372c:	200a      	movs	r0, #10
 800372e:	f7fc ffa3 	bl	8000678 <HAL_Delay>
}
 8003732:	b003      	add	sp, #12
 8003734:	f85d fb04 	ldr.w	pc, [sp], #4

08003738 <mem_low.isra.0>:
static uint8_t mem_high(uint8_t memAddr, uint16_t mask)
{
	return mem_OR(memAddr, mask);
}

static uint8_t mem_low(uint8_t memAddr, uint16_t mask)
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	460d      	mov	r5, r1
 800373c:	4604      	mov	r4, r0
	uint16_t opWord = reg_read(memAddr);
 800373e:	f7ff ffcd 	bl	80036dc <reg_read>
	opWord = opWord & mask;
 8003742:	ea20 0005 	bic.w	r0, r0, r5
	return reg_write(memAddr, opWord);
 8003746:	b281      	uxth	r1, r0
 8003748:	4620      	mov	r0, r4
{
	return mem_AND(memAddr, ~mask);
}
 800374a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return reg_write(memAddr, opWord);
 800374e:	f7ff bfe0 	b.w	8003712 <reg_write.isra.0>

08003752 <mem_high.isra.0>:
static uint8_t mem_high(uint8_t memAddr, uint16_t mask)
 8003752:	b538      	push	{r3, r4, r5, lr}
 8003754:	460c      	mov	r4, r1
 8003756:	4605      	mov	r5, r0
	uint16_t opWord = reg_read(memAddr);
 8003758:	f7ff ffc0 	bl	80036dc <reg_read>
	opWord |= mask;
 800375c:	ea44 0100 	orr.w	r1, r4, r0
	return reg_write(memAddr, opWord);
 8003760:	4628      	mov	r0, r5
 8003762:	b289      	uxth	r1, r1
}
 8003764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return reg_write(memAddr, opWord);
 8003768:	f7ff bfd3 	b.w	8003712 <reg_write.isra.0>

0800376c <mem_sub_write.isra.0>:
{
	uint16_t opWord = reg_read(memAddr);
	return opWord & mask;
}

static uint8_t mem_sub_write(uint8_t memAddr, uint16_t inputWord, uint16_t mask)
 800376c:	b570      	push	{r4, r5, r6, lr}
 800376e:	4614      	mov	r4, r2
 8003770:	460e      	mov	r6, r1
 8003772:	4605      	mov	r5, r0
{
	uint16_t opWord = reg_read(memAddr);
 8003774:	f7ff ffb2 	bl	80036dc <reg_read>
	opWord = opWord & ~mask;
 8003778:	ea20 0304 	bic.w	r3, r0, r4
	inputWord = inputWord & mask;
 800377c:	4034      	ands	r4, r6
	uint16_t outputWord = opWord | inputWord;
	return reg_write(memAddr, outputWord);
 800377e:	4628      	mov	r0, r5
	uint16_t outputWord = opWord | inputWord;
 8003780:	b299      	uxth	r1, r3
	return reg_write(memAddr, outputWord);
 8003782:	4321      	orrs	r1, r4
}
 8003784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return reg_write(memAddr, outputWord);
 8003788:	f7ff bfc3 	b.w	8003712 <reg_write.isra.0>

0800378c <AR1010_init>:
{
 800378c:	b538      	push	{r3, r4, r5, lr}
	uint16_t opWord = reg_read(memAddr);
 800378e:	201c      	movs	r0, #28
 8003790:	f7ff ffa4 	bl	80036dc <reg_read>
	if (chip_no != 0x1010)
 8003794:	f241 0310 	movw	r3, #4112	; 0x1010
 8003798:	4298      	cmp	r0, r3
 800379a:	d001      	beq.n	80037a0 <AR1010_init+0x14>
		Error_Handler();
 800379c:	f001 fc80 	bl	80050a0 <Error_Handler>
{
 80037a0:	2401      	movs	r4, #1
		reg_write(i, initialRegisters[i]);
 80037a2:	4d0f      	ldr	r5, [pc, #60]	; (80037e0 <AR1010_init+0x54>)
 80037a4:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 80037a8:	b2e0      	uxtb	r0, r4
	for (uint8_t i = 1; i < 18; i++)
 80037aa:	3401      	adds	r4, #1
		reg_write(i, initialRegisters[i]);
 80037ac:	f7ff ffb1 	bl	8003712 <reg_write.isra.0>
	for (uint8_t i = 1; i < 18; i++)
 80037b0:	2c12      	cmp	r4, #18
 80037b2:	d1f7      	bne.n	80037a4 <AR1010_init+0x18>
	reg_write(0x00, initialRegisters[0]);
 80037b4:	8829      	ldrh	r1, [r5, #0]
 80037b6:	2000      	movs	r0, #0
 80037b8:	f7ff ffab 	bl	8003712 <reg_write.isra.0>
	mem_low(0x01, 0x000E); //disable HMUTE and SMUTE
 80037bc:	210e      	movs	r1, #14
 80037be:	2001      	movs	r0, #1
 80037c0:	f7ff ffba 	bl	8003738 <mem_low.isra.0>
	mem_sub_write(0x03, 0B11 << 3, 0B11 << 3); //Setup Band and Space
 80037c4:	2218      	movs	r2, #24
 80037c6:	2003      	movs	r0, #3
 80037c8:	4611      	mov	r1, r2
 80037ca:	f7ff ffcf 	bl	800376c <mem_sub_write.isra.0>
	mem_sub_write(0x03, 0B1000 << 7, 0B1111 << 7); //Set Volume
 80037ce:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 80037d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037d6:	2003      	movs	r0, #3
}
 80037d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mem_sub_write(0x03, 0B1000 << 7, 0B1111 << 7); //Set Volume
 80037dc:	f7ff bfc6 	b.w	800376c <mem_sub_write.isra.0>
 80037e0:	20000008 	.word	0x20000008

080037e4 <AR1010_auto_tune>:
		;     //Wait STC
	mem_low(0x01, 0x0002);                 //Clear mute
}

void AR1010_auto_tune(float freq, uint8_t convert)
{ //freq in MHz as float
 80037e4:	b510      	push	{r4, lr}
	uint16_t chan;
	if (convert)
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d064      	beq.n	80038b4 <AR1010_auto_tune+0xd0>
		chan = (uint16_t) (freq * 10 - 690);
 80037ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80037ee:	eddf 7a34 	vldr	s15, [pc, #208]	; 80038c0 <AR1010_auto_tune+0xdc>
 80037f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80037f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037fa:	ee17 3a90 	vmov	r3, s15
	else
		chan = (uint16_t) freq;

	mem_high(0x01, 0x0002);										//Set mute
 80037fe:	2102      	movs	r1, #2
 8003800:	2001      	movs	r0, #1
		chan = (uint16_t) freq;
 8003802:	b29c      	uxth	r4, r3
	mem_high(0x01, 0x0002);										//Set mute
 8003804:	f7ff ffa5 	bl	8003752 <mem_high.isra.0>
	mem_low(0x02, 0x0200);										//Clear TUNE
 8003808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800380c:	2002      	movs	r0, #2
 800380e:	f7ff ff93 	bl	8003738 <mem_low.isra.0>
	mem_low(0x03, 0x4000);										//Clear SEEK
 8003812:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003816:	2003      	movs	r0, #3
 8003818:	f7ff ff8e 	bl	8003738 <mem_low.isra.0>
	mem_sub_write(0x02, chan, 0x01FF);							//Set CHAN
 800381c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003820:	4621      	mov	r1, r4
 8003822:	2002      	movs	r0, #2
 8003824:	f7ff ffa2 	bl	800376c <mem_sub_write.isra.0>
														//Read Low-side LO injection
	mem_sub_write(0x0B, 0x0000, 0x8005);							//Set R11 (Clear D15, Clear D0/D2)
 8003828:	2100      	movs	r1, #0
 800382a:	200b      	movs	r0, #11
 800382c:	f248 0205 	movw	r2, #32773	; 0x8005
 8003830:	f7ff ff9c 	bl	800376c <mem_sub_write.isra.0>
	mem_high(0x02, 0x0200);										//Enable TUNE
 8003834:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003838:	2002      	movs	r0, #2
 800383a:	f7ff ff8a 	bl	8003752 <mem_high.isra.0>
	uint16_t opWord = reg_read(memAddr);
 800383e:	2013      	movs	r0, #19
 8003840:	f7ff ff4c 	bl	80036dc <reg_read>
	while (!mem_sub_read(0x13, 0x0020))
 8003844:	0681      	lsls	r1, r0, #26
 8003846:	d5fa      	bpl.n	800383e <AR1010_auto_tune+0x5a>
	uint16_t opWord = reg_read(memAddr);
 8003848:	2012      	movs	r0, #18
 800384a:	f7ff ff47 	bl	80036dc <reg_read>
		;                   //Wait for STC flag
	uint8_t RSSI1 = mem_sub_read(0x12, 0xFE00);					//Get RSSI1
	mem_low(0x02, 0x0200);										//Clear TUNE
 800384e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003852:	2002      	movs	r0, #2
 8003854:	f7ff ff70 	bl	8003738 <mem_low.isra.0>
														//Read High-side LO injection
	mem_sub_write(0x0B, 0x8005, 0x8005);							//Set R11 (Set D15, Set D0/D2)
 8003858:	f248 0205 	movw	r2, #32773	; 0x8005
 800385c:	200b      	movs	r0, #11
 800385e:	4611      	mov	r1, r2
 8003860:	f7ff ff84 	bl	800376c <mem_sub_write.isra.0>
	mem_high(0x02, 0x0200);										//Enable TUNE
 8003864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003868:	2002      	movs	r0, #2
 800386a:	f7ff ff72 	bl	8003752 <mem_high.isra.0>
	uint16_t opWord = reg_read(memAddr);
 800386e:	2013      	movs	r0, #19
 8003870:	f7ff ff34 	bl	80036dc <reg_read>
	while (!mem_sub_read(0x13, 0x0020))
 8003874:	0682      	lsls	r2, r0, #26
 8003876:	d5fa      	bpl.n	800386e <AR1010_auto_tune+0x8a>
	uint16_t opWord = reg_read(memAddr);
 8003878:	2012      	movs	r0, #18
 800387a:	f7ff ff2f 	bl	80036dc <reg_read>
		;                   //Wait for STC flag
	uint8_t RSSI2 = mem_sub_read(0x12, 0xFE00);					//Get RSSI2
	mem_low(0x02, 0x0200);										//Clear TUNE
 800387e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003882:	2002      	movs	r0, #2
 8003884:	f7ff ff58 	bl	8003738 <mem_low.isra.0>
														//Compare Hi-Lo strength
	if (RSSI1 > RSSI2)
		mem_sub_write(0x0B, 0x0005, 0x8005);						//(RSSI1>RSSI2)?R11(Clear D15, Set D0/D2)
	else
		mem_sub_write(0x0B, 0x0000, 0x8000);						//:R11(Set D11, Clear D0/D2)
 8003888:	2100      	movs	r1, #0
 800388a:	200b      	movs	r0, #11
 800388c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003890:	f7ff ff6c 	bl	800376c <mem_sub_write.isra.0>
	mem_high(0x02, 0x0200);										//Enable TUNE
 8003894:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003898:	2002      	movs	r0, #2
 800389a:	f7ff ff5a 	bl	8003752 <mem_high.isra.0>
	uint16_t opWord = reg_read(memAddr);
 800389e:	2013      	movs	r0, #19
 80038a0:	f7ff ff1c 	bl	80036dc <reg_read>
	while (!mem_sub_read(0x13, 0x0020));							//Wait STC
 80038a4:	0683      	lsls	r3, r0, #26
 80038a6:	d5fa      	bpl.n	800389e <AR1010_auto_tune+0xba>
	mem_low(0x01, 0x0002);										//Clear mute
 80038a8:	2102      	movs	r1, #2
 80038aa:	2001      	movs	r0, #1
}
 80038ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_low(0x01, 0x0002);										//Clear mute
 80038b0:	f7ff bf42 	b.w	8003738 <mem_low.isra.0>
		chan = (uint16_t) freq;
 80038b4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80038b8:	ee10 3a10 	vmov	r3, s0
 80038bc:	e79f      	b.n	80037fe <AR1010_auto_tune+0x1a>
 80038be:	bf00      	nop
 80038c0:	c42c8000 	.word	0xc42c8000

080038c4 <AR1010_set_volume>:

void AR1010_set_volume(uint8_t volume)
{
	if (volume > 18)
		volume = 18;
	int write1 = volume1_conv[volume];
 80038c4:	2812      	cmp	r0, #18
	int write2 = volume2_conv[volume];
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <AR1010_set_volume+0x30>)
	mem_sub_write(0x03, write1 << 7, 0B1111 << 7);
 80038c8:	f44f 62f0 	mov.w	r2, #1920	; 0x780
	int write1 = volume1_conv[volume];
 80038cc:	bf28      	it	cs
 80038ce:	2012      	movcs	r0, #18
{
 80038d0:	b510      	push	{r4, lr}
	int write2 = volume2_conv[volume];
 80038d2:	5c1c      	ldrb	r4, [r3, r0]
	int write1 = volume1_conv[volume];
 80038d4:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <AR1010_set_volume+0x34>)
	mem_sub_write(0x03, write1 << 7, 0B1111 << 7);
 80038d6:	5c19      	ldrb	r1, [r3, r0]
 80038d8:	2003      	movs	r0, #3
 80038da:	01c9      	lsls	r1, r1, #7
 80038dc:	f7ff ff46 	bl	800376c <mem_sub_write.isra.0>
	mem_sub_write(0x0E, write2 << 12, 0B1111 << 12);
 80038e0:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80038e4:	0321      	lsls	r1, r4, #12
 80038e6:	200e      	movs	r0, #14
 80038e8:	4011      	ands	r1, r2
}
 80038ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_sub_write(0x0E, write2 << 12, 0B1111 << 12);
 80038ee:	f7ff bf3d 	b.w	800376c <mem_sub_write.isra.0>
 80038f2:	bf00      	nop
 80038f4:	080086eb 	.word	0x080086eb
 80038f8:	080086d8 	.word	0x080086d8

080038fc <SwapBytes>:
///////////////////////////////////////////////////////////////////////////////
// Uncategorized:

uint16_t SwapBytes(uint16_t Value)
{
  return (Value >> 8) | ((Value & 0xFF) << 8);
 80038fc:	ba40      	rev16	r0, r0
}
 80038fe:	b280      	uxth	r0, r0
 8003900:	4770      	bx	lr

08003902 <Clamp_uint16>:
///////////////////////////////////////////////////////////////////////////////
// Clamp:

uint16_t Clamp_uint16(uint16_t Value, uint16_t MinValue , uint16_t MaxValue)
{
  if (Value < MinValue)
 8003902:	4288      	cmp	r0, r1
 8003904:	bf38      	it	cc
 8003906:	4608      	movcc	r0, r1
    Value = MinValue;
  if (Value > MaxValue)
    Value = MaxValue;
  return Value;
}
 8003908:	4290      	cmp	r0, r2
 800390a:	bf28      	it	cs
 800390c:	4610      	movcs	r0, r2
 800390e:	4770      	bx	lr

08003910 <Clamp_float>:
  return Value;
}

float Clamp_float(float Value, float MinValue, float MaxValue)
{
  if (Value < MinValue)
 8003910:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8003914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003918:	d405      	bmi.n	8003926 <Clamp_float+0x16>
    Value = MinValue;
  else if (Value > MaxValue)
 800391a:	eeb4 0ac1 	vcmpe.f32	s0, s2
 800391e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003922:	fe71 0a00 	vselgt.f32	s1, s2, s0
    Value = MaxValue;

  return Value;
}
 8003926:	eeb0 0a60 	vmov.f32	s0, s1
 800392a:	4770      	bx	lr

0800392c <ILI9341_Write8>:
//
//  return readvalue;
//}

static void ILI9341_Write8(uint8_t Value)
{
 800392c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t ReadData;

  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &Value, &ReadData, 1, 100) != HAL_OK)
 800392e:	2364      	movs	r3, #100	; 0x64
{
 8003930:	f88d 000f 	strb.w	r0, [sp, #15]
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &Value, &ReadData, 1, 100) != HAL_OK)
 8003934:	4807      	ldr	r0, [pc, #28]	; (8003954 <ILI9341_Write8+0x28>)
 8003936:	f10d 0217 	add.w	r2, sp, #23
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	f10d 010f 	add.w	r1, sp, #15
 8003940:	2301      	movs	r3, #1
 8003942:	6800      	ldr	r0, [r0, #0]
 8003944:	f7ff fa3d 	bl	8002dc2 <HAL_SPI_TransmitReceive>
 8003948:	b108      	cbz	r0, 800394e <ILI9341_Write8+0x22>
    Error_Handler();
 800394a:	f001 fba9 	bl	80050a0 <Error_Handler>
}
 800394e:	b007      	add	sp, #28
 8003950:	f85d fb04 	ldr.w	pc, [sp], #4
 8003954:	200004c8 	.word	0x200004c8

08003958 <ILI9341_Write16>:
//  phspi->Init.DataSize = SPI_DATASIZE_8BIT;
//}

static void ILI9341_Write16(uint16_t Value)
// MSB first.
{
 8003958:	b510      	push	{r4, lr}
 800395a:	4604      	mov	r4, r0
  ILI9341_Write8(Value >> 8);
 800395c:	0a00      	lsrs	r0, r0, #8
 800395e:	f7ff ffe5 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(Value);
 8003962:	b2e0      	uxtb	r0, r4
}
 8003964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ILI9341_Write8(Value);
 8003968:	f7ff bfe0 	b.w	800392c <ILI9341_Write8>

0800396c <ILI9341_WriteCommand>:
  ILI9341_Write16(Value >> 16);
  ILI9341_Write16(Value);
}

static void ILI9341_WriteCommand(int8_t Value)
{
 800396c:	b538      	push	{r3, r4, r5, lr}
  ILI9341_DC_Low();
 800396e:	4d08      	ldr	r5, [pc, #32]	; (8003990 <ILI9341_WriteCommand+0x24>)
{
 8003970:	4604      	mov	r4, r0
  ILI9341_DC_Low();
 8003972:	2200      	movs	r2, #0
 8003974:	2104      	movs	r1, #4
 8003976:	4628      	mov	r0, r5
 8003978:	f7fd f992 	bl	8000ca0 <HAL_GPIO_WritePin>
  ILI9341_Write8(Value);
 800397c:	b2e0      	uxtb	r0, r4
 800397e:	f7ff ffd5 	bl	800392c <ILI9341_Write8>
  ILI9341_DC_High();
 8003982:	4628      	mov	r0, r5
 8003984:	2201      	movs	r2, #1
 8003986:	2104      	movs	r1, #4
}
 8003988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ILI9341_DC_High();
 800398c:	f7fd b988 	b.w	8000ca0 <HAL_GPIO_WritePin>
 8003990:	40020800 	.word	0x40020800

08003994 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0>:
    ILI9341_DrawPixel_ToBackBuffer(X, Y, Color);
  else
    ILI9341_DrawPixel_ToDisplay(X, Y, Color, UseCS);
}

static void ILI9341_DrawPixels_MSBFirst_ToDisplay(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t *pPixels)
 8003994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003998:	4606      	mov	r6, r0
 800399a:	460d      	mov	r5, r1
 800399c:	4614      	mov	r4, r2
// Supplied pixel data must be byte swapped i.e. MSB first.
{
  if ((Width == 0) || (Height == 0))
    return;

  ILI9341_CSX_Low();
 800399e:	2102      	movs	r1, #2
 80039a0:	2200      	movs	r2, #0
 80039a2:	4829      	ldr	r0, [pc, #164]	; (8003a48 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xb4>)
static void ILI9341_DrawPixels_MSBFirst_ToDisplay(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t *pPixels)
 80039a4:	461f      	mov	r7, r3
 80039a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  ILI9341_CSX_Low();
 80039aa:	f7fd f979 	bl	8000ca0 <HAL_GPIO_WritePin>

  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 80039ae:	202a      	movs	r0, #42	; 0x2a
 80039b0:	f7ff ffdc 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 80039b4:	4630      	mov	r0, r6
 80039b6:	f7ff ffcf 	bl	8003958 <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 80039ba:	1e60      	subs	r0, r4, #1
 80039bc:	4430      	add	r0, r6
 80039be:	b280      	uxth	r0, r0
 80039c0:	f7ff ffca 	bl	8003958 <ILI9341_Write16>

  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 80039c4:	202b      	movs	r0, #43	; 0x2b
 80039c6:	f7ff ffd1 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 80039ca:	4628      	mov	r0, r5
 80039cc:	f7ff ffc4 	bl	8003958 <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 80039d0:	1e78      	subs	r0, r7, #1
 80039d2:	4428      	add	r0, r5
 80039d4:	b280      	uxth	r0, r0
 80039d6:	f7ff ffbf 	bl	8003958 <ILI9341_Write16>

  ILI9341_WriteCommand(0x2C); // Memory write.
 80039da:	202c      	movs	r0, #44	; 0x2c
 80039dc:	f7ff ffc6 	bl	800396c <ILI9341_WriteCommand>
  uint32_t NumBytes = Width * Height * sizeof(uint16_t);
 80039e0:	fb07 f204 	mul.w	r2, r7, r4
 80039e4:	0052      	lsls	r2, r2, #1
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80039e6:	f3bf 8f4f 	dsb	sy
      SCB->DCCMVAC = op_addr;
 80039ea:	4818      	ldr	r0, [pc, #96]	; (8003a4c <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xb8>)
 80039ec:	eb08 0102 	add.w	r1, r8, r2
    while (op_size > 0) {
 80039f0:	2a00      	cmp	r2, #0
 80039f2:	eba1 0302 	sub.w	r3, r1, r2
 80039f6:	dc22      	bgt.n	8003a3e <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xaa>
 80039f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80039fc:	f3bf 8f6f 	isb	sy
#if __CORTEX_M >= 7
    SCB_CleanDCache_by_Addr((uint32_t *)pPixels, NumBytes);
#endif
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
  {
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*)pPixels, Width * sizeof(uint16_t)) != HAL_OK)
 8003a00:	0064      	lsls	r4, r4, #1
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8003a02:	2500      	movs	r5, #0
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*)pPixels, Width * sizeof(uint16_t)) != HAL_OK)
 8003a04:	4e12      	ldr	r6, [pc, #72]	; (8003a50 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xbc>)
 8003a06:	fa1f f984 	uxth.w	r9, r4
 8003a0a:	464a      	mov	r2, r9
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	6830      	ldr	r0, [r6, #0]
 8003a10:	f7ff fb04 	bl	800301c <HAL_SPI_Transmit_DMA>
 8003a14:	b108      	cbz	r0, 8003a1a <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x86>
      Error_Handler();
 8003a16:	f001 fb43 	bl	80050a0 <Error_Handler>
    // Alternative:   if (HAL_SPI_Transmit(phspi, (uint8_t*) pPixels, Width * sizeof(uint16_t)), 1000) != HAL_OK)
    pPixels += Width;
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8003a1a:	6833      	ldr	r3, [r6, #0]
    pPixels += Width;
 8003a1c:	44a0      	add	r8, r4
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8003a1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a20:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d0fb      	beq.n	8003a20 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x8c>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8003a28:	3501      	adds	r5, #1
 8003a2a:	b22d      	sxth	r5, r5
 8003a2c:	42af      	cmp	r7, r5
 8003a2e:	dcec      	bgt.n	8003a0a <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x76>
  }

  ILI9341_CSX_High();
 8003a30:	2201      	movs	r2, #1
 8003a32:	2102      	movs	r1, #2
 8003a34:	4804      	ldr	r0, [pc, #16]	; (8003a48 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xb4>)
}
 8003a36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ILI9341_CSX_High();
 8003a3a:	f7fd b931 	b.w	8000ca0 <HAL_GPIO_WritePin>
      op_size -=           linesize;
 8003a3e:	3a20      	subs	r2, #32
      SCB->DCCMVAC = op_addr;
 8003a40:	f8c0 3268 	str.w	r3, [r0, #616]	; 0x268
      op_size -=           linesize;
 8003a44:	e7d4      	b.n	80039f0 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x5c>
 8003a46:	bf00      	nop
 8003a48:	40020800 	.word	0x40020800
 8003a4c:	e000ed00 	.word	0xe000ed00
 8003a50:	200004c8 	.word	0x200004c8

08003a54 <ILI9341_SetDefaultState>:
  TextColor = TextColor_Default;
 8003a54:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <ILI9341_SetDefaultState+0x18>)
 8003a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a5a:	801a      	strh	r2, [r3, #0]
  TextBackgroundColor = TextBackgroundColor_Default;
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <ILI9341_SetDefaultState+0x1c>)
 8003a60:	801a      	strh	r2, [r3, #0]
  TextDrawMode = TextDrawMode_Default;
 8003a62:	2201      	movs	r2, #1
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <ILI9341_SetDefaultState+0x20>)
 8003a66:	701a      	strb	r2, [r3, #0]
}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	2000002c 	.word	0x2000002c
 8003a70:	200004bc 	.word	0x200004bc
 8003a74:	2000002e 	.word	0x2000002e

08003a78 <ILI9341_Initialize>:
{
 8003a78:	b508      	push	{r3, lr}
  phspi = i_phspi;
 8003a7a:	4ba4      	ldr	r3, [pc, #656]	; (8003d0c <ILI9341_Initialize+0x294>)
  UseBackBuffer = i_UseBackBuffer;
 8003a7c:	b2c9      	uxtb	r1, r1
  phspi = i_phspi;
 8003a7e:	6018      	str	r0, [r3, #0]
  UseBackBuffer = i_UseBackBuffer;
 8003a80:	4ba3      	ldr	r3, [pc, #652]	; (8003d10 <ILI9341_Initialize+0x298>)
 8003a82:	7019      	strb	r1, [r3, #0]
  if (UseBackBuffer)
 8003a84:	b149      	cbz	r1, 8003a9a <ILI9341_Initialize+0x22>
    pBackBuffer = calloc(1, ILI9341_Width * ILI9341_Height * sizeof(uint16_t));
 8003a86:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	f001 ff4c 	bl	8005928 <calloc>
 8003a90:	4ba0      	ldr	r3, [pc, #640]	; (8003d14 <ILI9341_Initialize+0x29c>)
 8003a92:	6018      	str	r0, [r3, #0]
    if (!pBackBuffer)
 8003a94:	b908      	cbnz	r0, 8003a9a <ILI9341_Initialize+0x22>
      Error_Handler();
 8003a96:	f001 fb03 	bl	80050a0 <Error_Handler>
  ILI9341_SetDefaultState();
 8003a9a:	f7ff ffdb 	bl	8003a54 <ILI9341_SetDefaultState>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_RESET);
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	489d      	ldr	r0, [pc, #628]	; (8003d18 <ILI9341_Initialize+0x2a0>)
 8003aa4:	f7fd f8fc 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	f7fc fde5 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_SET);
 8003aae:	2201      	movs	r2, #1
 8003ab0:	4899      	ldr	r0, [pc, #612]	; (8003d18 <ILI9341_Initialize+0x2a0>)
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	f7fd f8f4 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8003ab8:	2005      	movs	r0, #5
 8003aba:	f7fc fddd 	bl	8000678 <HAL_Delay>
  ILI9341_CSX_Low();
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	4895      	ldr	r0, [pc, #596]	; (8003d18 <ILI9341_Initialize+0x2a0>)
 8003ac4:	f7fd f8ec 	bl	8000ca0 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0xEF);
 8003ac8:	f06f 0010 	mvn.w	r0, #16
 8003acc:	f7ff ff4e 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x03);
 8003ad0:	2003      	movs	r0, #3
 8003ad2:	f7ff ff2b 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x80);
 8003ad6:	2080      	movs	r0, #128	; 0x80
 8003ad8:	f7ff ff28 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x02);
 8003adc:	2002      	movs	r0, #2
 8003ade:	f7ff ff25 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERB);
 8003ae2:	f06f 0030 	mvn.w	r0, #48	; 0x30
 8003ae6:	f7ff ff41 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8003aea:	2000      	movs	r0, #0
 8003aec:	f7ff ff1e 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0XC1);
 8003af0:	20c1      	movs	r0, #193	; 0xc1
 8003af2:	f7ff ff1b 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0X30);
 8003af6:	2030      	movs	r0, #48	; 0x30
 8003af8:	f7ff ff18 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWER_SEQ);
 8003afc:	f06f 0012 	mvn.w	r0, #18
 8003b00:	f7ff ff34 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x64);
 8003b04:	2064      	movs	r0, #100	; 0x64
 8003b06:	f7ff ff11 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8003b0a:	2003      	movs	r0, #3
 8003b0c:	f7ff ff0e 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0X12);
 8003b10:	2012      	movs	r0, #18
 8003b12:	f7ff ff0b 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0X81);
 8003b16:	2081      	movs	r0, #129	; 0x81
 8003b18:	f7ff ff08 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCA);
 8003b1c:	f06f 0017 	mvn.w	r0, #23
 8003b20:	f7ff ff24 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x85);
 8003b24:	2085      	movs	r0, #133	; 0x85
 8003b26:	f7ff ff01 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	f7ff fefe 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x78);
 8003b30:	2078      	movs	r0, #120	; 0x78
 8003b32:	f7ff fefb 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERA);
 8003b36:	f06f 0034 	mvn.w	r0, #52	; 0x34
 8003b3a:	f7ff ff17 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x39);
 8003b3e:	2039      	movs	r0, #57	; 0x39
 8003b40:	f7ff fef4 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x2C);
 8003b44:	202c      	movs	r0, #44	; 0x2c
 8003b46:	f7ff fef1 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	f7ff feee 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x34);
 8003b50:	2034      	movs	r0, #52	; 0x34
 8003b52:	f7ff feeb 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x02);
 8003b56:	2002      	movs	r0, #2
 8003b58:	f7ff fee8 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_PRC);
 8003b5c:	f06f 0008 	mvn.w	r0, #8
 8003b60:	f7ff ff04 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x20);
 8003b64:	2020      	movs	r0, #32
 8003b66:	f7ff fee1 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCB);
 8003b6a:	f06f 0015 	mvn.w	r0, #21
 8003b6e:	f7ff fefd 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8003b72:	2000      	movs	r0, #0
 8003b74:	f7ff feda 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f7ff fed7 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR1); // Power control
 8003b7e:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 8003b82:	f7ff fef3 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x23); // VRH=[5:0]
 8003b86:	2023      	movs	r0, #35	; 0x23
 8003b88:	f7ff fed0 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR2); // Power control
 8003b8c:	f06f 003e 	mvn.w	r0, #62	; 0x3e
 8003b90:	f7ff feec 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x10); // BT=[3:0]
 8003b94:	2010      	movs	r0, #16
 8003b96:	f7ff fec9 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR1); // VCOM control
 8003b9a:	f06f 003a 	mvn.w	r0, #58	; 0x3a
 8003b9e:	f7ff fee5 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x3e); // VMH=[6:0]
 8003ba2:	203e      	movs	r0, #62	; 0x3e
 8003ba4:	f7ff fec2 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x28); // VML=[6:0]
 8003ba8:	2028      	movs	r0, #40	; 0x28
 8003baa:	f7ff febf 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR2); // VCOM control 2
 8003bae:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8003bb2:	f7ff fedb 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x86); // VMF=[6:0]
 8003bb6:	2086      	movs	r0, #134	; 0x86
 8003bb8:	f7ff feb8 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_MADCTL); // Memory Access Control
 8003bbc:	2036      	movs	r0, #54	; 0x36
 8003bbe:	f7ff fed5 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x48);
 8003bc2:	2048      	movs	r0, #72	; 0x48
 8003bc4:	f7ff feb2 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VSCRSADD); // Vertical scroll
 8003bc8:	2037      	movs	r0, #55	; 0x37
 8003bca:	f7ff fecf 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write16(0); // Zero
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f7ff fec2 	bl	8003958 <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_PIXFMT);
 8003bd4:	203a      	movs	r0, #58	; 0x3a
 8003bd6:	f7ff fec9 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x55); // DPI=[6:4] DBI=[2:0]
 8003bda:	2055      	movs	r0, #85	; 0x55
 8003bdc:	f7ff fea6 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_FRMCTR1);
 8003be0:	f06f 004e 	mvn.w	r0, #78	; 0x4e
 8003be4:	f7ff fec2 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8003be8:	2000      	movs	r0, #0
 8003bea:	f7ff fe9f 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x18);
 8003bee:	2018      	movs	r0, #24
 8003bf0:	f7ff fe9c 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_DFUNCTR); // Display Function Control
 8003bf4:	f06f 0049 	mvn.w	r0, #73	; 0x49
 8003bf8:	f7ff feb8 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x08);
 8003bfc:	2008      	movs	r0, #8
 8003bfe:	f7ff fe95 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x82);
 8003c02:	2082      	movs	r0, #130	; 0x82
 8003c04:	f7ff fe92 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x27);
 8003c08:	2027      	movs	r0, #39	; 0x27
 8003c0a:	f7ff fe8f 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(0xF2); // 3Gamma
 8003c0e:	f06f 000d 	mvn.w	r0, #13
 8003c12:	f7ff feab 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x00); // Disable
 8003c16:	2000      	movs	r0, #0
 8003c18:	f7ff fe88 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GAMMASET); // Gamma curve selected
 8003c1c:	2026      	movs	r0, #38	; 0x26
 8003c1e:	f7ff fea5 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x01);
 8003c22:	2001      	movs	r0, #1
 8003c24:	f7ff fe82 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRP1); // Set Gamma
 8003c28:	f06f 001f 	mvn.w	r0, #31
 8003c2c:	f7ff fe9e 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x0F);
 8003c30:	200f      	movs	r0, #15
 8003c32:	f7ff fe7b 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8003c36:	2031      	movs	r0, #49	; 0x31
 8003c38:	f7ff fe78 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x2B);
 8003c3c:	202b      	movs	r0, #43	; 0x2b
 8003c3e:	f7ff fe75 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 8003c42:	200c      	movs	r0, #12
 8003c44:	f7ff fe72 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8003c48:	200e      	movs	r0, #14
 8003c4a:	f7ff fe6f 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x08);
 8003c4e:	2008      	movs	r0, #8
 8003c50:	f7ff fe6c 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x4E);
 8003c54:	204e      	movs	r0, #78	; 0x4e
 8003c56:	f7ff fe69 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0xF1);
 8003c5a:	20f1      	movs	r0, #241	; 0xf1
 8003c5c:	f7ff fe66 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x37);
 8003c60:	2037      	movs	r0, #55	; 0x37
 8003c62:	f7ff fe63 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x07);
 8003c66:	2007      	movs	r0, #7
 8003c68:	f7ff fe60 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x10);
 8003c6c:	2010      	movs	r0, #16
 8003c6e:	f7ff fe5d 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8003c72:	2003      	movs	r0, #3
 8003c74:	f7ff fe5a 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8003c78:	200e      	movs	r0, #14
 8003c7a:	f7ff fe57 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x09);
 8003c7e:	2009      	movs	r0, #9
 8003c80:	f7ff fe54 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8003c84:	2000      	movs	r0, #0
 8003c86:	f7ff fe51 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRN1); // Set Gamma
 8003c8a:	f06f 001e 	mvn.w	r0, #30
 8003c8e:	f7ff fe6d 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8003c92:	2000      	movs	r0, #0
 8003c94:	f7ff fe4a 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8003c98:	200e      	movs	r0, #14
 8003c9a:	f7ff fe47 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x14);
 8003c9e:	2014      	movs	r0, #20
 8003ca0:	f7ff fe44 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8003ca4:	2003      	movs	r0, #3
 8003ca6:	f7ff fe41 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x11);
 8003caa:	2011      	movs	r0, #17
 8003cac:	f7ff fe3e 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x07);
 8003cb0:	2007      	movs	r0, #7
 8003cb2:	f7ff fe3b 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8003cb6:	2031      	movs	r0, #49	; 0x31
 8003cb8:	f7ff fe38 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0xC1);
 8003cbc:	20c1      	movs	r0, #193	; 0xc1
 8003cbe:	f7ff fe35 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x48);
 8003cc2:	2048      	movs	r0, #72	; 0x48
 8003cc4:	f7ff fe32 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x08);
 8003cc8:	2008      	movs	r0, #8
 8003cca:	f7ff fe2f 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 8003cce:	200f      	movs	r0, #15
 8003cd0:	f7ff fe2c 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 8003cd4:	200c      	movs	r0, #12
 8003cd6:	f7ff fe29 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8003cda:	2031      	movs	r0, #49	; 0x31
 8003cdc:	f7ff fe26 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x36);
 8003ce0:	2036      	movs	r0, #54	; 0x36
 8003ce2:	f7ff fe23 	bl	800392c <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 8003ce6:	200f      	movs	r0, #15
 8003ce8:	f7ff fe20 	bl	800392c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_SLPOUT); // Exit sleep
 8003cec:	2011      	movs	r0, #17
 8003cee:	f7ff fe3d 	bl	800396c <ILI9341_WriteCommand>
  HAL_Delay(120);
 8003cf2:	2078      	movs	r0, #120	; 0x78
 8003cf4:	f7fc fcc0 	bl	8000678 <HAL_Delay>
  ILI9341_WriteCommand(ILI9341_DISPON); // Display on
 8003cf8:	2029      	movs	r0, #41	; 0x29
 8003cfa:	f7ff fe37 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_CSX_High();
 8003cfe:	2201      	movs	r2, #1
 8003d00:	2102      	movs	r1, #2
 8003d02:	4805      	ldr	r0, [pc, #20]	; (8003d18 <ILI9341_Initialize+0x2a0>)
}
 8003d04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ILI9341_CSX_High();
 8003d08:	f7fc bfca 	b.w	8000ca0 <HAL_GPIO_WritePin>
 8003d0c:	200004c8 	.word	0x200004c8
 8003d10:	200004be 	.word	0x200004be
 8003d14:	200004c0 	.word	0x200004c0
 8003d18:	40020800 	.word	0x40020800

08003d1c <ILI9341_SetAddrWindow>:
{
 8003d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d20:	f99d 8018 	ldrsb.w	r8, [sp, #24]
 8003d24:	4606      	mov	r6, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	4617      	mov	r7, r2
 8003d2a:	461d      	mov	r5, r3
  if (UseCS)
 8003d2c:	f1b8 0f00 	cmp.w	r8, #0
 8003d30:	d004      	beq.n	8003d3c <ILI9341_SetAddrWindow+0x20>
    ILI9341_CSX_Low();
 8003d32:	2200      	movs	r2, #0
 8003d34:	2102      	movs	r1, #2
 8003d36:	4816      	ldr	r0, [pc, #88]	; (8003d90 <ILI9341_SetAddrWindow+0x74>)
 8003d38:	f7fc ffb2 	bl	8000ca0 <HAL_GPIO_WritePin>
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 8003d3c:	4437      	add	r7, r6
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 8003d3e:	4425      	add	r5, r4
  ILI9341_WriteCommand(ILI9341_CASET); // Column addr set
 8003d40:	202a      	movs	r0, #42	; 0x2a
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 8003d42:	3f01      	subs	r7, #1
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 8003d44:	3d01      	subs	r5, #1
  ILI9341_WriteCommand(ILI9341_CASET); // Column addr set
 8003d46:	f7ff fe11 	bl	800396c <ILI9341_WriteCommand>
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 8003d4a:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 8003d4e:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
  ILI9341_Write16(Value >> 16);
 8003d52:	0c30      	lsrs	r0, r6, #16
 8003d54:	f7ff fe00 	bl	8003958 <ILI9341_Write16>
  ILI9341_Write16(Value);
 8003d58:	b2b0      	uxth	r0, r6
 8003d5a:	f7ff fdfd 	bl	8003958 <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_PASET); // Row addr set
 8003d5e:	202b      	movs	r0, #43	; 0x2b
 8003d60:	f7ff fe04 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write16(Value >> 16);
 8003d64:	0c20      	lsrs	r0, r4, #16
 8003d66:	f7ff fdf7 	bl	8003958 <ILI9341_Write16>
  ILI9341_Write16(Value);
 8003d6a:	b2a0      	uxth	r0, r4
 8003d6c:	f7ff fdf4 	bl	8003958 <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_RAMWR); // Write to RAM
 8003d70:	202c      	movs	r0, #44	; 0x2c
 8003d72:	f7ff fdfb 	bl	800396c <ILI9341_WriteCommand>
  if (UseCS)
 8003d76:	f1b8 0f00 	cmp.w	r8, #0
 8003d7a:	d006      	beq.n	8003d8a <ILI9341_SetAddrWindow+0x6e>
    ILI9341_CSX_High();
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	2102      	movs	r1, #2
 8003d80:	4803      	ldr	r0, [pc, #12]	; (8003d90 <ILI9341_SetAddrWindow+0x74>)
}
 8003d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ILI9341_CSX_High();
 8003d86:	f7fc bf8b 	b.w	8000ca0 <HAL_GPIO_WritePin>
}
 8003d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d8e:	bf00      	nop
 8003d90:	40020800 	.word	0x40020800

08003d94 <ILI9341_DrawPixel>:
{
 8003d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d96:	461d      	mov	r5, r3
  if (UseBackBuffer)
 8003d98:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <ILI9341_DrawPixel+0x6c>)
{
 8003d9a:	4616      	mov	r6, r2
 8003d9c:	460c      	mov	r4, r1
  if (UseBackBuffer)
 8003d9e:	781a      	ldrb	r2, [r3, #0]
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 8003da0:	b287      	uxth	r7, r0
  if (UseBackBuffer)
 8003da2:	b172      	cbz	r2, 8003dc2 <ILI9341_DrawPixel+0x2e>
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 8003da4:	2fef      	cmp	r7, #239	; 0xef
 8003da6:	d80a      	bhi.n	8003dbe <ILI9341_DrawPixel+0x2a>
 8003da8:	b28b      	uxth	r3, r1
 8003daa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003dae:	d206      	bcs.n	8003dbe <ILI9341_DrawPixel+0x2a>
  pBackBuffer[X + Y * ILI9341_Width] = Color;
 8003db0:	21f0      	movs	r1, #240	; 0xf0
 8003db2:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <ILI9341_DrawPixel+0x70>)
 8003db4:	fb14 0001 	smlabb	r0, r4, r1, r0
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
}
 8003dbe:	b003      	add	sp, #12
 8003dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (UseCS)
 8003dc2:	b11d      	cbz	r5, 8003dcc <ILI9341_DrawPixel+0x38>
    ILI9341_CSX_Low();
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	4810      	ldr	r0, [pc, #64]	; (8003e08 <ILI9341_DrawPixel+0x74>)
 8003dc8:	f7fc ff6a 	bl	8000ca0 <HAL_GPIO_WritePin>
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 8003dcc:	2fef      	cmp	r7, #239	; 0xef
 8003dce:	d8f6      	bhi.n	8003dbe <ILI9341_DrawPixel+0x2a>
 8003dd0:	b2a1      	uxth	r1, r4
 8003dd2:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
 8003dd6:	d2f2      	bcs.n	8003dbe <ILI9341_DrawPixel+0x2a>
  ILI9341_SetAddrWindow(X, Y, 1, 1, 0);
 8003dd8:	2301      	movs	r3, #1
 8003dda:	2400      	movs	r4, #0
 8003ddc:	4638      	mov	r0, r7
 8003dde:	461a      	mov	r2, r3
 8003de0:	9400      	str	r4, [sp, #0]
 8003de2:	f7ff ff9b 	bl	8003d1c <ILI9341_SetAddrWindow>
  ILI9341_Write16(Color);
 8003de6:	4630      	mov	r0, r6
 8003de8:	f7ff fdb6 	bl	8003958 <ILI9341_Write16>
  if (UseCS)
 8003dec:	2d00      	cmp	r5, #0
 8003dee:	d0e6      	beq.n	8003dbe <ILI9341_DrawPixel+0x2a>
    ILI9341_CSX_Low();
 8003df0:	4622      	mov	r2, r4
 8003df2:	2102      	movs	r1, #2
 8003df4:	4804      	ldr	r0, [pc, #16]	; (8003e08 <ILI9341_DrawPixel+0x74>)
}
 8003df6:	b003      	add	sp, #12
 8003df8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ILI9341_CSX_Low();
 8003dfc:	f7fc bf50 	b.w	8000ca0 <HAL_GPIO_WritePin>
 8003e00:	200004be 	.word	0x200004be
 8003e04:	200004c0 	.word	0x200004c0
 8003e08:	40020800 	.word	0x40020800

08003e0c <ILI9341_DrawPixels_MSBFirst>:
  }
}

void ILI9341_DrawPixels_MSBFirst(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t *pPixels)
// Supplied pixel data must be byte swapped i.e. MSB first.
{
 8003e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (UseBackBuffer)
 8003e10:	4d26      	ldr	r5, [pc, #152]	; (8003eac <ILI9341_DrawPixels_MSBFirst+0xa0>)
{
 8003e12:	4680      	mov	r8, r0
 8003e14:	460e      	mov	r6, r1
 8003e16:	4617      	mov	r7, r2
  if (UseBackBuffer)
 8003e18:	782d      	ldrb	r5, [r5, #0]
{
 8003e1a:	461c      	mov	r4, r3
 8003e1c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (UseBackBuffer)
 8003e20:	b3c5      	cbz	r5, 8003e94 <ILI9341_DrawPixels_MSBFirst+0x88>
  if ((i_Width == 0) || (i_Height == 0))
 8003e22:	b18a      	cbz	r2, 8003e48 <ILI9341_DrawPixels_MSBFirst+0x3c>
 8003e24:	b183      	cbz	r3, 8003e48 <ILI9341_DrawPixels_MSBFirst+0x3c>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8003e26:	4434      	add	r4, r6
 8003e28:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4630      	mov	r0, r6
 8003e30:	f7ff fd67 	bl	8003902 <Clamp_uint16>
 8003e34:	4605      	mov	r5, r0
 8003e36:	b2a4      	uxth	r4, r4
 8003e38:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f7ff fd5f 	bl	8003902 <Clamp_uint16>
 8003e44:	4285      	cmp	r5, r0
 8003e46:	d302      	bcc.n	8003e4e <ILI9341_DrawPixels_MSBFirst+0x42>
    ILI9341_DrawPixels_MSBFirst_ToBackBuffer(X, Y, Width, Height, pPixels);
  else
    ILI9341_DrawPixels_MSBFirst_ToDisplay(X, Y, Width, Height, pPixels);
}
 8003e48:	b003      	add	sp, #12
 8003e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8003e4e:	4b18      	ldr	r3, [pc, #96]	; (8003eb0 <ILI9341_DrawPixels_MSBFirst+0xa4>)
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8003e50:	22f0      	movs	r2, #240	; 0xf0
 8003e52:	2100      	movs	r1, #0
 8003e54:	4640      	mov	r0, r8
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f44f 7af0 	mov.w	sl, #480	; 0x1e0
 8003e5c:	9301      	str	r3, [sp, #4]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8003e5e:	f7ff fd50 	bl	8003902 <Clamp_uint16>
 8003e62:	eb08 0307 	add.w	r3, r8, r7
 8003e66:	fb0a fa05 	mul.w	sl, sl, r5
 8003e6a:	4606      	mov	r6, r0
 8003e6c:	fa1f fb83 	uxth.w	fp, r3
 8003e70:	22f0      	movs	r2, #240	; 0xf0
 8003e72:	2100      	movs	r1, #0
 8003e74:	4658      	mov	r0, fp
 8003e76:	f7ff fd44 	bl	8003902 <Clamp_uint16>
 8003e7a:	4286      	cmp	r6, r0
 8003e7c:	d301      	bcc.n	8003e82 <ILI9341_DrawPixels_MSBFirst+0x76>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8003e7e:	3501      	adds	r5, #1
 8003e80:	e7da      	b.n	8003e38 <ILI9341_DrawPixels_MSBFirst+0x2c>
      pLine[X] = *pPixel++;
 8003e82:	9b01      	ldr	r3, [sp, #4]
 8003e84:	f839 1b02 	ldrh.w	r1, [r9], #2
 8003e88:	eb03 020a 	add.w	r2, r3, sl
 8003e8c:	f822 1016 	strh.w	r1, [r2, r6, lsl #1]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8003e90:	3601      	adds	r6, #1
 8003e92:	e7ed      	b.n	8003e70 <ILI9341_DrawPixels_MSBFirst+0x64>
  if ((Width == 0) || (Height == 0))
 8003e94:	2a00      	cmp	r2, #0
 8003e96:	d0d7      	beq.n	8003e48 <ILI9341_DrawPixels_MSBFirst+0x3c>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0d5      	beq.n	8003e48 <ILI9341_DrawPixels_MSBFirst+0x3c>
 8003e9c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
}
 8003ea0:	b003      	add	sp, #12
 8003ea2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea6:	f7ff bd75 	b.w	8003994 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0>
 8003eaa:	bf00      	nop
 8003eac:	200004be 	.word	0x200004be
 8003eb0:	200004c0 	.word	0x200004c0

08003eb4 <ILI9341_DrawBar_ToBackBuffer>:

  ILI9341_CSX_High();
}

void ILI9341_DrawBar_ToBackBuffer(uint16_t i_X, uint16_t i_Y, uint16_t i_Width, uint16_t i_Height, uint16_t i_Color)
{
 8003eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb8:	460e      	mov	r6, r1
 8003eba:	461c      	mov	r4, r3
 8003ebc:	4607      	mov	r7, r0
  uint16_t *pLine;
  uint16_t Color_MSBFirst;

  Color_MSBFirst = SwapBytes(i_Color);
 8003ebe:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30

  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8003ec2:	4434      	add	r4, r6
{
 8003ec4:	4690      	mov	r8, r2
  Color_MSBFirst = SwapBytes(i_Color);
 8003ec6:	f7ff fd19 	bl	80038fc <SwapBytes>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8003eca:	f44f 72a0 	mov.w	r2, #320	; 0x140
  Color_MSBFirst = SwapBytes(i_Color);
 8003ece:	4682      	mov	sl, r0
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	b2a4      	uxth	r4, r4
 8003ed6:	f7ff fd14 	bl	8003902 <Clamp_uint16>
 8003eda:	4605      	mov	r5, r0
 8003edc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	f7ff fd0d 	bl	8003902 <Clamp_uint16>
 8003ee8:	42a8      	cmp	r0, r5
 8003eea:	d802      	bhi.n	8003ef2 <ILI9341_DrawBar_ToBackBuffer+0x3e>
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
    {
      pLine[X] = Color_MSBFirst;
    }
  }
}
 8003eec:	b003      	add	sp, #12
 8003eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8003ef2:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <ILI9341_DrawBar_ToBackBuffer+0x80>)
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8003ef4:	22f0      	movs	r2, #240	; 0xf0
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	4638      	mov	r0, r7
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
 8003f00:	9301      	str	r3, [sp, #4]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8003f02:	f7ff fcfe 	bl	8003902 <Clamp_uint16>
 8003f06:	eb07 0308 	add.w	r3, r7, r8
 8003f0a:	fb09 f905 	mul.w	r9, r9, r5
 8003f0e:	4606      	mov	r6, r0
 8003f10:	fa1f fb83 	uxth.w	fp, r3
 8003f14:	22f0      	movs	r2, #240	; 0xf0
 8003f16:	2100      	movs	r1, #0
 8003f18:	4658      	mov	r0, fp
 8003f1a:	f7ff fcf2 	bl	8003902 <Clamp_uint16>
 8003f1e:	42b0      	cmp	r0, r6
 8003f20:	d801      	bhi.n	8003f26 <ILI9341_DrawBar_ToBackBuffer+0x72>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8003f22:	3501      	adds	r5, #1
 8003f24:	e7da      	b.n	8003edc <ILI9341_DrawBar_ToBackBuffer+0x28>
      pLine[X] = Color_MSBFirst;
 8003f26:	9b01      	ldr	r3, [sp, #4]
 8003f28:	eb03 0209 	add.w	r2, r3, r9
 8003f2c:	f822 a016 	strh.w	sl, [r2, r6, lsl #1]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8003f30:	3601      	adds	r6, #1
 8003f32:	e7ef      	b.n	8003f14 <ILI9341_DrawBar_ToBackBuffer+0x60>
 8003f34:	200004c0 	.word	0x200004c0

08003f38 <ILI9341_DrawBar>:

void ILI9341_DrawBar(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Color)
{
 8003f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (UseBackBuffer)
 8003f3c:	4d35      	ldr	r5, [pc, #212]	; (8004014 <ILI9341_DrawBar+0xdc>)
{
 8003f3e:	4607      	mov	r7, r0
 8003f40:	460e      	mov	r6, r1
 8003f42:	4614      	mov	r4, r2
  if (UseBackBuffer)
 8003f44:	782d      	ldrb	r5, [r5, #0]
{
 8003f46:	4698      	mov	r8, r3
 8003f48:	f8bd 9020 	ldrh.w	r9, [sp, #32]
  if (UseBackBuffer)
 8003f4c:	b12d      	cbz	r5, 8003f5a <ILI9341_DrawBar+0x22>
    ILI9341_DrawBar_ToBackBuffer(X, Y, Width, Height, Color);
 8003f4e:	f8cd 9020 	str.w	r9, [sp, #32]
  else
    ILI9341_DrawBar_ToDisplay(X, Y, Width, Height, Color);
}
 8003f52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ILI9341_DrawBar_ToBackBuffer(X, Y, Width, Height, Color);
 8003f56:	f7ff bfad 	b.w	8003eb4 <ILI9341_DrawBar_ToBackBuffer>
  if ((Width == 0) || (Height == 0))
 8003f5a:	2a00      	cmp	r2, #0
 8003f5c:	d058      	beq.n	8004010 <ILI9341_DrawBar+0xd8>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d056      	beq.n	8004010 <ILI9341_DrawBar+0xd8>
  ILI9341_CSX_Low();
 8003f62:	462a      	mov	r2, r5
 8003f64:	2102      	movs	r1, #2
 8003f66:	482c      	ldr	r0, [pc, #176]	; (8004018 <ILI9341_DrawBar+0xe0>)
 8003f68:	f7fc fe9a 	bl	8000ca0 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8003f6c:	202a      	movs	r0, #42	; 0x2a
 8003f6e:	f7ff fcfd 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 8003f72:	4638      	mov	r0, r7
 8003f74:	f7ff fcf0 	bl	8003958 <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 8003f78:	1e60      	subs	r0, r4, #1
 8003f7a:	4438      	add	r0, r7
 8003f7c:	b280      	uxth	r0, r0
 8003f7e:	f7ff fceb 	bl	8003958 <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 8003f82:	202b      	movs	r0, #43	; 0x2b
 8003f84:	f7ff fcf2 	bl	800396c <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 8003f88:	4630      	mov	r0, r6
 8003f8a:	f7ff fce5 	bl	8003958 <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 8003f8e:	f108 30ff 	add.w	r0, r8, #4294967295
 8003f92:	4430      	add	r0, r6
 8003f94:	b280      	uxth	r0, r0
 8003f96:	f7ff fcdf 	bl	8003958 <ILI9341_Write16>
  uint16_t Color_MSBFirst = SwapBytes(Color);
 8003f9a:	4648      	mov	r0, r9
 8003f9c:	f7ff fcae 	bl	80038fc <SwapBytes>
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 8003fa0:	4a1e      	ldr	r2, [pc, #120]	; (800401c <ILI9341_DrawBar+0xe4>)
 8003fa2:	b22b      	sxth	r3, r5
 8003fa4:	3501      	adds	r5, #1
 8003fa6:	42a3      	cmp	r3, r4
 8003fa8:	db2f      	blt.n	800400a <ILI9341_DrawBar+0xd2>
    uint32_t NumBytes = Width * 2;
 8003faa:	0064      	lsls	r4, r4, #1
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8003fac:	2500      	movs	r5, #0
      SCB->DCCMVAC = op_addr;
 8003fae:	4f1c      	ldr	r7, [pc, #112]	; (8004020 <ILI9341_DrawBar+0xe8>)
  ILI9341_WriteCommand(0x2C); // Memory write.
 8003fb0:	202c      	movs	r0, #44	; 0x2c
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*) ColumnColors, NumBytes) != HAL_OK)
 8003fb2:	fa1f f984 	uxth.w	r9, r4
 8003fb6:	4e1b      	ldr	r6, [pc, #108]	; (8004024 <ILI9341_DrawBar+0xec>)
  ILI9341_WriteCommand(0x2C); // Memory write.
 8003fb8:	f7ff fcd8 	bl	800396c <ILI9341_WriteCommand>
    uint32_t op_addr = (uint32_t) addr;
 8003fbc:	4917      	ldr	r1, [pc, #92]	; (800401c <ILI9341_DrawBar+0xe4>)
  __ASM volatile ("dsb 0xF":::"memory");
 8003fbe:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
 8003fc2:	4623      	mov	r3, r4
      op_size -=           linesize;
 8003fc4:	3b20      	subs	r3, #32
      SCB->DCCMVAC = op_addr;
 8003fc6:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8003fca:	3120      	adds	r1, #32
    while (op_size > 0) {
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	dcf9      	bgt.n	8003fc4 <ILI9341_DrawBar+0x8c>
 8003fd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003fd4:	f3bf 8f6f 	isb	sy
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*) ColumnColors, NumBytes) != HAL_OK)
 8003fd8:	4910      	ldr	r1, [pc, #64]	; (800401c <ILI9341_DrawBar+0xe4>)
 8003fda:	464a      	mov	r2, r9
 8003fdc:	6830      	ldr	r0, [r6, #0]
 8003fde:	f7ff f81d 	bl	800301c <HAL_SPI_Transmit_DMA>
 8003fe2:	b108      	cbz	r0, 8003fe8 <ILI9341_DrawBar+0xb0>
      Error_Handler();
 8003fe4:	f001 f85c 	bl	80050a0 <Error_Handler>
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8003fe8:	6833      	ldr	r3, [r6, #0]
 8003fea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fec:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d0fb      	beq.n	8003fec <ILI9341_DrawBar+0xb4>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8003ff4:	3501      	adds	r5, #1
 8003ff6:	b22d      	sxth	r5, r5
 8003ff8:	4545      	cmp	r5, r8
 8003ffa:	dbdf      	blt.n	8003fbc <ILI9341_DrawBar+0x84>
  ILI9341_CSX_High();
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	2102      	movs	r1, #2
 8004000:	4805      	ldr	r0, [pc, #20]	; (8004018 <ILI9341_DrawBar+0xe0>)
}
 8004002:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ILI9341_CSX_High();
 8004006:	f7fc be4b 	b.w	8000ca0 <HAL_GPIO_WritePin>
    ColumnColors[ColumnIndex] = Color_MSBFirst;
 800400a:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 800400e:	e7c8      	b.n	8003fa2 <ILI9341_DrawBar+0x6a>
}
 8004010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004014:	200004be 	.word	0x200004be
 8004018:	40020800 	.word	0x40020800
 800401c:	2000023c 	.word	0x2000023c
 8004020:	e000ed00 	.word	0xe000ed00
 8004024:	200004c8 	.word	0x200004c8

08004028 <ILI9341_Clear>:

void ILI9341_Clear(uint16_t Color)
{
 8004028:	b507      	push	{r0, r1, r2, lr}
  ILI9341_DrawBar(0, 0, ILI9341_Width, ILI9341_Height, Color);
 800402a:	2100      	movs	r1, #0
 800402c:	9000      	str	r0, [sp, #0]
 800402e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004032:	22f0      	movs	r2, #240	; 0xf0
 8004034:	4608      	mov	r0, r1
 8004036:	f7ff ff7f 	bl	8003f38 <ILI9341_DrawBar>
}
 800403a:	b003      	add	sp, #12
 800403c:	f85d fb04 	ldr.w	pc, [sp], #4

08004040 <ILI9341_SetFont>:

const GFXfont *ILI9341_SetFont(const GFXfont *i_pFont)
{
  const GFXfont *Result;

  Result = pFont;
 8004040:	4b02      	ldr	r3, [pc, #8]	; (800404c <ILI9341_SetFont+0xc>)
 8004042:	681a      	ldr	r2, [r3, #0]
  pFont = i_pFont;
 8004044:	6018      	str	r0, [r3, #0]
  return Result;
}
 8004046:	4610      	mov	r0, r2
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	200004c4 	.word	0x200004c4

08004050 <ILI9341_GetFontYSpacing>:

uint8_t ILI9341_GetFontYSpacing()
{
  return pFont->yAdvance;
 8004050:	4b01      	ldr	r3, [pc, #4]	; (8004058 <ILI9341_GetFontYSpacing+0x8>)
 8004052:	681b      	ldr	r3, [r3, #0]
}
 8004054:	7a98      	ldrb	r0, [r3, #10]
 8004056:	4770      	bx	lr
 8004058:	200004c4 	.word	0x200004c4

0800405c <GetCharWidth>:

static uint8_t IsNonPrintingChar(uint8_t Ch)
{
  return ((Ch < pFont->first) || (Ch > pFont->last));
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <GetCharWidth+0x30>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	7a1a      	ldrb	r2, [r3, #8]
 8004062:	4290      	cmp	r0, r2
 8004064:	d310      	bcc.n	8004088 <GetCharWidth+0x2c>
}

uint16_t GetCharWidth(uint8_t Ch)
{
  if (IsNonPrintingChar(Ch))
 8004066:	7a59      	ldrb	r1, [r3, #9]
 8004068:	4281      	cmp	r1, r0
 800406a:	d30d      	bcc.n	8004088 <GetCharWidth+0x2c>
    return 0;

  Ch -= pFont->first;
 800406c:	1a80      	subs	r0, r0, r2
  GFXglyph *pGlyph = &pFont->pGlyph[Ch];
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	b2c0      	uxtb	r0, r0
 8004072:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  uint8_t w = pGlyph->width;
 8004076:	789a      	ldrb	r2, [r3, #2]
  int8_t xo = pGlyph->xOffset;
 8004078:	f993 0005 	ldrsb.w	r0, [r3, #5]

  if (w == 0)
 800407c:	b90a      	cbnz	r2, 8004082 <GetCharWidth+0x26>
    return pGlyph->xAdvance;
 800407e:	7918      	ldrb	r0, [r3, #4]
 8004080:	4770      	bx	lr

  return xo + w;
 8004082:	4410      	add	r0, r2
 8004084:	b280      	uxth	r0, r0
 8004086:	4770      	bx	lr
    return 0;
 8004088:	2000      	movs	r0, #0
}
 800408a:	4770      	bx	lr
 800408c:	200004c4 	.word	0x200004c4

08004090 <ILI9341_GetTextWidth>:

uint16_t ILI9341_GetTextWidth(const char *Text)
{
 8004090:	b570      	push	{r4, r5, r6, lr}
 8004092:	4604      	mov	r4, r0

  NumChars = strlen(Text);

  pText = Text;

  TotalWidth=0;
 8004094:	2500      	movs	r5, #0
  NumChars = strlen(Text);
 8004096:	f7fc f8d3 	bl	8000240 <strlen>

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 800409a:	fa14 f680 	uxtah	r6, r4, r0
 800409e:	42b4      	cmp	r4, r6
 80040a0:	d101      	bne.n	80040a6 <ILI9341_GetTextWidth+0x16>
    TotalWidth += GetCharWidth(*pText++);

  return TotalWidth;
}
 80040a2:	4628      	mov	r0, r5
 80040a4:	bd70      	pop	{r4, r5, r6, pc}
    TotalWidth += GetCharWidth(*pText++);
 80040a6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80040aa:	f7ff ffd7 	bl	800405c <GetCharWidth>
 80040ae:	4405      	add	r5, r0
 80040b0:	b2ad      	uxth	r5, r5
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80040b2:	e7f4      	b.n	800409e <ILI9341_GetTextWidth+0xe>

080040b4 <ILI9341_DrawCharAtXY>:
uint8_t ILI9341_DrawCharAtXY(uint8_t Ch, uint16_t X, uint16_t Y, uint16_t Color)
// X: X position of left edge of char.
// Y: Y position of line on which the char sits. The char may go below this line (e.g. g j p q y).
// Returns required X advance.
// Based on Adafruit_GFX.cpp.
{
 80040b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b8:	4699      	mov	r9, r3
  uint8_t *pBitmap;
  uint16_t Color_MSBFirst, TextBackgroundColor_MSBFirst;
  uint16_t *pMemChar, *pMemCharPixel;
  uint8_t CharWidth, CharHeight;

  if (!pFont)
 80040ba:	4b9f      	ldr	r3, [pc, #636]	; (8004338 <ILI9341_DrawCharAtXY+0x284>)
{
 80040bc:	b08d      	sub	sp, #52	; 0x34
 80040be:	4693      	mov	fp, r2
  if (!pFont)
 80040c0:	681b      	ldr	r3, [r3, #0]
{
 80040c2:	9107      	str	r1, [sp, #28]
  if (!pFont)
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8134 	beq.w	8004332 <ILI9341_DrawCharAtXY+0x27e>
  return ((Ch < pFont->first) || (Ch > pFont->last));
 80040ca:	7a1a      	ldrb	r2, [r3, #8]
 80040cc:	4290      	cmp	r0, r2
 80040ce:	f0c0 8130 	bcc.w	8004332 <ILI9341_DrawCharAtXY+0x27e>
    return 0;
  if (IsNonPrintingChar(Ch))
 80040d2:	7a59      	ldrb	r1, [r3, #9]
 80040d4:	4281      	cmp	r1, r0
 80040d6:	f0c0 812c 	bcc.w	8004332 <ILI9341_DrawCharAtXY+0x27e>
    return 0;

  Ch -= pFont->first;
 80040da:	1a80      	subs	r0, r0, r2
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 80040dc:	4a97      	ldr	r2, [pc, #604]	; (800433c <ILI9341_DrawCharAtXY+0x288>)
    Y -= (pFont->yOffsetMin / 2);
 80040de:	f993 700b 	ldrsb.w	r7, [r3, #11]
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 80040e2:	7812      	ldrb	r2, [r2, #0]
  Ch -= pFont->first;
 80040e4:	b2c0      	uxtb	r0, r0
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 80040e6:	2a02      	cmp	r2, #2

  pGlyph = &pFont->pGlyph[Ch];
 80040e8:	685a      	ldr	r2, [r3, #4]
    Y -= (pFont->yOffsetMin / 2);
 80040ea:	bf08      	it	eq
 80040ec:	eb07 71d7 	addeq.w	r1, r7, r7, lsr #31
  pBitmap = pFont->pBitmap;

  bo = pGlyph->bitmapOffset;
 80040f0:	f832 5030 	ldrh.w	r5, [r2, r0, lsl #3]
    Y -= (pFont->yOffsetMin / 2);
 80040f4:	bf08      	it	eq
 80040f6:	ebab 0b61 	subeq.w	fp, fp, r1, asr #1
  pGlyph = &pFont->pGlyph[Ch];
 80040fa:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    Y -= (pFont->yOffsetMin / 2);
 80040fe:	bf08      	it	eq
 8004100:	fa1f fb8b 	uxtheq.w	fp, fp
  pGlyph = &pFont->pGlyph[Ch];
 8004104:	9103      	str	r1, [sp, #12]
  w = pGlyph->width;
 8004106:	9a03      	ldr	r2, [sp, #12]
  pBitmap = pFont->pBitmap;
 8004108:	6819      	ldr	r1, [r3, #0]
  w = pGlyph->width;
 800410a:	7894      	ldrb	r4, [r2, #2]
  h = pGlyph->height;
 800410c:	78d2      	ldrb	r2, [r2, #3]
  pBitmap = pFont->pBitmap;
 800410e:	9106      	str	r1, [sp, #24]
  h = pGlyph->height;
 8004110:	9204      	str	r2, [sp, #16]
  xo = pGlyph->xOffset;
 8004112:	9a03      	ldr	r2, [sp, #12]
 8004114:	f992 2005 	ldrsb.w	r2, [r2, #5]
 8004118:	9205      	str	r2, [sp, #20]
  yo = pGlyph->yOffset;
 800411a:	9a03      	ldr	r2, [sp, #12]
 800411c:	f992 8006 	ldrsb.w	r8, [r2, #6]
  bits = 0;
  bit = 0;
  yo_min = pFont->yOffsetMin;
  yo_max = pFont->yOffsetMax;

  switch(TextDrawMode)
 8004120:	4a87      	ldr	r2, [pc, #540]	; (8004340 <ILI9341_DrawCharAtXY+0x28c>)
 8004122:	7812      	ldrb	r2, [r2, #0]
 8004124:	2a02      	cmp	r2, #2
 8004126:	d058      	beq.n	80041da <ILI9341_DrawCharAtXY+0x126>
 8004128:	2a03      	cmp	r2, #3
 800412a:	f000 80b9 	beq.w	80042a0 <ILI9341_DrawCharAtXY+0x1ec>
 800412e:	2a01      	cmp	r2, #1
 8004130:	d128      	bne.n	8004184 <ILI9341_DrawCharAtXY+0xd0>
  {
    case tdmNone:
      break;

    case tdmThisCharBar:
      Color_MSBFirst = SwapBytes(Color);
 8004132:	4648      	mov	r0, r9
 8004134:	f7ff fbe2 	bl	80038fc <SwapBytes>
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8004138:	4b82      	ldr	r3, [pc, #520]	; (8004344 <ILI9341_DrawCharAtXY+0x290>)
      Color_MSBFirst = SwapBytes(Color);
 800413a:	4682      	mov	sl, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 800413c:	8818      	ldrh	r0, [r3, #0]
 800413e:	f7ff fbdd 	bl	80038fc <SwapBytes>
      pMemChar = (uint16_t *)malloc(w * h * 2);
 8004142:	9b04      	ldr	r3, [sp, #16]
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8004144:	4681      	mov	r9, r0
      pMemChar = (uint16_t *)malloc(w * h * 2);
 8004146:	fb14 f003 	smulbb	r0, r4, r3
 800414a:	0040      	lsls	r0, r0, #1
 800414c:	f001 fc18 	bl	8005980 <malloc>
      pMemCharPixel = pMemChar;

      for (yy = 0; yy < h; ++yy)
 8004150:	2100      	movs	r1, #0
 8004152:	0063      	lsls	r3, r4, #1
      pMemChar = (uint16_t *)malloc(w * h * 2);
 8004154:	4606      	mov	r6, r0
      pMemCharPixel = pMemChar;
 8004156:	4607      	mov	r7, r0
  bit = 0;
 8004158:	468c      	mov	ip, r1
  bits = 0;
 800415a:	460a      	mov	r2, r1
 800415c:	9308      	str	r3, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 800415e:	b2c8      	uxtb	r0, r1
 8004160:	9b04      	ldr	r3, [sp, #16]
 8004162:	4283      	cmp	r3, r0
 8004164:	d834      	bhi.n	80041d0 <ILI9341_DrawCharAtXY+0x11c>
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
          ++pMemCharPixel;
          bits <<= 1;
        }
      }
      ILI9341_DrawPixels_MSBFirst(X + xo, Y + yo, w, h, pMemChar);
 8004166:	9b05      	ldr	r3, [sp, #20]
 8004168:	eb0b 0108 	add.w	r1, fp, r8
 800416c:	9807      	ldr	r0, [sp, #28]
 800416e:	4622      	mov	r2, r4
 8004170:	b289      	uxth	r1, r1
 8004172:	9600      	str	r6, [sp, #0]
 8004174:	4418      	add	r0, r3
 8004176:	9b04      	ldr	r3, [sp, #16]
 8004178:	b280      	uxth	r0, r0
 800417a:	f7ff fe47 	bl	8003e0c <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 800417e:	4630      	mov	r0, r6
          ++pMemCharPixel;
          bits <<= 1;
        }
      }
      ILI9341_DrawPixels_MSBFirst(X, Y + yo_min, CharWidth, CharHeight, pMemChar);
      free(pMemChar);
 8004180:	f001 fc06 	bl	8005990 <free>
      }
      ILI9341_CSX_High();
      break;
  }

  if (w == 0)
 8004184:	2c00      	cmp	r4, #0
 8004186:	f040 80d0 	bne.w	800432a <ILI9341_DrawCharAtXY+0x276>
    return pGlyph->xAdvance;
 800418a:	9b03      	ldr	r3, [sp, #12]
 800418c:	7918      	ldrb	r0, [r3, #4]
  return xo + w;
}
 800418e:	b00d      	add	sp, #52	; 0x34
 8004190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (!(bit++ & 7))
 8004194:	f013 0f07 	tst.w	r3, #7
 8004198:	f103 0c01 	add.w	ip, r3, #1
            bits = pBitmap[bo++];
 800419c:	bf04      	itt	eq
 800419e:	9a06      	ldreq	r2, [sp, #24]
 80041a0:	1c6b      	addeq	r3, r5, #1
          if (!(bit++ & 7))
 80041a2:	fa5f fc8c 	uxtb.w	ip, ip
            bits = pBitmap[bo++];
 80041a6:	bf04      	itt	eq
 80041a8:	5d52      	ldrbeq	r2, [r2, r5]
 80041aa:	b29d      	uxtheq	r5, r3
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 80041ac:	f012 0f80 	tst.w	r2, #128	; 0x80
          bits <<= 1;
 80041b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 80041b4:	bf14      	ite	ne
 80041b6:	4653      	movne	r3, sl
 80041b8:	464b      	moveq	r3, r9
          bits <<= 1;
 80041ba:	b2d2      	uxtb	r2, r2
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 80041bc:	f82e 3b02 	strh.w	r3, [lr], #2
          if (!(bit++ & 7))
 80041c0:	4663      	mov	r3, ip
        for (xx = 0; xx < w; ++xx)
 80041c2:	4298      	cmp	r0, r3
 80041c4:	d1e6      	bne.n	8004194 <ILI9341_DrawCharAtXY+0xe0>
 80041c6:	9b08      	ldr	r3, [sp, #32]
 80041c8:	3101      	adds	r1, #1
 80041ca:	4684      	mov	ip, r0
 80041cc:	441f      	add	r7, r3
      for (yy = 0; yy < h; ++yy)
 80041ce:	e7c6      	b.n	800415e <ILI9341_DrawCharAtXY+0xaa>
 80041d0:	4663      	mov	r3, ip
 80041d2:	46be      	mov	lr, r7
        for (xx = 0; xx < w; ++xx)
 80041d4:	1918      	adds	r0, r3, r4
 80041d6:	b2c0      	uxtb	r0, r0
 80041d8:	e7f3      	b.n	80041c2 <ILI9341_DrawCharAtXY+0x10e>
  yo_max = pFont->yOffsetMax;
 80041da:	f993 600c 	ldrsb.w	r6, [r3, #12]
      Color_MSBFirst = SwapBytes(Color);
 80041de:	4648      	mov	r0, r9
 80041e0:	f7ff fb8c 	bl	80038fc <SwapBytes>
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 80041e4:	4b57      	ldr	r3, [pc, #348]	; (8004344 <ILI9341_DrawCharAtXY+0x290>)
      CharHeight = yo_max - yo_min + 1;
 80041e6:	3601      	adds	r6, #1
      Color_MSBFirst = SwapBytes(Color);
 80041e8:	9009      	str	r0, [sp, #36]	; 0x24
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 80041ea:	8818      	ldrh	r0, [r3, #0]
 80041ec:	f7ff fb86 	bl	80038fc <SwapBytes>
      CharHeight = yo_max - yo_min + 1;
 80041f0:	1bf6      	subs	r6, r6, r7
      CharWidth = pGlyph->xAdvance;
 80041f2:	9b03      	ldr	r3, [sp, #12]
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 80041f4:	900b      	str	r0, [sp, #44]	; 0x2c
      CharWidth = pGlyph->xAdvance;
 80041f6:	f893 a004 	ldrb.w	sl, [r3, #4]
      CharHeight = yo_max - yo_min + 1;
 80041fa:	b2f3      	uxtb	r3, r6
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 80041fc:	fb1a f203 	smulbb	r2, sl, r3
      CharHeight = yo_max - yo_min + 1;
 8004200:	9308      	str	r3, [sp, #32]
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 8004202:	0050      	lsls	r0, r2, #1
 8004204:	920a      	str	r2, [sp, #40]	; 0x28
 8004206:	f001 fbbb 	bl	8005980 <malloc>
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 800420a:	2100      	movs	r1, #0
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 800420c:	4681      	mov	r9, r0
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 800420e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004212:	b288      	uxth	r0, r1
 8004214:	4282      	cmp	r2, r0
 8004216:	dc1c      	bgt.n	8004252 <ILI9341_DrawCharAtXY+0x19e>
 8004218:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800421c:	eba8 0807 	sub.w	r8, r8, r7
 8004220:	2200      	movs	r2, #0
 8004222:	930a      	str	r3, [sp, #40]	; 0x28
 8004224:	9b05      	ldr	r3, [sp, #20]
  bit = 0;
 8004226:	4611      	mov	r1, r2
 8004228:	fb0a 3808 	mla	r8, sl, r8, r3
  bits = 0;
 800422c:	4613      	mov	r3, r2
 800422e:	eb09 0848 	add.w	r8, r9, r8, lsl #1
      for (yy = 0; yy < h; ++yy)
 8004232:	b2d0      	uxtb	r0, r2
 8004234:	9e04      	ldr	r6, [sp, #16]
 8004236:	4286      	cmp	r6, r0
 8004238:	d80f      	bhi.n	800425a <ILI9341_DrawCharAtXY+0x1a6>
      ILI9341_DrawPixels_MSBFirst(X, Y + yo_min, CharWidth, CharHeight, pMemChar);
 800423a:	eb0b 0107 	add.w	r1, fp, r7
 800423e:	9807      	ldr	r0, [sp, #28]
 8004240:	9b08      	ldr	r3, [sp, #32]
 8004242:	4652      	mov	r2, sl
 8004244:	b289      	uxth	r1, r1
 8004246:	f8cd 9000 	str.w	r9, [sp]
 800424a:	f7ff fddf 	bl	8003e0c <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 800424e:	4648      	mov	r0, r9
 8004250:	e796      	b.n	8004180 <ILI9341_DrawCharAtXY+0xcc>
        *pMemCharPixel++ = TextBackgroundColor_MSBFirst;
 8004252:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 8004256:	3101      	adds	r1, #1
 8004258:	e7db      	b.n	8004212 <ILI9341_DrawCharAtXY+0x15e>
        for (xx = 0; xx < w; ++xx)
 800425a:	2000      	movs	r0, #0
 800425c:	fa5f fc80 	uxtb.w	ip, r0
 8004260:	fa51 fe80 	uxtab	lr, r1, r0
 8004264:	4564      	cmp	r4, ip
 8004266:	fa5f fe8e 	uxtb.w	lr, lr
 800426a:	d805      	bhi.n	8004278 <ILI9341_DrawCharAtXY+0x1c4>
 800426c:	4421      	add	r1, r4
 800426e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004270:	3201      	adds	r2, #1
 8004272:	b2c9      	uxtb	r1, r1
      for (yy = 0; yy < h; ++yy)
 8004274:	4480      	add	r8, r0
 8004276:	e7dc      	b.n	8004232 <ILI9341_DrawCharAtXY+0x17e>
          if (!(bit++ & 7))
 8004278:	f01e 0f07 	tst.w	lr, #7
            bits = pBitmap[bo++];
 800427c:	bf01      	itttt	eq
 800427e:	9b06      	ldreq	r3, [sp, #24]
 8004280:	f105 0c01 	addeq.w	ip, r5, #1
 8004284:	5d5b      	ldrbeq	r3, [r3, r5]
 8004286:	fa1f f58c 	uxtheq.w	r5, ip
          if (bits & 0x80)
 800428a:	061e      	lsls	r6, r3, #24
          bits <<= 1;
 800428c:	ea4f 0343 	mov.w	r3, r3, lsl #1
            *pMemCharPixel = Color_MSBFirst;
 8004290:	bf48      	it	mi
 8004292:	9e09      	ldrmi	r6, [sp, #36]	; 0x24
          bits <<= 1;
 8004294:	b2db      	uxtb	r3, r3
            *pMemCharPixel = Color_MSBFirst;
 8004296:	bf48      	it	mi
 8004298:	f828 6010 	strhmi.w	r6, [r8, r0, lsl #1]
        for (xx = 0; xx < w; ++xx)
 800429c:	3001      	adds	r0, #1
 800429e:	e7dd      	b.n	800425c <ILI9341_DrawCharAtXY+0x1a8>
      ILI9341_CSX_Low();
 80042a0:	2102      	movs	r1, #2
 80042a2:	2200      	movs	r2, #0
 80042a4:	4828      	ldr	r0, [pc, #160]	; (8004348 <ILI9341_DrawCharAtXY+0x294>)
      for (yy = 0; yy < h; ++yy)
 80042a6:	2600      	movs	r6, #0
      ILI9341_CSX_Low();
 80042a8:	f7fc fcfa 	bl	8000ca0 <HAL_GPIO_WritePin>
      for (yy = 0; yy < h; ++yy)
 80042ac:	9907      	ldr	r1, [sp, #28]
 80042ae:	9b05      	ldr	r3, [sp, #20]
  bit = 0;
 80042b0:	46b2      	mov	sl, r6
  bits = 0;
 80042b2:	4637      	mov	r7, r6
 80042b4:	4419      	add	r1, r3
 80042b6:	b28b      	uxth	r3, r1
 80042b8:	9307      	str	r3, [sp, #28]
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 80042ba:	eb0b 0308 	add.w	r3, fp, r8
 80042be:	9308      	str	r3, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 80042c0:	b2f3      	uxtb	r3, r6
 80042c2:	9a04      	ldr	r2, [sp, #16]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d92a      	bls.n	800431e <ILI9341_DrawCharAtXY+0x26a>
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 80042c8:	9a08      	ldr	r2, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 80042ca:	4653      	mov	r3, sl
 80042cc:	f8dd 801c 	ldr.w	r8, [sp, #28]
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 80042d0:	1991      	adds	r1, r2, r6
 80042d2:	b209      	sxth	r1, r1
 80042d4:	e01b      	b.n	800430e <ILI9341_DrawCharAtXY+0x25a>
          if (!(bit++ & 7))
 80042d6:	075a      	lsls	r2, r3, #29
 80042d8:	f103 0b01 	add.w	fp, r3, #1
            bits = pBitmap[bo++];
 80042dc:	bf04      	itt	eq
 80042de:	9a06      	ldreq	r2, [sp, #24]
 80042e0:	1c6b      	addeq	r3, r5, #1
          if (!(bit++ & 7))
 80042e2:	fa5f fb8b 	uxtb.w	fp, fp
            bits = pBitmap[bo++];
 80042e6:	bf04      	itt	eq
 80042e8:	5d57      	ldrbeq	r7, [r2, r5]
 80042ea:	b29d      	uxtheq	r5, r3
          if (bits & 0x80)
 80042ec:	063b      	lsls	r3, r7, #24
 80042ee:	d507      	bpl.n	8004300 <ILI9341_DrawCharAtXY+0x24c>
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 80042f0:	2300      	movs	r3, #0
 80042f2:	464a      	mov	r2, r9
 80042f4:	fa0f f088 	sxth.w	r0, r8
 80042f8:	9109      	str	r1, [sp, #36]	; 0x24
 80042fa:	f7ff fd4b 	bl	8003d94 <ILI9341_DrawPixel>
 80042fe:	9909      	ldr	r1, [sp, #36]	; 0x24
          bits <<= 1;
 8004300:	007f      	lsls	r7, r7, #1
 8004302:	f108 0801 	add.w	r8, r8, #1
          if (!(bit++ & 7))
 8004306:	465b      	mov	r3, fp
          bits <<= 1;
 8004308:	b2ff      	uxtb	r7, r7
        for (xx = 0; xx < w; ++xx)
 800430a:	fa1f f888 	uxth.w	r8, r8
 800430e:	eb0a 0204 	add.w	r2, sl, r4
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	4293      	cmp	r3, r2
 8004316:	d1de      	bne.n	80042d6 <ILI9341_DrawCharAtXY+0x222>
      for (yy = 0; yy < h; ++yy)
 8004318:	3601      	adds	r6, #1
        for (xx = 0; xx < w; ++xx)
 800431a:	469a      	mov	sl, r3
 800431c:	e7d0      	b.n	80042c0 <ILI9341_DrawCharAtXY+0x20c>
      ILI9341_CSX_High();
 800431e:	2201      	movs	r2, #1
 8004320:	2102      	movs	r1, #2
 8004322:	4809      	ldr	r0, [pc, #36]	; (8004348 <ILI9341_DrawCharAtXY+0x294>)
 8004324:	f7fc fcbc 	bl	8000ca0 <HAL_GPIO_WritePin>
      break;
 8004328:	e72c      	b.n	8004184 <ILI9341_DrawCharAtXY+0xd0>
  return xo + w;
 800432a:	9805      	ldr	r0, [sp, #20]
 800432c:	4420      	add	r0, r4
 800432e:	b2c0      	uxtb	r0, r0
 8004330:	e72d      	b.n	800418e <ILI9341_DrawCharAtXY+0xda>
    return 0;
 8004332:	2000      	movs	r0, #0
 8004334:	e72b      	b.n	800418e <ILI9341_DrawCharAtXY+0xda>
 8004336:	bf00      	nop
 8004338:	200004c4 	.word	0x200004c4
 800433c:	2000002f 	.word	0x2000002f
 8004340:	2000002e 	.word	0x2000002e
 8004344:	200004bc 	.word	0x200004bc
 8004348:	40020800 	.word	0x40020800

0800434c <ILI9341_SetTextColor>:

uint16_t ILI9341_SetTextColor(uint16_t Value)
{
  uint16_t Result;

  Result = TextColor;
 800434c:	4b02      	ldr	r3, [pc, #8]	; (8004358 <ILI9341_SetTextColor+0xc>)
 800434e:	881a      	ldrh	r2, [r3, #0]
  TextColor = Value;
 8004350:	8018      	strh	r0, [r3, #0]
  return Result;
}
 8004352:	4610      	mov	r0, r2
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	2000002c 	.word	0x2000002c

0800435c <ILI9341_SetTextBackgroundColor>:

uint16_t ILI9341_SetTextBackgroundColor(uint16_t Value)
{
  uint16_t Result;

  Result = TextBackgroundColor;
 800435c:	4b02      	ldr	r3, [pc, #8]	; (8004368 <ILI9341_SetTextBackgroundColor+0xc>)
 800435e:	881a      	ldrh	r2, [r3, #0]
  TextBackgroundColor = Value;
 8004360:	8018      	strh	r0, [r3, #0]
  return Result;
}
 8004362:	4610      	mov	r0, r2
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	200004bc 	.word	0x200004bc

0800436c <ILI9341_SetTextDrawMode>:

TextDrawMode_t ILI9341_SetTextDrawMode(TextDrawMode_t Value)
{
 800436c:	4602      	mov	r2, r0
  TextDrawMode_t Result;

  Result = TextDrawMode;
 800436e:	4b02      	ldr	r3, [pc, #8]	; (8004378 <ILI9341_SetTextDrawMode+0xc>)
 8004370:	7818      	ldrb	r0, [r3, #0]
  TextDrawMode = Value;
 8004372:	701a      	strb	r2, [r3, #0]
  return Result;
}
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	2000002e 	.word	0x2000002e

0800437c <ILI9341_DrawTextAtXY>:
  TextVerticalOrigin = Value;
  return Result;
}

void ILI9341_DrawTextAtXY(const char *Text, uint16_t X, uint16_t Y, TextPosition_t TextPosition)
{
 800437c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004380:	460d      	mov	r5, r1
 8004382:	4690      	mov	r8, r2
 8004384:	461f      	mov	r7, r3
  uint16_t NumChars;
  uint8_t DX;
  
  pText = (uint8_t *) Text;

  if (!pText)
 8004386:	4604      	mov	r4, r0
 8004388:	b158      	cbz	r0, 80043a2 <ILI9341_DrawTextAtXY+0x26>
    return;

  NumChars = strlen(Text);
 800438a:	f7fb ff59 	bl	8000240 <strlen>

  switch (TextPosition)
 800438e:	2f02      	cmp	r7, #2
  NumChars = strlen(Text);
 8004390:	4606      	mov	r6, r0
  switch (TextPosition)
 8004392:	d008      	beq.n	80043a6 <ILI9341_DrawTextAtXY+0x2a>
 8004394:	2f03      	cmp	r7, #3
 8004396:	d00d      	beq.n	80043b4 <ILI9341_DrawTextAtXY+0x38>
 8004398:	fa14 f686 	uxtah	r6, r4, r6
  }

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
  {
    Ch = *pText;
    DX = ILI9341_DrawCharAtXY(Ch, X, Y, TextColor);
 800439c:	4f0d      	ldr	r7, [pc, #52]	; (80043d4 <ILI9341_DrawTextAtXY+0x58>)
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 800439e:	42b4      	cmp	r4, r6
 80043a0:	d10d      	bne.n	80043be <ILI9341_DrawTextAtXY+0x42>
    ++pText;
    X += DX;
  }
}
 80043a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      X -= ILI9341_GetTextWidth(Text) / 2;
 80043a6:	4620      	mov	r0, r4
 80043a8:	f7ff fe72 	bl	8004090 <ILI9341_GetTextWidth>
 80043ac:	eba5 0550 	sub.w	r5, r5, r0, lsr #1
      X -= ILI9341_GetTextWidth(Text);
 80043b0:	b2ad      	uxth	r5, r5
      break;
 80043b2:	e7f1      	b.n	8004398 <ILI9341_DrawTextAtXY+0x1c>
      X -= ILI9341_GetTextWidth(Text);
 80043b4:	4620      	mov	r0, r4
 80043b6:	f7ff fe6b 	bl	8004090 <ILI9341_GetTextWidth>
 80043ba:	1a2d      	subs	r5, r5, r0
 80043bc:	e7f8      	b.n	80043b0 <ILI9341_DrawTextAtXY+0x34>
    DX = ILI9341_DrawCharAtXY(Ch, X, Y, TextColor);
 80043be:	4629      	mov	r1, r5
 80043c0:	883b      	ldrh	r3, [r7, #0]
 80043c2:	4642      	mov	r2, r8
 80043c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80043c8:	f7ff fe74 	bl	80040b4 <ILI9341_DrawCharAtXY>
    X += DX;
 80043cc:	4405      	add	r5, r0
 80043ce:	b2ad      	uxth	r5, r5
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80043d0:	e7e5      	b.n	800439e <ILI9341_DrawTextAtXY+0x22>
 80043d2:	bf00      	nop
 80043d4:	2000002c 	.word	0x2000002c

080043d8 <GetBest>:
{
  int16_t DeltaAB, DeltaCA, DeltaBC;
  int16_t Result = 0;

  if (A > B)
    DeltaAB = A - B;
 80043d8:	b283      	uxth	r3, r0
  if (A > B)
 80043da:	4288      	cmp	r0, r1
{
 80043dc:	b570      	push	{r4, r5, r6, lr}
    DeltaAB = A - B;
 80043de:	b28c      	uxth	r4, r1
  else
    DeltaAB = B - A;

  if (A > C)
    DeltaCA = A - C;
 80043e0:	b296      	uxth	r6, r2
    DeltaAB = A - B;
 80043e2:	bfcc      	ite	gt
 80043e4:	1b1d      	subgt	r5, r3, r4
    DeltaAB = B - A;
 80043e6:	1ae5      	suble	r5, r4, r3
  if (A > C)
 80043e8:	4290      	cmp	r0, r2
    DeltaAB = B - A;
 80043ea:	b22d      	sxth	r5, r5
    DeltaCA = A - C;
 80043ec:	bfcc      	ite	gt
 80043ee:	1b9b      	subgt	r3, r3, r6
  else
    DeltaCA = C - A;
 80043f0:	1af3      	suble	r3, r6, r3

  if (C > B)
 80043f2:	4291      	cmp	r1, r2
    DeltaCA = C - A;
 80043f4:	b21b      	sxth	r3, r3
    DeltaBC = C - B;
 80043f6:	bfb4      	ite	lt
 80043f8:	1b34      	sublt	r4, r6, r4
  else
    DeltaBC = B - C;
 80043fa:	1ba4      	subge	r4, r4, r6

  if ((DeltaAB <= DeltaCA) && (DeltaAB <= DeltaBC))
 80043fc:	429d      	cmp	r5, r3
    DeltaBC = B - C;
 80043fe:	b224      	sxth	r4, r4
  if ((DeltaAB <= DeltaCA) && (DeltaAB <= DeltaBC))
 8004400:	dc04      	bgt.n	800440c <GetBest+0x34>
 8004402:	42a5      	cmp	r5, r4
 8004404:	dc07      	bgt.n	8004416 <GetBest+0x3e>
    Result = (A + B) >> 1;
 8004406:	4401      	add	r1, r0
  else if ((DeltaCA <= DeltaAB) && (DeltaCA <= DeltaBC))
    Result = (A + C) >> 1;
  else
    Result = (B + C) >> 1;
 8004408:	1048      	asrs	r0, r1, #1
 800440a:	e003      	b.n	8004414 <GetBest+0x3c>
  else if ((DeltaCA <= DeltaAB) && (DeltaCA <= DeltaBC))
 800440c:	42a3      	cmp	r3, r4
 800440e:	dc02      	bgt.n	8004416 <GetBest+0x3e>
    Result = (A + C) >> 1;
 8004410:	4410      	add	r0, r2
 8004412:	1040      	asrs	r0, r0, #1

  return Result;
}
 8004414:	bd70      	pop	{r4, r5, r6, pc}
    Result = (B + C) >> 1;
 8004416:	4411      	add	r1, r2
 8004418:	e7f6      	b.n	8004408 <GetBest+0x30>

0800441a <GetUnsigned12bitValue>:
  0xB1, 0x00, 0xC1, 0x00, 0xD1, 0x00, 0xD1, 0x00, 0x91, 0x00, 0xD1, 0x00, 0x91, 0x00, 0xD1, 0x00, 0x90, 0x00, 0x00
};

inline static uint16_t GetUnsigned12bitValue(uint8_t *pData)
{
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 800441a:	7803      	ldrb	r3, [r0, #0]
 800441c:	7840      	ldrb	r0, [r0, #1]
 800441e:	08c0      	lsrs	r0, r0, #3
 8004420:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
}
 8004424:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8004428:	4770      	bx	lr
	...

0800442c <XPT2046_Initialize>:
  phspi = i_phspi;
 800442c:	4b01      	ldr	r3, [pc, #4]	; (8004434 <XPT2046_Initialize+0x8>)
 800442e:	6018      	str	r0, [r3, #0]
}
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	200004cc 	.word	0x200004cc

08004438 <XPT2046_Sample>:

uint8_t XPT2046_Sample(int16_t *pRawX, int16_t *pRawY, int16_t *pRawZ)
// Returns 1 if touched.
// The origin is bottom left (XL, YD). This is the natural origin of the XPT2046.
// None of the touch screens I've encountered so far are correctly wired. Use compiler defines to reverse the coordinates as required.
{
 8004438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443c:	4617      	mov	r7, r2
  int16_t x, y, z;

  *pRawX = 0;
 800443e:	2200      	movs	r2, #0
{
 8004440:	b089      	sub	sp, #36	; 0x24
 8004442:	4606      	mov	r6, r0
  *pRawX = 0;
 8004444:	8002      	strh	r2, [r0, #0]
{
 8004446:	460d      	mov	r5, r1
  *pRawY = 0;
 8004448:	800a      	strh	r2, [r1, #0]

  uint8_t RxData[19];
  int16_t X_Positions[3];
  int16_t Y_Positions[3];

  XPT2046_CSX_Low();
 800444a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800444e:	4831      	ldr	r0, [pc, #196]	; (8004514 <XPT2046_Sample+0xdc>)
  *pRawZ = 0;
 8004450:	803a      	strh	r2, [r7, #0]
  XPT2046_CSX_Low();
 8004452:	f7fc fc25 	bl	8000ca0 <HAL_GPIO_WritePin>
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &SampleCommand, (uint8_t*) &RxData, 19, 100) != HAL_OK)
 8004456:	2364      	movs	r3, #100	; 0x64
 8004458:	482f      	ldr	r0, [pc, #188]	; (8004518 <XPT2046_Sample+0xe0>)
 800445a:	aa03      	add	r2, sp, #12
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	2313      	movs	r3, #19
 8004460:	492e      	ldr	r1, [pc, #184]	; (800451c <XPT2046_Sample+0xe4>)
 8004462:	6800      	ldr	r0, [r0, #0]
 8004464:	f7fe fcad 	bl	8002dc2 <HAL_SPI_TransmitReceive>
 8004468:	b108      	cbz	r0, 800446e <XPT2046_Sample+0x36>
    Error_Handler();
 800446a:	f000 fe19 	bl	80050a0 <Error_Handler>
  XPT2046_CSX_High();
 800446e:	4829      	ldr	r0, [pc, #164]	; (8004514 <XPT2046_Sample+0xdc>)
 8004470:	2201      	movs	r2, #1
 8004472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004476:	f7fc fc13 	bl	8000ca0 <HAL_GPIO_WritePin>

  int16_t z1 = GetUnsigned12bitValue(&RxData[1]);
 800447a:	f10d 000d 	add.w	r0, sp, #13
 800447e:	f7ff ffcc 	bl	800441a <GetUnsigned12bitValue>
 8004482:	b204      	sxth	r4, r0
  int16_t z2 = GetUnsigned12bitValue(&RxData[3]);
 8004484:	f10d 000f 	add.w	r0, sp, #15
 8004488:	f7ff ffc7 	bl	800441a <GetUnsigned12bitValue>

  // Neutralize occasional z1 = 4095 values (which are possibly due to comms errors, as x and y values of 4095 often appear with the z value of 4095).
  if (z1 >= 2048)
    z1 = 0;

  z = 4095 + z1 - z2;
 800448c:	f5c0 637f 	rsb	r3, r0, #4080	; 0xff0
    z1 = 0;
 8004490:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
  z = 4095 + z1 - z2;
 8004494:	f103 030f 	add.w	r3, r3, #15
    z1 = 0;
 8004498:	bfa8      	it	ge
 800449a:	2400      	movge	r4, #0
  z = 4095 + z1 - z2;
 800449c:	4423      	add	r3, r4
 800449e:	b21c      	sxth	r4, r3

  if (z < ZThreshold)
 80044a0:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 80044a4:	db33      	blt.n	800450e <XPT2046_Sample+0xd6>
  X_Positions[0] = GetUnsigned12bitValue(&RxData[7]);
 80044a6:	f10d 0013 	add.w	r0, sp, #19
 80044aa:	f7ff ffb6 	bl	800441a <GetUnsigned12bitValue>
 80044ae:	4683      	mov	fp, r0
  X_Positions[1] = GetUnsigned12bitValue(&RxData[11]);
 80044b0:	f10d 0017 	add.w	r0, sp, #23
 80044b4:	f7ff ffb1 	bl	800441a <GetUnsigned12bitValue>
 80044b8:	4601      	mov	r1, r0
  X_Positions[2] = GetUnsigned12bitValue(&RxData[15]);
 80044ba:	f10d 001b 	add.w	r0, sp, #27
 80044be:	f7ff ffac 	bl	800441a <GetUnsigned12bitValue>
 80044c2:	4602      	mov	r2, r0
  Y_Positions[0] = GetUnsigned12bitValue(&RxData[10]);
 80044c4:	f10d 0016 	add.w	r0, sp, #22
    return 0;

  *pRawZ = z;

  x = GetBest(X_Positions[0], X_Positions[1], X_Positions[2]);
 80044c8:	b209      	sxth	r1, r1
  Y_Positions[0] = GetUnsigned12bitValue(&RxData[10]);
 80044ca:	f7ff ffa6 	bl	800441a <GetUnsigned12bitValue>
 80044ce:	4680      	mov	r8, r0
  Y_Positions[1] = GetUnsigned12bitValue(&RxData[13]);
 80044d0:	f10d 0019 	add.w	r0, sp, #25
  x = GetBest(X_Positions[0], X_Positions[1], X_Positions[2]);
 80044d4:	b212      	sxth	r2, r2
  Y_Positions[1] = GetUnsigned12bitValue(&RxData[13]);
 80044d6:	f7ff ffa0 	bl	800441a <GetUnsigned12bitValue>
 80044da:	4681      	mov	r9, r0
  Y_Positions[2] = GetUnsigned12bitValue(&RxData[17]);
 80044dc:	f10d 001d 	add.w	r0, sp, #29
 80044e0:	f7ff ff9b 	bl	800441a <GetUnsigned12bitValue>
  *pRawZ = z;
 80044e4:	803c      	strh	r4, [r7, #0]
  Y_Positions[2] = GetUnsigned12bitValue(&RxData[17]);
 80044e6:	4682      	mov	sl, r0
  x = GetBest(X_Positions[0], X_Positions[1], X_Positions[2]);
 80044e8:	fa0f f08b 	sxth.w	r0, fp
 80044ec:	f7ff ff74 	bl	80043d8 <GetBest>
 80044f0:	4604      	mov	r4, r0
  y = GetBest(Y_Positions[0], Y_Positions[1], Y_Positions[2]);
 80044f2:	fa0f f28a 	sxth.w	r2, sl
 80044f6:	fa0f f189 	sxth.w	r1, r9
 80044fa:	fa0f f088 	sxth.w	r0, r8
 80044fe:	f7ff ff6b 	bl	80043d8 <GetBest>

#if XPT2046_Swap_YD_and_YU
  y = 4095 - y;
#endif

  *pRawX = x;
 8004502:	8034      	strh	r4, [r6, #0]
  *pRawY = y;
 8004504:	8028      	strh	r0, [r5, #0]

  return 1;
 8004506:	2001      	movs	r0, #1
}
 8004508:	b009      	add	sp, #36	; 0x24
 800450a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
 800450e:	2000      	movs	r0, #0
 8004510:	e7fa      	b.n	8004508 <XPT2046_Sample+0xd0>
 8004512:	bf00      	nop
 8004514:	40020400 	.word	0x40020400
 8004518:	200004cc 	.word	0x200004cc
 800451c:	080086fe 	.word	0x080086fe

08004520 <XPT2046_ConvertRawToScreen>:

void XPT2046_ConvertRawToScreen(int16_t RawX, int16_t RawY, int16_t *pX, int16_t *pY)
// Assumes portrait mode.
// The origin of the result is top-left.
{
 8004520:	b510      	push	{r4, lr}
  float K;

  K = ((float)(RawX - XPT2046_RawX_Min) / (float)(XPT2046_RawX_Max - XPT2046_RawX_Min));
 8004522:	4c19      	ldr	r4, [pc, #100]	; (8004588 <XPT2046_ConvertRawToScreen+0x68>)
 8004524:	6824      	ldr	r4, [r4, #0]
 8004526:	1b00      	subs	r0, r0, r4
 8004528:	ee07 0a90 	vmov	s15, r0
 800452c:	4817      	ldr	r0, [pc, #92]	; (800458c <XPT2046_ConvertRawToScreen+0x6c>)
 800452e:	6800      	ldr	r0, [r0, #0]
 8004530:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004534:	1b00      	subs	r0, r0, r4
 8004536:	ee07 0a90 	vmov	s15, r0
 800453a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800453e:	eec6 7a87 	vdiv.f32	s15, s13, s14
  *pX = K * XPT2046_Width;
 8004542:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8004590 <XPT2046_ConvertRawToScreen+0x70>
 8004546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800454a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800454e:	ee17 0a90 	vmov	r0, s15
 8004552:	8010      	strh	r0, [r2, #0]

  K = ((float)(RawY - XPT2046_RawY_Min) / (float)(XPT2046_RawY_Max - XPT2046_RawY_Min));
 8004554:	4a0f      	ldr	r2, [pc, #60]	; (8004594 <XPT2046_ConvertRawToScreen+0x74>)
 8004556:	6810      	ldr	r0, [r2, #0]
 8004558:	4a0f      	ldr	r2, [pc, #60]	; (8004598 <XPT2046_ConvertRawToScreen+0x78>)
 800455a:	1a09      	subs	r1, r1, r0
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	ee07 1a90 	vmov	s15, r1
 8004562:	1a12      	subs	r2, r2, r0
 8004564:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004568:	ee07 2a90 	vmov	s15, r2
 800456c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004570:	eec6 7a87 	vdiv.f32	s15, s13, s14
  *pY = K * XPT2046_Height;
 8004574:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800459c <XPT2046_ConvertRawToScreen+0x7c>
 8004578:	ee67 7a87 	vmul.f32	s15, s15, s14
 800457c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004580:	ee17 2a90 	vmov	r2, s15
 8004584:	801a      	strh	r2, [r3, #0]
}
 8004586:	bd10      	pop	{r4, pc}
 8004588:	20000034 	.word	0x20000034
 800458c:	20000030 	.word	0x20000030
 8004590:	43700000 	.word	0x43700000
 8004594:	2000003c 	.word	0x2000003c
 8004598:	20000038 	.word	0x20000038
 800459c:	43a00000 	.word	0x43a00000

080045a0 <HandleHALResult.part.0>:
{
  if (Value != HAL_OK)
  {
//    LCD_UsrLog("HAL error: %s\n", pText);
//    Error_Handler();
    HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin); // !!!
 80045a0:	2102      	movs	r1, #2
 80045a2:	4801      	ldr	r0, [pc, #4]	; (80045a8 <HandleHALResult.part.0+0x8>)
 80045a4:	f7fc bb81 	b.w	8000caa <HAL_GPIO_TogglePin>
 80045a8:	40020000 	.word	0x40020000

080045ac <ToggleLED.part.0>:
void ToggleLED(LED_t LED)
{
  switch(LED)
  {
    case LED_Red:
      HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 80045ac:	2102      	movs	r1, #2
 80045ae:	4801      	ldr	r0, [pc, #4]	; (80045b4 <ToggleLED.part.0+0x8>)
 80045b0:	f7fc bb7b 	b.w	8000caa <HAL_GPIO_TogglePin>
 80045b4:	40020000 	.word	0x40020000

080045b8 <HandleHALResult>:
  if (Value != HAL_OK)
 80045b8:	b108      	cbz	r0, 80045be <HandleHALResult+0x6>
 80045ba:	f7ff bff1 	b.w	80045a0 <HandleHALResult.part.0>
}
 80045be:	4770      	bx	lr

080045c0 <I2C_write>:
{
 80045c0:	b507      	push	{r0, r1, r2, lr}
 80045c2:	4613      	mov	r3, r2
  HandleHALResult(HAL_I2C_Master_Transmit(&hi2c1, Address << 1, pData, NumBytes, 1000), "HAL_I2C_Master_Transmit");
 80045c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045c8:	9200      	str	r2, [sp, #0]
 80045ca:	460a      	mov	r2, r1
 80045cc:	0041      	lsls	r1, r0, #1
 80045ce:	4806      	ldr	r0, [pc, #24]	; (80045e8 <I2C_write+0x28>)
 80045d0:	f7fc fd78 	bl	80010c4 <HAL_I2C_Master_Transmit>
  if (Value != HAL_OK)
 80045d4:	b120      	cbz	r0, 80045e0 <I2C_write+0x20>
}
 80045d6:	b003      	add	sp, #12
 80045d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045dc:	f7ff bfe0 	b.w	80045a0 <HandleHALResult.part.0>
 80045e0:	b003      	add	sp, #12
 80045e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80045e6:	bf00      	nop
 80045e8:	20000790 	.word	0x20000790

080045ec <I2C_read>:
{
 80045ec:	b507      	push	{r0, r1, r2, lr}
 80045ee:	4613      	mov	r3, r2
  HandleHALResult(HAL_I2C_Master_Receive(&hi2c1, Address << 1, pData, NumBytes, 1000), "HAL_I2C_Master_Receive");
 80045f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045f4:	9200      	str	r2, [sp, #0]
 80045f6:	460a      	mov	r2, r1
 80045f8:	0041      	lsls	r1, r0, #1
 80045fa:	4806      	ldr	r0, [pc, #24]	; (8004614 <I2C_read+0x28>)
 80045fc:	f7fc fdf8 	bl	80011f0 <HAL_I2C_Master_Receive>
  if (Value != HAL_OK)
 8004600:	b120      	cbz	r0, 800460c <I2C_read+0x20>
}
 8004602:	b003      	add	sp, #12
 8004604:	f85d eb04 	ldr.w	lr, [sp], #4
 8004608:	f7ff bfca 	b.w	80045a0 <HandleHALResult.part.0>
 800460c:	b003      	add	sp, #12
 800460e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004612:	bf00      	nop
 8004614:	20000790 	.word	0x20000790

08004618 <ToggleLED>:
  switch(LED)
 8004618:	2802      	cmp	r0, #2
 800461a:	d005      	beq.n	8004628 <ToggleLED+0x10>
 800461c:	2803      	cmp	r0, #3
 800461e:	d007      	beq.n	8004630 <ToggleLED+0x18>
 8004620:	2801      	cmp	r0, #1
 8004622:	d107      	bne.n	8004634 <ToggleLED+0x1c>
 8004624:	f7ff bfc2 	b.w	80045ac <ToggleLED.part.0>
      break;
    case LED_Green:
      HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 8004628:	2104      	movs	r1, #4
      break;
    case LED_Blue:
      HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 800462a:	4803      	ldr	r0, [pc, #12]	; (8004638 <ToggleLED+0x20>)
 800462c:	f7fc bb3d 	b.w	8000caa <HAL_GPIO_TogglePin>
 8004630:	2108      	movs	r1, #8
 8004632:	e7fa      	b.n	800462a <ToggleLED+0x12>
      break;
    default:
      Error_Handler();
 8004634:	f000 bd34 	b.w	80050a0 <Error_Handler>
 8004638:	40020000 	.word	0x40020000

0800463c <IsUserButtonPressed>:
///////////////////////////////////////////////////////////////////////////////
// User button:

uint8_t IsUserButtonPressed()
{
  return !HAL_GPIO_ReadPin(NUserButton_GPIO_Port, NUserButton_Pin);
 800463c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004640:	4803      	ldr	r0, [pc, #12]	; (8004650 <IsUserButtonPressed+0x14>)
{
 8004642:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(NUserButton_GPIO_Port, NUserButton_Pin);
 8004644:	f7fc fb26 	bl	8000c94 <HAL_GPIO_ReadPin>
}
 8004648:	fab0 f080 	clz	r0, r0
 800464c:	0940      	lsrs	r0, r0, #5
 800464e:	bd08      	pop	{r3, pc}
 8004650:	40020800 	.word	0x40020800

08004654 <I2S_SelectSource>:

///////////////////////////////////////////////////////////////////////////////
// I2S_Source:

void I2S_SelectSource(I2S_Source_t Source)
{
 8004654:	b510      	push	{r4, lr}
 8004656:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(MUX_S0_GPIO_Port, MUX_S0_Pin, Source & 0x01);
 8004658:	2104      	movs	r1, #4
 800465a:	4806      	ldr	r0, [pc, #24]	; (8004674 <I2S_SelectSource+0x20>)
 800465c:	f004 0201 	and.w	r2, r4, #1
 8004660:	f7fc fb1e 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_S1_GPIO_Port, MUX_S1_Pin, Source & 0x02);
 8004664:	f004 0202 	and.w	r2, r4, #2
 8004668:	2108      	movs	r1, #8
 800466a:	4802      	ldr	r0, [pc, #8]	; (8004674 <I2S_SelectSource+0x20>)
}
 800466c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(MUX_S1_GPIO_Port, MUX_S1_Pin, Source & 0x02);
 8004670:	f7fc bb16 	b.w	8000ca0 <HAL_GPIO_WritePin>
 8004674:	40020c00 	.word	0x40020c00

08004678 <ADC_RegisterRead>:
// ADC (PCM1865):

#define ADC_I2C_Address 0x4A

uint8_t ADC_RegisterRead(uint8_t Index)
{
 8004678:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t Result;
  HAL_StatusTypeDef HAL_Result;

  HAL_Result = HAL_I2C_Mem_Read(&hi2c1, ADC_I2C_Address << 1, Index, 1, &Result, 1, 1000);
 800467a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800467e:	2301      	movs	r3, #1
{
 8004680:	4602      	mov	r2, r0
  HAL_Result = HAL_I2C_Mem_Read(&hi2c1, ADC_I2C_Address << 1, Index, 1, &Result, 1, 1000);
 8004682:	4808      	ldr	r0, [pc, #32]	; (80046a4 <ADC_RegisterRead+0x2c>)
 8004684:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8004688:	f10d 0117 	add.w	r1, sp, #23
 800468c:	9100      	str	r1, [sp, #0]
 800468e:	2194      	movs	r1, #148	; 0x94
 8004690:	f7fc fefc 	bl	800148c <HAL_I2C_Mem_Read>
  if (HAL_Result != HAL_OK)
 8004694:	b108      	cbz	r0, 800469a <ADC_RegisterRead+0x22>
  switch(LED)
 8004696:	f7ff ff89 	bl	80045ac <ToggleLED.part.0>
    HandleError();

  return Result;
}
 800469a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800469e:	b007      	add	sp, #28
 80046a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80046a4:	20000790 	.word	0x20000790

080046a8 <ADC_RegisterWrite>:

void ADC_RegisterWrite(uint8_t Index, uint8_t Value)
{
 80046a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef HAL_Result;

  Data[0] = Index;
  Data[1] = Value;

  HAL_Result = HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_Address << 1, Data, 2, 1000);
 80046aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  Data[0] = Index;
 80046ae:	f88d 000c 	strb.w	r0, [sp, #12]
  Data[1] = Value;
 80046b2:	f88d 100d 	strb.w	r1, [sp, #13]
  HAL_Result = HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_Address << 1, Data, 2, 1000);
 80046b6:	aa03      	add	r2, sp, #12
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	2194      	movs	r1, #148	; 0x94
 80046bc:	2302      	movs	r3, #2
 80046be:	4804      	ldr	r0, [pc, #16]	; (80046d0 <ADC_RegisterWrite+0x28>)
 80046c0:	f7fc fd00 	bl	80010c4 <HAL_I2C_Master_Transmit>
  if (HAL_Result != HAL_OK)
 80046c4:	b108      	cbz	r0, 80046ca <ADC_RegisterWrite+0x22>
  switch(LED)
 80046c6:	f7ff ff71 	bl	80045ac <ToggleLED.part.0>
    HandleError();
}
 80046ca:	b005      	add	sp, #20
 80046cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80046d0:	20000790 	.word	0x20000790

080046d4 <ADC_CheckPowerSupplies>:

void ADC_CheckPowerSupplies()
{
  uint8_t Value;

  Value = ADC_RegisterRead(0x78);
 80046d4:	2078      	movs	r0, #120	; 0x78
 80046d6:	f7ff bfcf 	b.w	8004678 <ADC_RegisterRead>

080046da <ADC_SelectSource>:

void ADC_SelectSource(ADC_Source_t Source)
{
  uint8_t WriteValue;

  switch(Source)
 80046da:	2801      	cmp	r0, #1
{
 80046dc:	b507      	push	{r0, r1, r2, lr}
  switch(Source)
 80046de:	d00e      	beq.n	80046fe <ADC_SelectSource+0x24>
 80046e0:	2802      	cmp	r0, #2
 80046e2:	bf14      	ite	ne
 80046e4:	2140      	movne	r1, #64	; 0x40
 80046e6:	2142      	moveq	r1, #66	; 0x42
    default:
      WriteValue = 0x40;
      break;
  }

  ADC_RegisterWrite(0x06, WriteValue);
 80046e8:	2006      	movs	r0, #6
 80046ea:	9101      	str	r1, [sp, #4]
 80046ec:	f7ff ffdc 	bl	80046a8 <ADC_RegisterWrite>
  ADC_RegisterWrite(0x07, WriteValue);
 80046f0:	9901      	ldr	r1, [sp, #4]
 80046f2:	2007      	movs	r0, #7
}
 80046f4:	b003      	add	sp, #12
 80046f6:	f85d eb04 	ldr.w	lr, [sp], #4
  ADC_RegisterWrite(0x07, WriteValue);
 80046fa:	f7ff bfd5 	b.w	80046a8 <ADC_RegisterWrite>
      WriteValue = 0x41;
 80046fe:	2141      	movs	r1, #65	; 0x41
 8004700:	e7f2      	b.n	80046e8 <ADC_SelectSource+0xe>
	...

08004704 <ADC_SetGain>:
void ADC_SetGain(float Value)
// -12dB to +32dB in 0.5dB steps.
{
  uint8_t RegisterValue;

  if ((Value < -12.0f) || (Value > 32.0f))
 8004704:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
 8004708:	b500      	push	{lr}
  if ((Value < -12.0f) || (Value > 32.0f))
 800470a:	eeb4 0ae7 	vcmpe.f32	s0, s15
{
 800470e:	ed2d 8b02 	vpush	{d8}
  if ((Value < -12.0f) || (Value > 32.0f))
 8004712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8004716:	b083      	sub	sp, #12
 8004718:	eeb0 8a40 	vmov.f32	s16, s0
  if ((Value < -12.0f) || (Value > 32.0f))
 800471c:	d406      	bmi.n	800472c <ADC_SetGain+0x28>
 800471e:	eddf 7a11 	vldr	s15, [pc, #68]	; 8004764 <ADC_SetGain+0x60>
 8004722:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472a:	dd01      	ble.n	8004730 <ADC_SetGain+0x2c>
    Error_Handler();
 800472c:	f000 fcb8 	bl	80050a0 <Error_Handler>

  RegisterValue = (int)round(2.0f * Value);
 8004730:	ee38 7a08 	vadd.f32	s14, s16, s16

  ADC_RegisterWrite(0x01, RegisterValue);
 8004734:	2001      	movs	r0, #1
  RegisterValue = (int)round(2.0f * Value);
 8004736:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800473a:	feb8 7b47 	vrinta.f64	d7, d7
 800473e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004742:	edcd 7a01 	vstr	s15, [sp, #4]
 8004746:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ADC_RegisterWrite(0x01, RegisterValue);
 800474a:	9101      	str	r1, [sp, #4]
 800474c:	f7ff ffac 	bl	80046a8 <ADC_RegisterWrite>
  ADC_RegisterWrite(0x02, RegisterValue);
 8004750:	9901      	ldr	r1, [sp, #4]
 8004752:	2002      	movs	r0, #2
}
 8004754:	b003      	add	sp, #12
 8004756:	ecbd 8b02 	vpop	{d8}
 800475a:	f85d eb04 	ldr.w	lr, [sp], #4
  ADC_RegisterWrite(0x02, RegisterValue);
 800475e:	f7ff bfa3 	b.w	80046a8 <ADC_RegisterWrite>
 8004762:	bf00      	nop
 8004764:	42000000 	.word	0x42000000

08004768 <ADC_Initialize>:
  ADC_RegisterWrite(0x00, 0x00); // Default to bank 0.
 8004768:	2100      	movs	r1, #0
{
 800476a:	b508      	push	{r3, lr}
  ADC_RegisterWrite(0x00, 0x00); // Default to bank 0.
 800476c:	4608      	mov	r0, r1
 800476e:	f7ff ff9b 	bl	80046a8 <ADC_RegisterWrite>
  ADC_CheckPowerSupplies();
 8004772:	f7ff ffaf 	bl	80046d4 <ADC_CheckPowerSupplies>
  ADC_SelectSource(ADC_Source_None);
 8004776:	2000      	movs	r0, #0
 8004778:	f7ff ffaf 	bl	80046da <ADC_SelectSource>
  ADC_SetGain(0);
 800477c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80047a8 <ADC_Initialize+0x40>
 8004780:	f7ff ffc0 	bl	8004704 <ADC_SetGain>
  ADC_RegisterWrite(0x10, 0x00); // Set GPIO 1 and 0 to GPIO.
 8004784:	2100      	movs	r1, #0
 8004786:	2010      	movs	r0, #16
 8004788:	f7ff ff8e 	bl	80046a8 <ADC_RegisterWrite>
  ADC_RegisterWrite(0x11, 0x00); // Set GPIO 3 and 2 to GPIO.
 800478c:	2100      	movs	r1, #0
 800478e:	2011      	movs	r0, #17
 8004790:	f7ff ff8a 	bl	80046a8 <ADC_RegisterWrite>
  ADC_RegisterWrite(0x12, 0x44); // Set GPIO 1 and 0 to be outputs.
 8004794:	2144      	movs	r1, #68	; 0x44
 8004796:	2012      	movs	r0, #18
 8004798:	f7ff ff86 	bl	80046a8 <ADC_RegisterWrite>
  ADC_RegisterWrite(0x13, 0x44); // Set GPIO 3 and 2 to be outputs.
 800479c:	2144      	movs	r1, #68	; 0x44
 800479e:	2013      	movs	r0, #19
}
 80047a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ADC_RegisterWrite(0x13, 0x44); // Set GPIO 3 and 2 to be outputs.
 80047a4:	f7ff bf80 	b.w	80046a8 <ADC_RegisterWrite>
 80047a8:	00000000 	.word	0x00000000

080047ac <DAC_Mute>:
  DAC_Mute(1);
}

void DAC_Mute(uint8_t Value)
{
  HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, Value ? 0 : 1);
 80047ac:	fab0 f280 	clz	r2, r0
 80047b0:	2140      	movs	r1, #64	; 0x40
 80047b2:	4802      	ldr	r0, [pc, #8]	; (80047bc <DAC_Mute+0x10>)
 80047b4:	0952      	lsrs	r2, r2, #5
 80047b6:	f7fc ba73 	b.w	8000ca0 <HAL_GPIO_WritePin>
 80047ba:	bf00      	nop
 80047bc:	40020c00 	.word	0x40020c00

080047c0 <DAC_Initialize>:
{
 80047c0:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(DAC_FLT_GPIO_Port, DAC_FLT_Pin, 0); // Latency.
 80047c2:	4807      	ldr	r0, [pc, #28]	; (80047e0 <DAC_Initialize+0x20>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	2110      	movs	r1, #16
 80047c8:	f7fc fa6a 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, 0); // De-emphasis for 44.1kHz.
 80047cc:	4804      	ldr	r0, [pc, #16]	; (80047e0 <DAC_Initialize+0x20>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	2120      	movs	r1, #32
 80047d2:	f7fc fa65 	bl	8000ca0 <HAL_GPIO_WritePin>
  DAC_Mute(1);
 80047d6:	2001      	movs	r0, #1
}
 80047d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DAC_Mute(1);
 80047dc:	f7ff bfe6 	b.w	80047ac <DAC_Mute>
 80047e0:	40020c00 	.word	0x40020c00

080047e4 <PA_RegisterWrite8>:
// PA (TAS5719):

#define PA_I2C_Address 0x2A

void PA_RegisterWrite8(uint8_t Index, uint8_t Value)
{
 80047e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, &Value, 1, 1000), "HAL_I2C_Mem_Write");
 80047e6:	2301      	movs	r3, #1
{
 80047e8:	f88d 1017 	strb.w	r1, [sp, #23]
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, &Value, 1, 1000), "HAL_I2C_Mem_Write");
 80047ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
{
 80047f0:	4602      	mov	r2, r0
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, &Value, 1, 1000), "HAL_I2C_Mem_Write");
 80047f2:	4807      	ldr	r0, [pc, #28]	; (8004810 <PA_RegisterWrite8+0x2c>)
 80047f4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80047f8:	f10d 0117 	add.w	r1, sp, #23
 80047fc:	9100      	str	r1, [sp, #0]
 80047fe:	2154      	movs	r1, #84	; 0x54
 8004800:	f7fc fd8e 	bl	8001320 <HAL_I2C_Mem_Write>
  if (Value != HAL_OK)
 8004804:	b108      	cbz	r0, 800480a <PA_RegisterWrite8+0x26>
 8004806:	f7ff fecb 	bl	80045a0 <HandleHALResult.part.0>
}
 800480a:	b007      	add	sp, #28
 800480c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004810:	20000790 	.word	0x20000790

08004814 <PA_RegisterRead8>:

uint8_t PA_RegisterRead8(uint8_t Index)
{
 8004814:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t Result;

  HandleHALResult(HAL_I2C_Mem_Read(&hi2c1, PA_I2C_Address << 1, Index, 1, &Result, 1, 1000), "HAL_I2C_Mem_Read");
 8004816:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800481a:	2301      	movs	r3, #1
{
 800481c:	4602      	mov	r2, r0
  HandleHALResult(HAL_I2C_Mem_Read(&hi2c1, PA_I2C_Address << 1, Index, 1, &Result, 1, 1000), "HAL_I2C_Mem_Read");
 800481e:	4808      	ldr	r0, [pc, #32]	; (8004840 <PA_RegisterRead8+0x2c>)
 8004820:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8004824:	f10d 0117 	add.w	r1, sp, #23
 8004828:	9100      	str	r1, [sp, #0]
 800482a:	2154      	movs	r1, #84	; 0x54
 800482c:	f7fc fe2e 	bl	800148c <HAL_I2C_Mem_Read>
  if (Value != HAL_OK)
 8004830:	b108      	cbz	r0, 8004836 <PA_RegisterRead8+0x22>
 8004832:	f7ff feb5 	bl	80045a0 <HandleHALResult.part.0>

  return Result;
}
 8004836:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800483a:	b007      	add	sp, #28
 800483c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004840:	20000790 	.word	0x20000790

08004844 <PA_RegisterWrite16>:

void PA_RegisterWrite16(uint8_t Index, uint16_t Value)
{
 8004844:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t Data[2];

  Data[0] = (uint8_t)(Value >> 8);
 8004846:	0a0b      	lsrs	r3, r1, #8
  Data[1] = (uint8_t)(Value);
 8004848:	f88d 1015 	strb.w	r1, [sp, #21]

  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 2, 1000), "HAL_I2C_Mem_Write");
 800484c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
{
 8004850:	4602      	mov	r2, r0
  Data[0] = (uint8_t)(Value >> 8);
 8004852:	f88d 3014 	strb.w	r3, [sp, #20]
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 2, 1000), "HAL_I2C_Mem_Write");
 8004856:	2302      	movs	r3, #2
 8004858:	4807      	ldr	r0, [pc, #28]	; (8004878 <PA_RegisterWrite16+0x34>)
 800485a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800485e:	ab05      	add	r3, sp, #20
 8004860:	2154      	movs	r1, #84	; 0x54
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	2301      	movs	r3, #1
 8004866:	f7fc fd5b 	bl	8001320 <HAL_I2C_Mem_Write>
  if (Value != HAL_OK)
 800486a:	b108      	cbz	r0, 8004870 <PA_RegisterWrite16+0x2c>
 800486c:	f7ff fe98 	bl	80045a0 <HandleHALResult.part.0>
}
 8004870:	b007      	add	sp, #28
 8004872:	f85d fb04 	ldr.w	pc, [sp], #4
 8004876:	bf00      	nop
 8004878:	20000790 	.word	0x20000790

0800487c <PA_RegisterWrite32>:

void PA_RegisterWrite32(uint8_t Index, uint32_t Value)
{
 800487c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t Data[4];

  Data[0] = (uint8_t)(Value >> 24);
 800487e:	0e0b      	lsrs	r3, r1, #24
  Data[1] = (uint8_t)(Value >> 16);
  Data[2] = (uint8_t)(Value >> 8);
  Data[3] = (uint8_t)(Value);
 8004880:	f88d 1017 	strb.w	r1, [sp, #23]
{
 8004884:	4602      	mov	r2, r0

  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 4, 1000), "HAL_I2C_Mem_Write");
 8004886:	480d      	ldr	r0, [pc, #52]	; (80048bc <PA_RegisterWrite32+0x40>)
  Data[0] = (uint8_t)(Value >> 24);
 8004888:	f88d 3014 	strb.w	r3, [sp, #20]
  Data[1] = (uint8_t)(Value >> 16);
 800488c:	0c0b      	lsrs	r3, r1, #16
 800488e:	f88d 3015 	strb.w	r3, [sp, #21]
  Data[2] = (uint8_t)(Value >> 8);
 8004892:	0a0b      	lsrs	r3, r1, #8
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 4, 1000), "HAL_I2C_Mem_Write");
 8004894:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  Data[2] = (uint8_t)(Value >> 8);
 8004898:	f88d 3016 	strb.w	r3, [sp, #22]
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 4, 1000), "HAL_I2C_Mem_Write");
 800489c:	2304      	movs	r3, #4
 800489e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80048a2:	ab05      	add	r3, sp, #20
 80048a4:	2154      	movs	r1, #84	; 0x54
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	2301      	movs	r3, #1
 80048aa:	f7fc fd39 	bl	8001320 <HAL_I2C_Mem_Write>
  if (Value != HAL_OK)
 80048ae:	b108      	cbz	r0, 80048b4 <PA_RegisterWrite32+0x38>
 80048b0:	f7ff fe76 	bl	80045a0 <HandleHALResult.part.0>
}
 80048b4:	b007      	add	sp, #28
 80048b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80048ba:	bf00      	nop
 80048bc:	20000790 	.word	0x20000790

080048c0 <PA_GetErrorStatus>:
  PA_Mute();
}

uint8_t PA_GetErrorStatus()
{
  return PA_RegisterRead8(0x02);
 80048c0:	2002      	movs	r0, #2
 80048c2:	f7ff bfa7 	b.w	8004814 <PA_RegisterRead8>
	...

080048c8 <PA_SetMasterVolume>:

void PA_SetMasterVolume(float Volume_dB)
{
  uint16_t RegisterValue;

  if (Volume_dB > 24)
 80048c8:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 80048cc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80048d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d4:	dc16      	bgt.n	8004904 <PA_SetMasterVolume+0x3c>
    Volume_dB = 24;
  if (Volume_dB < -103.75)
 80048d6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800490c <PA_SetMasterVolume+0x44>
    Volume_dB = -103.75;
 80048da:	eeb4 0a47 	vcmp.f32	s0, s14
 80048de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e2:	bf48      	it	mi
 80048e4:	eeb0 0a47 	vmovmi.f32	s0, s14

  RegisterValue = 8 * (24 - Volume_dB);
 80048e8:	ee77 7ac0 	vsub.f32	s15, s15, s0

  PA_RegisterWrite16(0x07, RegisterValue);
 80048ec:	2007      	movs	r0, #7
  RegisterValue = 8 * (24 - Volume_dB);
 80048ee:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 80048f2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80048f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  PA_RegisterWrite16(0x07, RegisterValue);
 80048fa:	ee17 3a90 	vmov	r3, s15
 80048fe:	b299      	uxth	r1, r3
 8004900:	f7ff bfa0 	b.w	8004844 <PA_RegisterWrite16>
    Volume_dB = 24;
 8004904:	eeb0 0a67 	vmov.f32	s0, s15
 8004908:	e7ee      	b.n	80048e8 <PA_SetMasterVolume+0x20>
 800490a:	bf00      	nop
 800490c:	c2cf8000 	.word	0xc2cf8000

08004910 <PA_Mute>:
}

void PA_Mute()
{
  PA_RegisterWrite16(0x07, 0x03FF);
 8004910:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004914:	2007      	movs	r0, #7
 8004916:	f7ff bf95 	b.w	8004844 <PA_RegisterWrite16>
	...

0800491c <PA_Initialize>:
{
 800491c:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(TAS_PDN_GPIO_Port, TAS_PDN_Pin, 0);
 800491e:	2200      	movs	r2, #0
{
 8004920:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(TAS_PDN_GPIO_Port, TAS_PDN_Pin, 0);
 8004922:	2101      	movs	r1, #1
 8004924:	481a      	ldr	r0, [pc, #104]	; (8004990 <PA_Initialize+0x74>)
 8004926:	f7fc f9bb 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TAS_NRST_GPIO_Port, TAS_NRST_Pin, 0);
 800492a:	2200      	movs	r2, #0
 800492c:	2102      	movs	r1, #2
 800492e:	4818      	ldr	r0, [pc, #96]	; (8004990 <PA_Initialize+0x74>)
 8004930:	f7fc f9b6 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004934:	2001      	movs	r0, #1
 8004936:	f7fb fe9f 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(TAS_PDN_GPIO_Port, TAS_PDN_Pin, 1);
 800493a:	2201      	movs	r2, #1
 800493c:	4814      	ldr	r0, [pc, #80]	; (8004990 <PA_Initialize+0x74>)
 800493e:	4611      	mov	r1, r2
 8004940:	f7fc f9ae 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004944:	2001      	movs	r0, #1
 8004946:	f7fb fe97 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(TAS_NRST_GPIO_Port, TAS_NRST_Pin, 1);
 800494a:	2201      	movs	r2, #1
 800494c:	2102      	movs	r1, #2
 800494e:	4810      	ldr	r0, [pc, #64]	; (8004990 <PA_Initialize+0x74>)
 8004950:	f7fc f9a6 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_Delay(10); // ???
 8004954:	200a      	movs	r0, #10
 8004956:	f7fb fe8f 	bl	8000678 <HAL_Delay>
  PA_RegisterWrite32(0x4F, 0x00000007);
 800495a:	2107      	movs	r1, #7
 800495c:	204f      	movs	r0, #79	; 0x4f
 800495e:	f7ff ff8d 	bl	800487c <PA_RegisterWrite32>
  PA_RegisterWrite8(0x1B, 0x00);
 8004962:	2100      	movs	r1, #0
 8004964:	201b      	movs	r0, #27
 8004966:	f7ff ff3d 	bl	80047e4 <PA_RegisterWrite8>
  PA_RegisterWrite8(0x00, 0x6C);
 800496a:	216c      	movs	r1, #108	; 0x6c
 800496c:	2000      	movs	r0, #0
 800496e:	f7ff ff39 	bl	80047e4 <PA_RegisterWrite8>
  if (HeadphoneMode)
 8004972:	b15c      	cbz	r4, 800498c <PA_Initialize+0x70>
    PA_RegisterWrite8(0x05, 0x01); // !!! Is this necessary?
 8004974:	2101      	movs	r1, #1
 8004976:	2005      	movs	r0, #5
 8004978:	f7ff ff34 	bl	80047e4 <PA_RegisterWrite8>
    PA_RegisterWrite8(0x05, 0x13); // 0x13 or 0x1B. But 0x1B gives background noise and distortion.
 800497c:	2113      	movs	r1, #19
    PA_RegisterWrite8(0x05, 0x00);
 800497e:	2005      	movs	r0, #5
 8004980:	f7ff ff30 	bl	80047e4 <PA_RegisterWrite8>
}
 8004984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PA_Mute();
 8004988:	f7ff bfc2 	b.w	8004910 <PA_Mute>
    PA_RegisterWrite8(0x05, 0x00);
 800498c:	4621      	mov	r1, r4
 800498e:	e7f6      	b.n	800497e <PA_Initialize+0x62>
 8004990:	40020c00 	.word	0x40020c00

08004994 <ESP32_B_Enable>:
{
  HAL_GPIO_WritePin(ESP32_A_EN_GPIO_Port, ESP32_A_EN_Pin, Value);
}

void ESP32_B_Enable(uint8_t Value)
{
 8004994:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(ESP32_B_EN_GPIO_Port, ESP32_B_EN_Pin, Value);
 8004996:	2110      	movs	r1, #16
 8004998:	4801      	ldr	r0, [pc, #4]	; (80049a0 <ESP32_B_Enable+0xc>)
 800499a:	f7fc b981 	b.w	8000ca0 <HAL_GPIO_WritePin>
 800499e:	bf00      	nop
 80049a0:	40021000 	.word	0x40021000

080049a4 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80049a4:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <MX_DMA_Init+0x90>)
{
 80049a6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80049a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80049aa:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 80049ac:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
 80049b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80049b8:	9200      	str	r2, [sp, #0]
 80049ba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80049bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049be:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80049c4:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80049c8:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80049d2:	f7fb fe75 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80049d6:	2010      	movs	r0, #16
 80049d8:	f7fb fea4 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80049dc:	2200      	movs	r2, #0
 80049de:	2011      	movs	r0, #17
 80049e0:	4611      	mov	r1, r2
 80049e2:	f7fb fe6d 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80049e6:	2011      	movs	r0, #17
 80049e8:	f7fb fe9c 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80049ec:	2200      	movs	r2, #0
 80049ee:	2039      	movs	r0, #57	; 0x39
 80049f0:	4611      	mov	r1, r2
 80049f2:	f7fb fe65 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80049f6:	2039      	movs	r0, #57	; 0x39
 80049f8:	f7fb fe94 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80049fc:	2200      	movs	r2, #0
 80049fe:	203a      	movs	r0, #58	; 0x3a
 8004a00:	4611      	mov	r1, r2
 8004a02:	f7fb fe5d 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004a06:	203a      	movs	r0, #58	; 0x3a
 8004a08:	f7fb fe8c 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	203b      	movs	r0, #59	; 0x3b
 8004a10:	4611      	mov	r1, r2
 8004a12:	f7fb fe55 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004a16:	203b      	movs	r0, #59	; 0x3b
 8004a18:	f7fb fe84 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2044      	movs	r0, #68	; 0x44
 8004a20:	4611      	mov	r1, r2
 8004a22:	f7fb fe4d 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8004a26:	2044      	movs	r0, #68	; 0x44

}
 8004a28:	b003      	add	sp, #12
 8004a2a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8004a2e:	f7fb be79 	b.w	8000724 <HAL_NVIC_EnableIRQ>
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800

08004a38 <I2S_24bitToNormalizedFloat>:

///////////////////////////////////////////////////////////////////////////////

float I2S_24bitToNormalizedFloat(int32_t Value)
{
  if (Value & 0x00800000)
 8004a38:	0203      	lsls	r3, r0, #8
    Value |= 0xFF000000;
 8004a3a:	bf48      	it	mi
 8004a3c:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000

  return Value / 16777216.0f;
}
 8004a40:	ee00 0a10 	vmov	s0, r0
 8004a44:	eeba 0ac4 	vcvt.f32.s32	s0, s0, #24
 8004a48:	4770      	bx	lr
	...

08004a4c <I2S_NormalizedFloatTo24bit>:

int32_t I2S_NormalizedFloatTo24bit(float Value)
{
  return round(16777216.0f * Value);
 8004a4c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8004a68 <I2S_NormalizedFloatTo24bit+0x1c>
 8004a50:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004a54:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8004a58:	feb8 0b40 	vrinta.f64	d0, d0
}
 8004a5c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8004a60:	ee17 0a90 	vmov	r0, s15
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	4b800000 	.word	0x4b800000

08004a6c <AudioBuffer_TransferFromInputBufferToOutputBuffer>:
  uint16_t FirstSampleIndex, SampleIndex;
  float Audio_Left, Audio_Right;
  AudioData_Sample_t *pInputSample, *pOutputSample;

  FirstSampleIndex = 0;
  switch (AudioBufferHalf)
 8004a6c:	2801      	cmp	r0, #1
{
 8004a6e:	b510      	push	{r4, lr}
  switch (AudioBufferHalf)
 8004a70:	d004      	beq.n	8004a7c <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x10>
 8004a72:	2802      	cmp	r0, #2
 8004a74:	d013      	beq.n	8004a9e <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x32>
  {
    case abhFirstHalf: FirstSampleIndex = 0; break;
    case abhSecondHalf: FirstSampleIndex = AudioBuffer_NumSamplesPerHalf; break;
    default: ToggleLED(LED_Red); //!!!
 8004a76:	2001      	movs	r0, #1
 8004a78:	f7ff fdce 	bl	8004618 <ToggleLED>
    case abhFirstHalf: FirstSampleIndex = 0; break;
 8004a7c:	2300      	movs	r3, #0
    pOutputSample = &AudioOutputBuffer[SampleIndex];

    Audio_Left = I2S_24bitToNormalizedFloat(pInputSample->Left);
    Audio_Right = I2S_24bitToNormalizedFloat(pInputSample->Right);

    Audio_Left *= AudioTransferGain;
 8004a7e:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x68>)
 8004a80:	2411      	movs	r4, #17
 8004a82:	4915      	ldr	r1, [pc, #84]	; (8004ad8 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x6c>)
 8004a84:	edd2 6a00 	vldr	s13, [r2]
 8004a88:	4a14      	ldr	r2, [pc, #80]	; (8004adc <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x70>)
 8004a8a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004a8e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  for(SampleIndex = FirstSampleIndex; SampleIndex < FirstSampleIndex + AudioBuffer_NumSamplesPerHalf; ++SampleIndex)
 8004a92:	3c01      	subs	r4, #1
 8004a94:	3108      	adds	r1, #8
 8004a96:	3208      	adds	r2, #8
 8004a98:	b2a4      	uxth	r4, r4
 8004a9a:	b914      	cbnz	r4, 8004aa2 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x36>
    Audio_Right *= AudioTransferGain;

    pOutputSample-> Left = I2S_NormalizedFloatTo24bit(Audio_Left);
    pOutputSample-> Right = I2S_NormalizedFloatTo24bit(Audio_Right);
  }
}
 8004a9c:	bd10      	pop	{r4, pc}
  switch (AudioBufferHalf)
 8004a9e:	2310      	movs	r3, #16
 8004aa0:	e7ed      	b.n	8004a7e <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x12>
    Audio_Left = I2S_24bitToNormalizedFloat(pInputSample->Left);
 8004aa2:	f851 0c08 	ldr.w	r0, [r1, #-8]
 8004aa6:	f7ff ffc7 	bl	8004a38 <I2S_24bitToNormalizedFloat>
    Audio_Right = I2S_24bitToNormalizedFloat(pInputSample->Right);
 8004aaa:	f851 0c04 	ldr.w	r0, [r1, #-4]
    Audio_Left = I2S_24bitToNormalizedFloat(pInputSample->Left);
 8004aae:	eef0 7a40 	vmov.f32	s15, s0
    Audio_Right = I2S_24bitToNormalizedFloat(pInputSample->Right);
 8004ab2:	f7ff ffc1 	bl	8004a38 <I2S_24bitToNormalizedFloat>
    Audio_Right *= AudioTransferGain;
 8004ab6:	ee26 7a80 	vmul.f32	s14, s13, s0
    pOutputSample-> Left = I2S_NormalizedFloatTo24bit(Audio_Left);
 8004aba:	ee26 0aa7 	vmul.f32	s0, s13, s15
 8004abe:	f7ff ffc5 	bl	8004a4c <I2S_NormalizedFloatTo24bit>
    pOutputSample-> Right = I2S_NormalizedFloatTo24bit(Audio_Right);
 8004ac2:	eeb0 0a47 	vmov.f32	s0, s14
    pOutputSample-> Left = I2S_NormalizedFloatTo24bit(Audio_Left);
 8004ac6:	f842 0c08 	str.w	r0, [r2, #-8]
    pOutputSample-> Right = I2S_NormalizedFloatTo24bit(Audio_Right);
 8004aca:	f7ff ffbf 	bl	8004a4c <I2S_NormalizedFloatTo24bit>
 8004ace:	f842 0c04 	str.w	r0, [r2, #-4]
  for(SampleIndex = FirstSampleIndex; SampleIndex < FirstSampleIndex + AudioBuffer_NumSamplesPerHalf; ++SampleIndex)
 8004ad2:	e7de      	b.n	8004a92 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x26>
 8004ad4:	20000040 	.word	0x20000040
 8004ad8:	200004d0 	.word	0x200004d0
 8004adc:	200005d0 	.word	0x200005d0

08004ae0 <HAL_SAI_RxHalfCpltCallback>:
{
  if (UseSingleBuffer)
    return;

  // For debugging Rx/Tx timing.
  HAL_GPIO_WritePin(SAI_RxDMA_GPIO_Port, SAI_RxDMA_Pin, 1);
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	4805      	ldr	r0, [pc, #20]	; (8004af8 <HAL_SAI_RxHalfCpltCallback+0x18>)
{
 8004ae4:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SAI_RxDMA_GPIO_Port, SAI_RxDMA_Pin, 1);
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	f7fc f8da 	bl	8000ca0 <HAL_GPIO_WritePin>

  AudioBuffer_TransferFromInputBufferToOutputBuffer(abhFirstHalf);
 8004aec:	2001      	movs	r0, #1
}
 8004aee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  AudioBuffer_TransferFromInputBufferToOutputBuffer(abhFirstHalf);
 8004af2:	f7ff bfbb 	b.w	8004a6c <AudioBuffer_TransferFromInputBufferToOutputBuffer>
 8004af6:	bf00      	nop
 8004af8:	40020400 	.word	0x40020400

08004afc <HAL_SAI_RxCpltCallback>:
{
  if (UseSingleBuffer)
    return;

  // For debugging Rx/Tx timing.
  HAL_GPIO_WritePin(SAI_RxDMA_GPIO_Port, SAI_RxDMA_Pin, 0);
 8004afc:	4805      	ldr	r0, [pc, #20]	; (8004b14 <HAL_SAI_RxCpltCallback+0x18>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	2101      	movs	r1, #1
{
 8004b02:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SAI_RxDMA_GPIO_Port, SAI_RxDMA_Pin, 0);
 8004b04:	f7fc f8cc 	bl	8000ca0 <HAL_GPIO_WritePin>

  AudioBuffer_TransferFromInputBufferToOutputBuffer(abhSecondHalf);
 8004b08:	2002      	movs	r0, #2
}
 8004b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  AudioBuffer_TransferFromInputBufferToOutputBuffer(abhSecondHalf);
 8004b0e:	f7ff bfad 	b.w	8004a6c <AudioBuffer_TransferFromInputBufferToOutputBuffer>
 8004b12:	bf00      	nop
 8004b14:	40020400 	.word	0x40020400

08004b18 <HAL_SAI_TxHalfCpltCallback>:
{
  if (UseSingleBuffer)
    return;

  // For debugging Rx/Tx timing.
  HAL_GPIO_WritePin(SAI_TxDMA_GPIO_Port, SAI_TxDMA_Pin, 1);
 8004b18:	2201      	movs	r2, #1
 8004b1a:	2102      	movs	r1, #2
 8004b1c:	4801      	ldr	r0, [pc, #4]	; (8004b24 <HAL_SAI_TxHalfCpltCallback+0xc>)
 8004b1e:	f7fc b8bf 	b.w	8000ca0 <HAL_GPIO_WritePin>
 8004b22:	bf00      	nop
 8004b24:	40020400 	.word	0x40020400

08004b28 <HAL_SAI_TxCpltCallback>:
{
  if (UseSingleBuffer)
    return;

  // For debugging Rx/Tx timing.
  HAL_GPIO_WritePin(SAI_TxDMA_GPIO_Port, SAI_TxDMA_Pin, 0);
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	4801      	ldr	r0, [pc, #4]	; (8004b34 <HAL_SAI_TxCpltCallback+0xc>)
 8004b2e:	f7fc b8b7 	b.w	8000ca0 <HAL_GPIO_WritePin>
 8004b32:	bf00      	nop
 8004b34:	40020400 	.word	0x40020400

08004b38 <Go>:
}

///////////////////////////////////////////////////////////////////////////////

void Go()
{
 8004b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int16_t Touch_RawX, Touch_RawY, Touch_RawZ;
  int16_t Touch_ScreenX, Touch_ScreenY;
  uint8_t PA_ErrorStatus;
  char S[128];
  
  ILI9341_SetFont(&FreeSans12pt7b);
 8004b3c:	486e      	ldr	r0, [pc, #440]	; (8004cf8 <Go+0x1c0>)
{
 8004b3e:	b0a4      	sub	sp, #144	; 0x90
  ILI9341_SetFont(&FreeSans12pt7b);
 8004b40:	f7ff fa7e 	bl	8004040 <ILI9341_SetFont>
  ILI9341_SetTextColor(ILI9341_COLOR_WHITE);
 8004b44:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004b48:	f7ff fc00 	bl	800434c <ILI9341_SetTextColor>
  ILI9341_SetTextBackgroundColor(ILI9341_COLOR_BLACK);
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	f7ff fc05 	bl	800435c <ILI9341_SetTextBackgroundColor>
  ILI9341_SetTextDrawMode(tdmAnyCharBar); // Slower but enables flicker free update.
 8004b52:	2002      	movs	r0, #2
 8004b54:	f7ff fc0a 	bl	800436c <ILI9341_SetTextDrawMode>

  ILI9341_Clear(0x0000);
 8004b58:	2000      	movs	r0, #0
 8004b5a:	f7ff fa65 	bl	8004028 <ILI9341_Clear>

  uint8_t UserButtonPressed = 0;

  ESP32_B_Enable(1); // For I2S MCLK. (ESP32 must be programmed accordingly).
 8004b5e:	2001      	movs	r0, #1
 8004b60:	f7ff ff18 	bl	8004994 <ESP32_B_Enable>
  //
  I2S_SelectSource(I2S_Source_ADC);
 8004b64:	2003      	movs	r0, #3
 8004b66:	f7ff fd75 	bl	8004654 <I2S_SelectSource>
  AR1010_auto_tune(92.1, 1); // JSB: Was 96.4. Sheffield: 88.6 for Radio Sheffield. 92.1 for Radio 3.
  AR1010_set_volume(18);
  //
  PA_Initialize(0);
  //PA_Initialize(1); // Headphones.
  PA_SetMasterVolume(PA_MasterVolume_dB);
 8004b6a:	4d64      	ldr	r5, [pc, #400]	; (8004cfc <Go+0x1c4>)
  ADC_Initialize();
 8004b6c:	f7ff fdfc 	bl	8004768 <ADC_Initialize>
  uint8_t UserButtonPressed = 0;
 8004b70:	f04f 0800 	mov.w	r8, #0
  DAC_Initialize();
 8004b74:	f7ff fe24 	bl	80047c0 <DAC_Initialize>

  ADC_Source = ADC_Source_BlueJack;
 8004b78:	2602      	movs	r6, #2
  AR1010_init();
 8004b7a:	f7fe fe07 	bl	800378c <AR1010_init>
  AR1010_auto_tune(92.1, 1); // JSB: Was 96.4. Sheffield: 88.6 for Radio Sheffield. 92.1 for Radio 3.
 8004b7e:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8004d00 <Go+0x1c8>
 8004b82:	2001      	movs	r0, #1
 8004b84:	4f5f      	ldr	r7, [pc, #380]	; (8004d04 <Go+0x1cc>)
 8004b86:	f7fe fe2d 	bl	80037e4 <AR1010_auto_tune>
  AR1010_set_volume(18);
 8004b8a:	2012      	movs	r0, #18
 8004b8c:	f7fe fe9a 	bl	80038c4 <AR1010_set_volume>
  PA_Initialize(0);
 8004b90:	2000      	movs	r0, #0
 8004b92:	f7ff fec3 	bl	800491c <PA_Initialize>
  PA_SetMasterVolume(PA_MasterVolume_dB);
 8004b96:	ed95 0a00 	vldr	s0, [r5]
 8004b9a:	f7ff fe95 	bl	80048c8 <PA_SetMasterVolume>
  ADC_SelectSource(ADC_Source);
 8004b9e:	2002      	movs	r0, #2
 8004ba0:	f7ff fd9b 	bl	80046da <ADC_SelectSource>

  Y += ILI9341_GetFontYSpacing();
 8004ba4:	f7ff fa54 	bl	8004050 <ILI9341_GetFontYSpacing>
  ILI9341_DrawTextAtXY("ADC=>DAC+PA", 0, Y, tpLeft);
 8004ba8:	2301      	movs	r3, #1
  Y += ILI9341_GetFontYSpacing();
 8004baa:	b284      	uxth	r4, r0
  ILI9341_DrawTextAtXY("ADC=>DAC+PA", 0, Y, tpLeft);
 8004bac:	2100      	movs	r1, #0
 8004bae:	4856      	ldr	r0, [pc, #344]	; (8004d08 <Go+0x1d0>)
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	f7ff fbe3 	bl	800437c <ILI9341_DrawTextAtXY>

  Y += ILI9341_GetFontYSpacing();
 8004bb6:	f7ff fa4b 	bl	8004050 <ILI9341_GetFontYSpacing>
 8004bba:	4420      	add	r0, r4
  if (UseSingleBuffer)
    ILI9341_DrawTextAtXY("Using single buffer", 0, Y, tpLeft);
  else
    ILI9341_DrawTextAtXY("Using I&O buffers", 0, Y, tpLeft);
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	b282      	uxth	r2, r0
 8004bc2:	4852      	ldr	r0, [pc, #328]	; (8004d0c <Go+0x1d4>)
 8004bc4:	f7ff fbda 	bl	800437c <ILI9341_DrawTextAtXY>
    HandleHALResult(HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t *)AudioInputBuffer, (uint16_t)(AudioData_NumChannels * AudioBuffer_NumSamplesTotal)), "HAL_SAI_Receive_DMA");
    HandleHALResult(HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t *)AudioInputBuffer, (uint16_t)(AudioData_NumChannels * AudioBuffer_NumSamplesTotal)), "HAL_SAI_Transmit_DMA");
  }
  else
  {
    HandleHALResult(HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t *)AudioInputBuffer, (uint16_t)(AudioData_NumChannels * AudioBuffer_NumSamplesTotal)), "HAL_SAI_Receive_DMA");
 8004bc8:	2240      	movs	r2, #64	; 0x40
 8004bca:	4951      	ldr	r1, [pc, #324]	; (8004d10 <Go+0x1d8>)
 8004bcc:	4851      	ldr	r0, [pc, #324]	; (8004d14 <Go+0x1dc>)
 8004bce:	f7fd ff73 	bl	8002ab8 <HAL_SAI_Receive_DMA>
 8004bd2:	4951      	ldr	r1, [pc, #324]	; (8004d18 <Go+0x1e0>)
 8004bd4:	f7ff fcf0 	bl	80045b8 <HandleHALResult>
    HandleHALResult(HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t *)AudioOutputBuffer, (uint16_t)(AudioData_NumChannels * AudioBuffer_NumSamplesTotal)), "HAL_SAI_Transmit_DMA");
 8004bd8:	2240      	movs	r2, #64	; 0x40
 8004bda:	4950      	ldr	r1, [pc, #320]	; (8004d1c <Go+0x1e4>)
 8004bdc:	4850      	ldr	r0, [pc, #320]	; (8004d20 <Go+0x1e8>)
 8004bde:	f7fd ff1b 	bl	8002a18 <HAL_SAI_Transmit_DMA>
 8004be2:	4950      	ldr	r1, [pc, #320]	; (8004d24 <Go+0x1ec>)
 8004be4:	f7ff fce8 	bl	80045b8 <HandleHALResult>
  }

  DAC_Mute(0);
 8004be8:	2000      	movs	r0, #0
 8004bea:	f7ff fddf 	bl	80047ac <DAC_Mute>
  while(1)
  {
    if (UseSingleBuffer)
      ToggleLED(LED_Green);

    if (IsUserButtonPressed())
 8004bee:	f7ff fd25 	bl	800463c <IsUserButtonPressed>
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	b148      	cbz	r0, 8004c0a <Go+0xd2>
    {
      if (!UserButtonPressed)
 8004bf6:	f1b8 0f00 	cmp.w	r8, #0
 8004bfa:	d17b      	bne.n	8004cf4 <Go+0x1bc>
      {
        UserButtonPressed = 1;

        switch (ADC_Source)
 8004bfc:	f1c6 0603 	rsb	r6, r6, #3
        UserButtonPressed = 1;
 8004c00:	2401      	movs	r4, #1
        switch (ADC_Source)
 8004c02:	b2f6      	uxtb	r6, r6
            break;
          default:
            break;
        }

        ADC_SelectSource(ADC_Source);
 8004c04:	4630      	mov	r0, r6
 8004c06:	f7ff fd68 	bl	80046da <ADC_SelectSource>
      }
    }
    else
      UserButtonPressed = 0;

    if (XPT2046_Sample(&Touch_RawX, &Touch_RawY, &Touch_RawZ))
 8004c0a:	f10d 020a 	add.w	r2, sp, #10
 8004c0e:	a902      	add	r1, sp, #8
 8004c10:	f10d 0006 	add.w	r0, sp, #6
 8004c14:	f7ff fc10 	bl	8004438 <XPT2046_Sample>
 8004c18:	b390      	cbz	r0, 8004c80 <Go+0x148>
    {
      XPT2046_ConvertRawToScreen(Touch_RawX, Touch_RawY, &Touch_ScreenX, &Touch_ScreenY);
 8004c1a:	f10d 030e 	add.w	r3, sp, #14
 8004c1e:	aa03      	add	r2, sp, #12
 8004c20:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8004c24:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8004c28:	f7ff fc7a 	bl	8004520 <XPT2046_ConvertRawToScreen>
      AudioTransferGain = Clamp_float((float)Touch_ScreenY / 320.0f, 0.0f, 1.0f);
 8004c2c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8004c30:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8004d28 <Go+0x1f0>
 8004c34:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004c38:	ee07 3a90 	vmov	s15, r3
 8004c3c:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8004d2c <Go+0x1f4>
 8004c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c44:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004c48:	f7fe fe62 	bl	8003910 <Clamp_float>

      PA_MasterVolume_dB = 20.0f - 80.0f * (1.0f - ((float)Touch_ScreenX / 240.0f));
 8004c4c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8004c50:	eddf 7a37 	vldr	s15, [pc, #220]	; 8004d30 <Go+0x1f8>
 8004c54:	ee07 3a10 	vmov	s14, r3
      AudioTransferGain = Clamp_float((float)Touch_ScreenY / 320.0f, 0.0f, 1.0f);
 8004c58:	ed87 0a00 	vstr	s0, [r7]
      PA_MasterVolume_dB = 20.0f - 80.0f * (1.0f - ((float)Touch_ScreenX / 240.0f));
 8004c5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004c60:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8004c64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c68:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004d34 <Go+0x1fc>
 8004c6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004c70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004c74:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004c78:	ed85 0a00 	vstr	s0, [r5]
      PA_SetMasterVolume(PA_MasterVolume_dB);
 8004c7c:	f7ff fe24 	bl	80048c8 <PA_SetMasterVolume>
    }

    sprintf(S, "Transfer gain: %0.2f     ", AudioTransferGain);
 8004c80:	edd7 7a00 	vldr	s15, [r7]
 8004c84:	a804      	add	r0, sp, #16
 8004c86:	492c      	ldr	r1, [pc, #176]	; (8004d38 <Go+0x200>)
    if (UseSingleBuffer)
 8004c88:	46a0      	mov	r8, r4
    sprintf(S, "Transfer gain: %0.2f     ", AudioTransferGain);
 8004c8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c8e:	ec53 2b17 	vmov	r2, r3, d7
 8004c92:	f001 fbd7 	bl	8006444 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, 7 * ILI9341_GetFontYSpacing(), tpLeft);
 8004c96:	f7ff f9db 	bl	8004050 <ILI9341_GetFontYSpacing>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	b282      	uxth	r2, r0
 8004ca4:	a804      	add	r0, sp, #16
 8004ca6:	f7ff fb69 	bl	800437c <ILI9341_DrawTextAtXY>

    sprintf(S, "PA master vol: %0.1f     ", PA_MasterVolume_dB);
 8004caa:	edd5 7a00 	vldr	s15, [r5]
 8004cae:	4923      	ldr	r1, [pc, #140]	; (8004d3c <Go+0x204>)
 8004cb0:	a804      	add	r0, sp, #16
 8004cb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004cb6:	ec53 2b17 	vmov	r2, r3, d7
 8004cba:	f001 fbc3 	bl	8006444 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, 8 * ILI9341_GetFontYSpacing(), tpLeft);
 8004cbe:	f7ff f9c7 	bl	8004050 <ILI9341_GetFontYSpacing>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	00c0      	lsls	r0, r0, #3
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	b282      	uxth	r2, r0
 8004cca:	a804      	add	r0, sp, #16
 8004ccc:	f7ff fb56 	bl	800437c <ILI9341_DrawTextAtXY>

    PA_ErrorStatus = PA_GetErrorStatus();
 8004cd0:	f7ff fdf6 	bl	80048c0 <PA_GetErrorStatus>
    sprintf(S, "PA error status: %2X", PA_ErrorStatus);
 8004cd4:	491a      	ldr	r1, [pc, #104]	; (8004d40 <Go+0x208>)
    PA_ErrorStatus = PA_GetErrorStatus();
 8004cd6:	4602      	mov	r2, r0
    sprintf(S, "PA error status: %2X", PA_ErrorStatus);
 8004cd8:	a804      	add	r0, sp, #16
 8004cda:	f001 fbb3 	bl	8006444 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, 9 * ILI9341_GetFontYSpacing(), tpLeft);
 8004cde:	f7ff f9b7 	bl	8004050 <ILI9341_GetFontYSpacing>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8004ce8:	2100      	movs	r1, #0
 8004cea:	b282      	uxth	r2, r0
 8004cec:	a804      	add	r0, sp, #16
 8004cee:	f7ff fb45 	bl	800437c <ILI9341_DrawTextAtXY>
    if (UseSingleBuffer)
 8004cf2:	e77c      	b.n	8004bee <Go+0xb6>
 8004cf4:	4644      	mov	r4, r8
 8004cf6:	e788      	b.n	8004c0a <Go+0xd2>
 8004cf8:	080087a4 	.word	0x080087a4
 8004cfc:	20000044 	.word	0x20000044
 8004d00:	42b83333 	.word	0x42b83333
 8004d04:	20000040 	.word	0x20000040
 8004d08:	08008711 	.word	0x08008711
 8004d0c:	0800871d 	.word	0x0800871d
 8004d10:	200004d0 	.word	0x200004d0
 8004d14:	20000924 	.word	0x20000924
 8004d18:	0800872f 	.word	0x0800872f
 8004d1c:	200005d0 	.word	0x200005d0
 8004d20:	200008a0 	.word	0x200008a0
 8004d24:	08008743 	.word	0x08008743
 8004d28:	43a00000 	.word	0x43a00000
 8004d2c:	00000000 	.word	0x00000000
 8004d30:	43700000 	.word	0x43700000
 8004d34:	42a00000 	.word	0x42a00000
 8004d38:	08008758 	.word	0x08008758
 8004d3c:	08008772 	.word	0x08008772
 8004d40:	0800878c 	.word	0x0800878c

08004d44 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> I2S_CKIN
*/
void MX_GPIO_Init(void)
{
 8004d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d48:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d4a:	2214      	movs	r2, #20
 8004d4c:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 8004d4e:	4f73      	ldr	r7, [pc, #460]	; (8004f1c <MX_GPIO_Init+0x1d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d50:	a807      	add	r0, sp, #28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_B_EN_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 8004d52:	4e73      	ldr	r6, [pc, #460]	; (8004f20 <MX_GPIO_Init+0x1dc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d54:	f000 fe24 	bl	80059a0 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d58:	4b72      	ldr	r3, [pc, #456]	; (8004f24 <MX_GPIO_Init+0x1e0>)
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	2124      	movs	r1, #36	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_NSS_Pin|ESP32_B_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d60:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 8004d62:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 8004f2c <MX_GPIO_Init+0x1e8>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d66:	2501      	movs	r5, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d68:	f042 0210 	orr.w	r2, r2, #16
  HAL_GPIO_WritePin(GPIOB, SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin|TS_NSS_Pin 
 8004d6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f30 <MX_GPIO_Init+0x1ec>
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 8004d70:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8004f34 <MX_GPIO_Init+0x1f0>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d74:	f04f 0902 	mov.w	r9, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d78:	631a      	str	r2, [r3, #48]	; 0x30
 8004d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7c:	f002 0210 	and.w	r2, r2, #16
 8004d80:	9201      	str	r2, [sp, #4]
 8004d82:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d86:	f042 0204 	orr.w	r2, r2, #4
 8004d8a:	631a      	str	r2, [r3, #48]	; 0x30
 8004d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8e:	f002 0204 	and.w	r2, r2, #4
 8004d92:	9202      	str	r2, [sp, #8]
 8004d94:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004da4:	9203      	str	r2, [sp, #12]
 8004da6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
 8004db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db2:	f002 0201 	and.w	r2, r2, #1
 8004db6:	9204      	str	r2, [sp, #16]
 8004db8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dbc:	f042 0202 	orr.w	r2, r2, #2
 8004dc0:	631a      	str	r2, [r3, #48]	; 0x30
 8004dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc4:	f002 0202 	and.w	r2, r2, #2
 8004dc8:	9205      	str	r2, [sp, #20]
 8004dca:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dce:	f042 0208 	orr.w	r2, r2, #8
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 8004dd4:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	9306      	str	r3, [sp, #24]
 8004dde:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 8004de0:	f7fb ff5e 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, ESP32_B_EN_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);
 8004de4:	4638      	mov	r0, r7
 8004de6:	2200      	movs	r2, #0
 8004de8:	2112      	movs	r1, #18
 8004dea:	f7fb ff59 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 8004dee:	4630      	mov	r0, r6
 8004df0:	2201      	movs	r2, #1
 8004df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004df6:	f7fb ff53 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin|LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET);
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	210f      	movs	r1, #15
 8004e00:	f7fb ff4e 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 8004e04:	4658      	mov	r0, fp
 8004e06:	2200      	movs	r2, #0
 8004e08:	210e      	movs	r1, #14
 8004e0a:	f7fb ff49 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin|TS_NSS_Pin 
 8004e0e:	4640      	mov	r0, r8
 8004e10:	2200      	movs	r2, #0
 8004e12:	f641 0143 	movw	r1, #6211	; 0x1843
 8004e16:	f7fb ff43 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	4650      	mov	r0, sl
 8004e1e:	217f      	movs	r1, #127	; 0x7f
 8004e20:	f7fb ff3e 	bl	8000ca0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e24:	2324      	movs	r3, #36	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e26:	a907      	add	r1, sp, #28
 8004e28:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e2a:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e2e:	e9cd 4909 	strd	r4, r9, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e32:	f7fb fe3d 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_HSK_Pin|ESP32_B_HSK_Pin;
 8004e36:	2348      	movs	r3, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e38:	a907      	add	r1, sp, #28
 8004e3a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e3c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e3e:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e42:	f7fb fe35 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_B_EN_Pin|ESP32_A_EN_Pin;
 8004e46:	2312      	movs	r3, #18
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e48:	a907      	add	r1, sp, #28
 8004e4a:	4638      	mov	r0, r7

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUserButton_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004e4c:	4f36      	ldr	r7, [pc, #216]	; (8004f28 <MX_GPIO_Init+0x1e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e4e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e52:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e56:	f7fb fe2b 	bl	8000ab0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004e5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 8004e5e:	a907      	add	r1, sp, #28
 8004e60:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e62:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004e64:	e9cd 3707 	strd	r3, r7, [sp, #28]
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 8004e68:	f7fb fe22 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = FLASH_NSS_Pin|LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin 
 8004e6c:	f248 030f 	movw	r3, #32783	; 0x800f
                          |LCD_NBACKLIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e70:	a907      	add	r1, sp, #28
 8004e72:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e74:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e78:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e7c:	f7fb fe18 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin;
 8004e80:	230e      	movs	r3, #14
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e82:	a907      	add	r1, sp, #28
 8004e84:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e86:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e8a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e8e:	f7fb fe0f 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin;
 8004e92:	f640 0303 	movw	r3, #2051	; 0x803
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e96:	a907      	add	r1, sp, #28
 8004e98:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e9a:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e9e:	e9cd 4909 	strd	r4, r9, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea2:	f7fb fe05 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TS_NSS_Pin|SI_NRST_Pin;
 8004ea6:	f44f 5382 	mov.w	r3, #4160	; 0x1040
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eaa:	a907      	add	r1, sp, #28
 8004eac:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eae:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eb2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb6:	f7fb fdfb 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004eba:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ebe:	a907      	add	r1, sp, #28
 8004ec0:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec2:	e9cd 3907 	strd	r3, r9, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004ec6:	2305      	movs	r3, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004ecc:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ece:	f7fb fdef 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 8004ed2:	237f      	movs	r3, #127	; 0x7f
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ed4:	a907      	add	r1, sp, #28
 8004ed6:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ed8:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004edc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ee0:	f7fb fde6 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SI_INT_Pin;
 8004ee4:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 8004ee6:	a907      	add	r1, sp, #28
 8004ee8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eea:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004eec:	e9cd 3707 	strd	r3, r7, [sp, #28]
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 8004ef0:	f7fb fdde 	bl	8000ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	2017      	movs	r0, #23
 8004efa:	f7fb fbe1 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004efe:	2017      	movs	r0, #23
 8004f00:	f7fb fc10 	bl	8000724 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004f04:	4622      	mov	r2, r4
 8004f06:	4621      	mov	r1, r4
 8004f08:	2028      	movs	r0, #40	; 0x28
 8004f0a:	f7fb fbd9 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004f0e:	2028      	movs	r0, #40	; 0x28
 8004f10:	f7fb fc08 	bl	8000724 <HAL_NVIC_EnableIRQ>

}
 8004f14:	b00d      	add	sp, #52	; 0x34
 8004f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	40020800 	.word	0x40020800
 8004f24:	40023800 	.word	0x40023800
 8004f28:	10210000 	.word	0x10210000
 8004f2c:	40020000 	.word	0x40020000
 8004f30:	40020400 	.word	0x40020400
 8004f34:	40020c00 	.word	0x40020c00

08004f38 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004f38:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8004f3a:	4812      	ldr	r0, [pc, #72]	; (8004f84 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x6000030D;
 8004f3c:	4a12      	ldr	r2, [pc, #72]	; (8004f88 <MX_I2C1_Init+0x50>)
 8004f3e:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <MX_I2C1_Init+0x54>)
 8004f40:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f44:	2300      	movs	r3, #0
 8004f46:	2201      	movs	r2, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8004f48:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f4c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f50:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f54:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004f56:	f7fc f864 	bl	8001022 <HAL_I2C_Init>
 8004f5a:	b108      	cbz	r0, 8004f60 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8004f5c:	f000 f8a0 	bl	80050a0 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004f60:	2100      	movs	r1, #0
 8004f62:	4808      	ldr	r0, [pc, #32]	; (8004f84 <MX_I2C1_Init+0x4c>)
 8004f64:	f7fc fda8 	bl	8001ab8 <HAL_I2CEx_ConfigAnalogFilter>
 8004f68:	b108      	cbz	r0, 8004f6e <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 8004f6a:	f000 f899 	bl	80050a0 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004f6e:	2100      	movs	r1, #0
 8004f70:	4804      	ldr	r0, [pc, #16]	; (8004f84 <MX_I2C1_Init+0x4c>)
 8004f72:	f7fc fdc7 	bl	8001b04 <HAL_I2CEx_ConfigDigitalFilter>
 8004f76:	b118      	cbz	r0, 8004f80 <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 8004f78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004f7c:	f000 b890 	b.w	80050a0 <Error_Handler>
}
 8004f80:	bd08      	pop	{r3, pc}
 8004f82:	bf00      	nop
 8004f84:	20000790 	.word	0x20000790
 8004f88:	40005400 	.word	0x40005400
 8004f8c:	6000030d 	.word	0x6000030d

08004f90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004f90:	b530      	push	{r4, r5, lr}
 8004f92:	b089      	sub	sp, #36	; 0x24
 8004f94:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f96:	2214      	movs	r2, #20
 8004f98:	2100      	movs	r1, #0
 8004f9a:	a803      	add	r0, sp, #12
 8004f9c:	f000 fd00 	bl	80059a0 <memset>
  if(i2cHandle->Instance==I2C1)
 8004fa0:	682a      	ldr	r2, [r5, #0]
 8004fa2:	4b38      	ldr	r3, [pc, #224]	; (8005084 <HAL_I2C_MspInit+0xf4>)
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d16a      	bne.n	800507e <HAL_I2C_MspInit+0xee>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fa8:	4c37      	ldr	r4, [pc, #220]	; (8005088 <HAL_I2C_MspInit+0xf8>)
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004faa:	f44f 7140 	mov.w	r1, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fae:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fb2:	f043 0302 	orr.w	r3, r3, #2
 8004fb6:	6323      	str	r3, [r4, #48]	; 0x30
 8004fb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	9301      	str	r3, [sp, #4]
 8004fc0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fc2:	2312      	movs	r3, #18
 8004fc4:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fc8:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fca:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fcc:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004fd0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd2:	482e      	ldr	r0, [pc, #184]	; (800508c <HAL_I2C_MspInit+0xfc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004fd4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd6:	f7fb fd6b 	bl	8000ab0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004fda:	6c23      	ldr	r3, [r4, #64]	; 0x40
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004fe0:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 800509c <HAL_I2C_MspInit+0x10c>
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fe4:	f04f 0e40 	mov.w	lr, #64	; 0x40
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004fe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fec:	6423      	str	r3, [r4, #64]	; 0x40
 8004fee:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8004ff0:	4c27      	ldr	r4, [pc, #156]	; (8005090 <HAL_I2C_MspInit+0x100>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004ff6:	4620      	mov	r0, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ff8:	9302      	str	r3, [sp, #8]
 8004ffa:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004ffc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005000:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005004:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005006:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800500a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800500e:	e9c4 e302 	strd	lr, r3, [r4, #8]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005012:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005016:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800501a:	f7fb fbbb 	bl	8000794 <HAL_DMA_Init>
 800501e:	b108      	cbz	r0, 8005024 <HAL_I2C_MspInit+0x94>
    {
      Error_Handler();
 8005020:	f000 f83e 	bl	80050a0 <Error_Handler>

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005024:	4a1b      	ldr	r2, [pc, #108]	; (8005094 <HAL_I2C_MspInit+0x104>)
 8005026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800502a:	63ac      	str	r4, [r5, #56]	; 0x38
 800502c:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 800502e:	4c1a      	ldr	r4, [pc, #104]	; (8005098 <HAL_I2C_MspInit+0x108>)
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005030:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005034:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005036:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800503a:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800503c:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005040:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005044:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005048:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800504c:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005050:	f7fb fba0 	bl	8000794 <HAL_DMA_Init>
 8005054:	b108      	cbz	r0, 800505a <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8005056:	f000 f823 	bl	80050a0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800505a:	2200      	movs	r2, #0
 800505c:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800505e:	63ec      	str	r4, [r5, #60]	; 0x3c
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005060:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005062:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005064:	f7fb fb2c 	bl	80006c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005068:	201f      	movs	r0, #31
 800506a:	f7fb fb5b 	bl	8000724 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800506e:	2200      	movs	r2, #0
 8005070:	2020      	movs	r0, #32
 8005072:	4611      	mov	r1, r2
 8005074:	f7fb fb24 	bl	80006c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005078:	2020      	movs	r0, #32
 800507a:	f7fb fb53 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800507e:	b009      	add	sp, #36	; 0x24
 8005080:	bd30      	pop	{r4, r5, pc}
 8005082:	bf00      	nop
 8005084:	40005400 	.word	0x40005400
 8005088:	40023800 	.word	0x40023800
 800508c:	40020400 	.word	0x40020400
 8005090:	20000730 	.word	0x20000730
 8005094:	40026088 	.word	0x40026088
 8005098:	200006d0 	.word	0x200006d0
 800509c:	400260a0 	.word	0x400260a0

080050a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
    ToggleLED(LED_Red);
 80050a2:	2001      	movs	r0, #1
 80050a4:	f7ff fab8 	bl	8004618 <ToggleLED>
    HAL_Delay(50);
 80050a8:	2032      	movs	r0, #50	; 0x32
 80050aa:	f7fb fae5 	bl	8000678 <HAL_Delay>
    ToggleLED(LED_Red);
 80050ae:	2001      	movs	r0, #1
 80050b0:	f7ff fab2 	bl	8004618 <ToggleLED>
    HAL_Delay(50);
 80050b4:	2032      	movs	r0, #50	; 0x32
 80050b6:	f7fb fadf 	bl	8000678 <HAL_Delay>
  while(1) 
 80050ba:	e7f2      	b.n	80050a2 <Error_Handler+0x2>

080050bc <SystemClock_Config>:
{
 80050bc:	b510      	push	{r4, lr}
 80050be:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050c0:	222c      	movs	r2, #44	; 0x2c
 80050c2:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80050c4:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050c6:	a809      	add	r0, sp, #36	; 0x24
 80050c8:	f000 fc6a 	bl	80059a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050cc:	2214      	movs	r2, #20
 80050ce:	2100      	movs	r1, #0
 80050d0:	a802      	add	r0, sp, #8
 80050d2:	f000 fc65 	bl	80059a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80050d6:	2290      	movs	r2, #144	; 0x90
 80050d8:	2100      	movs	r1, #0
 80050da:	a814      	add	r0, sp, #80	; 0x50
 80050dc:	f000 fc60 	bl	80059a0 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80050e0:	4b26      	ldr	r3, [pc, #152]	; (800517c <SystemClock_Config+0xc0>)
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80050e2:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLN = 432;
 80050e4:	f04f 0c19 	mov.w	ip, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 80050e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80050ee:	641a      	str	r2, [r3, #64]	; 0x40
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80050fa:	4b21      	ldr	r3, [pc, #132]	; (8005180 <SystemClock_Config+0xc4>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800510a:	9301      	str	r3, [sp, #4]
 800510c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800510e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005112:	e9cd 0307 	strd	r0, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005116:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800511a:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800511c:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 432;
 8005120:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005124:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 432;
 8005128:	e9cd c30f 	strd	ip, r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800512c:	f7fc fd48 	bl	8001bc0 <HAL_RCC_OscConfig>
 8005130:	b108      	cbz	r0, 8005136 <SystemClock_Config+0x7a>
    Error_Handler();
 8005132:	f7ff ffb5 	bl	80050a0 <Error_Handler>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005136:	f7fc fd0b 	bl	8001b50 <HAL_PWREx_EnableOverDrive>
 800513a:	2800      	cmp	r0, #0
 800513c:	d1f9      	bne.n	8005132 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800513e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005140:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005144:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005146:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005148:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800514c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005150:	e9cd 1305 	strd	r1, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005154:	2107      	movs	r1, #7
 8005156:	f7fc fef9 	bl	8001f4c <HAL_RCC_ClockConfig>
 800515a:	2800      	cmp	r0, #0
 800515c:	d1e9      	bne.n	8005132 <SystemClock_Config+0x76>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1;
 800515e:	f44f 1382 	mov.w	r3, #1064960	; 0x104000
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005162:	902d      	str	r0, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005164:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1;
 8005166:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PIN;
 8005168:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800516c:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800516e:	f7fc ff89 	bl	8002084 <HAL_RCCEx_PeriphCLKConfig>
 8005172:	2800      	cmp	r0, #0
 8005174:	d1dd      	bne.n	8005132 <SystemClock_Config+0x76>
}
 8005176:	b038      	add	sp, #224	; 0xe0
 8005178:	bd10      	pop	{r4, pc}
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800
 8005180:	40007000 	.word	0x40007000

08005184 <main>:
{
 8005184:	b508      	push	{r3, lr}
  __ASM volatile ("dsb 0xF":::"memory");
 8005186:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800518a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800518e:	4a2b      	ldr	r2, [pc, #172]	; (800523c <main+0xb8>)
 8005190:	2100      	movs	r1, #0
 8005192:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005196:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800519a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800519e:	6953      	ldr	r3, [r2, #20]
 80051a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051a4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80051a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80051aa:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80051ae:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80051b2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80051b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80051ba:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80051be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80051c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80051c6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80051c8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80051cc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80051ce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80051d2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80051d4:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80051d8:	d2f9      	bcs.n	80051ce <main+0x4a>
    } while(sets-- != 0U);
 80051da:	3b20      	subs	r3, #32
 80051dc:	f113 0f20 	cmn.w	r3, #32
 80051e0:	d1f2      	bne.n	80051c8 <main+0x44>
 80051e2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80051e6:	6953      	ldr	r3, [r2, #20]
 80051e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ec:	6153      	str	r3, [r2, #20]
 80051ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80051f2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80051f6:	f7fb fa21 	bl	800063c <HAL_Init>
  SystemClock_Config();
 80051fa:	f7ff ff5f 	bl	80050bc <SystemClock_Config>
  MX_GPIO_Init();
 80051fe:	f7ff fda1 	bl	8004d44 <MX_GPIO_Init>
  MX_DMA_Init();
 8005202:	f7ff fbcf 	bl	80049a4 <MX_DMA_Init>
  MX_I2C1_Init();
 8005206:	f7ff fe97 	bl	8004f38 <MX_I2C1_Init>
  MX_SAI2_Init();
 800520a:	f000 f81f 	bl	800524c <MX_SAI2_Init>
  MX_SPI1_Init();
 800520e:	f000 f8ff 	bl	8005410 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005212:	f000 f923 	bl	800545c <MX_SPI2_Init>
  MX_SPI3_Init();
 8005216:	f000 f949 	bl	80054ac <MX_SPI3_Init>
  MX_TIM1_Init();
 800521a:	f000 faff 	bl	800581c <MX_TIM1_Init>
  ILI9341_Initialize(&hspi1, 0);
 800521e:	2100      	movs	r1, #0
 8005220:	4807      	ldr	r0, [pc, #28]	; (8005240 <main+0xbc>)
 8005222:	f7fe fc29 	bl	8003a78 <ILI9341_Initialize>
  HAL_GPIO_WritePin(LCD_NBACKLIGHT_GPIO_Port, LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET); // Backlight on.
 8005226:	2200      	movs	r2, #0
 8005228:	2108      	movs	r1, #8
 800522a:	4806      	ldr	r0, [pc, #24]	; (8005244 <main+0xc0>)
 800522c:	f7fb fd38 	bl	8000ca0 <HAL_GPIO_WritePin>
  XPT2046_Initialize(&hspi2);
 8005230:	4805      	ldr	r0, [pc, #20]	; (8005248 <main+0xc4>)
 8005232:	f7ff f8fb 	bl	800442c <XPT2046_Initialize>
  Go();
 8005236:	f7ff fc7f 	bl	8004b38 <Go>
  while (1)
 800523a:	e7fe      	b.n	800523a <main+0xb6>
 800523c:	e000ed00 	.word	0xe000ed00
 8005240:	20000a08 	.word	0x20000a08
 8005244:	40020800 	.word	0x40020800
 8005248:	20000a6c 	.word	0x20000a6c

0800524c <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 800524c:	b508      	push	{r3, lr}

  hsai_BlockA2.Instance = SAI2_Block_A;
 800524e:	4817      	ldr	r0, [pc, #92]	; (80052ac <MX_SAI2_Init+0x60>)
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8005250:	2100      	movs	r1, #0
 8005252:	4b17      	ldr	r3, [pc, #92]	; (80052b0 <MX_SAI2_Init+0x64>)
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8005254:	6081      	str	r1, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8005256:	6181      	str	r1, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8005258:	60c1      	str	r1, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800525a:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800525c:	e9c0 3100 	strd	r3, r1, [r0]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8005260:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005264:	61c3      	str	r3, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8005266:	2302      	movs	r3, #2
 8005268:	461a      	mov	r2, r3
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800526a:	e9c0 1104 	strd	r1, r1, [r0, #16]
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800526e:	e9c0 1109 	strd	r1, r1, [r0, #36]	; 0x24
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8005272:	f7fd fb3b 	bl	80028ec <HAL_SAI_InitProtocol>
 8005276:	b108      	cbz	r0, 800527c <MX_SAI2_Init+0x30>
  {
    Error_Handler();
 8005278:	f7ff ff12 	bl	80050a0 <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 800527c:	480d      	ldr	r0, [pc, #52]	; (80052b4 <MX_SAI2_Init+0x68>)
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800527e:	2303      	movs	r3, #3
 8005280:	4a0d      	ldr	r2, [pc, #52]	; (80052b8 <MX_SAI2_Init+0x6c>)
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8005282:	2100      	movs	r1, #0
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8005284:	e9c0 2300 	strd	r2, r3, [r0]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8005288:	2301      	movs	r3, #1
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800528a:	6101      	str	r1, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800528c:	6181      	str	r1, [r0, #24]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800528e:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8005290:	2302      	movs	r3, #2
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8005292:	60c1      	str	r1, [r0, #12]
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8005294:	461a      	mov	r2, r3
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8005296:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8005298:	e9c0 1109 	strd	r1, r1, [r0, #36]	; 0x24
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800529c:	f7fd fb26 	bl	80028ec <HAL_SAI_InitProtocol>
 80052a0:	b118      	cbz	r0, 80052aa <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
  }

}
 80052a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80052a6:	f7ff befb 	b.w	80050a0 <Error_Handler>
}
 80052aa:	bd08      	pop	{r3, pc}
 80052ac:	200008a0 	.word	0x200008a0
 80052b0:	40015c04 	.word	0x40015c04
 80052b4:	20000924 	.word	0x20000924
 80052b8:	40015c24 	.word	0x40015c24

080052bc <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80052bc:	6802      	ldr	r2, [r0, #0]
 80052be:	4b49      	ldr	r3, [pc, #292]	; (80053e4 <HAL_SAI_MspInit+0x128>)
 80052c0:	429a      	cmp	r2, r3
{
 80052c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c4:	4605      	mov	r5, r0
 80052c6:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI2_Block_A)
 80052c8:	d149      	bne.n	800535e <HAL_SAI_MspInit+0xa2>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 80052ca:	4847      	ldr	r0, [pc, #284]	; (80053e8 <HAL_SAI_MspInit+0x12c>)
 80052cc:	6803      	ldr	r3, [r0, #0]
 80052ce:	b94b      	cbnz	r3, 80052e4 <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80052d0:	4a46      	ldr	r2, [pc, #280]	; (80053ec <HAL_SAI_MspInit+0x130>)
 80052d2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80052d4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80052d8:	6451      	str	r1, [r2, #68]	; 0x44
 80052da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80052dc:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80052e0:	9201      	str	r2, [sp, #4]
 80052e2:	9a01      	ldr	r2, [sp, #4]
    }
    SAI2_client ++;
 80052e4:	3301      	adds	r3, #1
    PD13     ------> SAI2_SCK_A
    PE0     ------> SAI2_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI_A_DATAFROMSTM_Pin|SAI_A_FS_Pin|SAI_A_BCK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e6:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80052e8:	240a      	movs	r4, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ea:	2702      	movs	r7, #2
    SAI2_client ++;
 80052ec:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052f2:	a903      	add	r1, sp, #12
 80052f4:	483e      	ldr	r0, [pc, #248]	; (80053f0 <HAL_SAI_MspInit+0x134>)
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80052f6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f8:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052fc:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005300:	f7fb fbd6 	bl	8000ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI_A_MCLK_Pin;
 8005304:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 8005306:	483b      	ldr	r0, [pc, #236]	; (80053f4 <HAL_SAI_MspInit+0x138>)
 8005308:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800530a:	9407      	str	r4, [sp, #28]

    /* Peripheral DMA init*/
    
    hdma_sai2_a.Instance = DMA2_Stream2;
 800530c:	4c3a      	ldr	r4, [pc, #232]	; (80053f8 <HAL_SAI_MspInit+0x13c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800530e:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005312:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 8005316:	f7fb fbcb 	bl	8000ab0 <HAL_GPIO_Init>
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 800531a:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
 800531e:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 800540c <HAL_SAI_MspInit+0x150>
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005322:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8005326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800532a:	4620      	mov	r0, r4
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 800532c:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005330:	2340      	movs	r3, #64	; 0x40
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8005332:	e9c4 3602 	strd	r3, r6, [r4, #8]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800533a:	e9c4 e304 	strd	lr, r3, [r4, #16]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800533e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005342:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005346:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800534a:	e9c4 3608 	strd	r3, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800534e:	f7fb fa21 	bl	8000794 <HAL_DMA_Init>
 8005352:	b108      	cbz	r0, 8005358 <HAL_SAI_MspInit+0x9c>
    {
      Error_Handler();
 8005354:	f7ff fea4 	bl	80050a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8005358:	672c      	str	r4, [r5, #112]	; 0x70
 800535a:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 800535c:	66ec      	str	r4, [r5, #108]	; 0x6c
    }
    if(hsai->Instance==SAI2_Block_B)
 800535e:	682a      	ldr	r2, [r5, #0]
 8005360:	4b26      	ldr	r3, [pc, #152]	; (80053fc <HAL_SAI_MspInit+0x140>)
 8005362:	429a      	cmp	r2, r3
 8005364:	d13c      	bne.n	80053e0 <HAL_SAI_MspInit+0x124>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8005366:	4820      	ldr	r0, [pc, #128]	; (80053e8 <HAL_SAI_MspInit+0x12c>)
 8005368:	6803      	ldr	r3, [r0, #0]
 800536a:	b94b      	cbnz	r3, 8005380 <HAL_SAI_MspInit+0xc4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800536c:	4a1f      	ldr	r2, [pc, #124]	; (80053ec <HAL_SAI_MspInit+0x130>)
 800536e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005370:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005374:	6451      	str	r1, [r2, #68]	; 0x44
 8005376:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005378:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800537c:	9202      	str	r2, [sp, #8]
 800537e:	9a02      	ldr	r2, [sp, #8]
      }
    SAI2_client ++;
 8005380:	3301      	adds	r3, #1
    
    /**SAI2_B_Block_B GPIO Configuration    
    PA0/WKUP     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI_B_DATATOSTM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005382:	2201      	movs	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005384:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8005386:	a903      	add	r1, sp, #12
    SAI2_client ++;
 8005388:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800538a:	2302      	movs	r3, #2
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 800538c:	481c      	ldr	r0, [pc, #112]	; (8005400 <HAL_SAI_MspInit+0x144>)
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800538e:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_sai2_b.Instance = DMA2_Stream1;
 8005392:	4c1c      	ldr	r4, [pc, #112]	; (8005404 <HAL_SAI_MspInit+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005394:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005398:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800539a:	e9cd 6605 	strd	r6, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800539e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 80053a0:	f7fb fb86 	bl	8000ab0 <HAL_GPIO_Init>
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 80053a4:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
 80053a8:	4917      	ldr	r1, [pc, #92]	; (8005408 <HAL_SAI_MspInit+0x14c>)
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80053aa:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 80053ae:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80053b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053b6:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80053ba:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80053be:	4620      	mov	r0, r4
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80053c0:	e9c4 7306 	strd	r7, r3, [r4, #24]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80053c4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80053c8:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053cc:	e9c4 3608 	strd	r3, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80053d0:	f7fb f9e0 	bl	8000794 <HAL_DMA_Init>
 80053d4:	b108      	cbz	r0, 80053da <HAL_SAI_MspInit+0x11e>
    {
      Error_Handler();
 80053d6:	f7ff fe63 	bl	80050a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80053da:	672c      	str	r4, [r5, #112]	; 0x70
 80053dc:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80053de:	66ec      	str	r4, [r5, #108]	; 0x6c
    }
}
 80053e0:	b009      	add	sp, #36	; 0x24
 80053e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053e4:	40015c04 	.word	0x40015c04
 80053e8:	200007dc 	.word	0x200007dc
 80053ec:	40023800 	.word	0x40023800
 80053f0:	40020c00 	.word	0x40020c00
 80053f4:	40021000 	.word	0x40021000
 80053f8:	200007e0 	.word	0x200007e0
 80053fc:	40015c24 	.word	0x40015c24
 8005400:	40020000 	.word	0x40020000
 8005404:	20000840 	.word	0x20000840
 8005408:	40026428 	.word	0x40026428
 800540c:	40026440 	.word	0x40026440

08005410 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005410:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8005412:	4810      	ldr	r0, [pc, #64]	; (8005454 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005414:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005418:	4a0f      	ldr	r2, [pc, #60]	; (8005458 <MX_SPI1_Init+0x48>)
 800541a:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800541e:	2300      	movs	r3, #0
 8005420:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005424:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005428:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800542c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800542e:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8005432:	2207      	movs	r2, #7
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005434:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005438:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800543c:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005440:	2308      	movs	r3, #8
 8005442:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005444:	f7fd fc68 	bl	8002d18 <HAL_SPI_Init>
 8005448:	b118      	cbz	r0, 8005452 <MX_SPI1_Init+0x42>
  {
    Error_Handler();
  }

}
 800544a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800544e:	f7ff be27 	b.w	80050a0 <Error_Handler>
}
 8005452:	bd08      	pop	{r3, pc}
 8005454:	20000a08 	.word	0x20000a08
 8005458:	40013000 	.word	0x40013000

0800545c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800545c:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 800545e:	4811      	ldr	r0, [pc, #68]	; (80054a4 <MX_SPI2_Init+0x48>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005460:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005464:	4a10      	ldr	r2, [pc, #64]	; (80054a8 <MX_SPI2_Init+0x4c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005466:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800546a:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800546e:	2300      	movs	r3, #0
 8005470:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005474:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005478:	2220      	movs	r2, #32
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800547a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800547c:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 8005480:	2207      	movs	r2, #7
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005482:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005486:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800548a:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800548e:	2308      	movs	r3, #8
 8005490:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005492:	f7fd fc41 	bl	8002d18 <HAL_SPI_Init>
 8005496:	b118      	cbz	r0, 80054a0 <MX_SPI2_Init+0x44>
  {
    Error_Handler();
  }

}
 8005498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800549c:	f7ff be00 	b.w	80050a0 <Error_Handler>
}
 80054a0:	bd08      	pop	{r3, pc}
 80054a2:	bf00      	nop
 80054a4:	20000a6c 	.word	0x20000a6c
 80054a8:	40003800 	.word	0x40003800

080054ac <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80054ac:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 80054ae:	4811      	ldr	r0, [pc, #68]	; (80054f4 <MX_SPI3_Init+0x48>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80054b0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80054b4:	4a10      	ldr	r2, [pc, #64]	; (80054f8 <MX_SPI3_Init+0x4c>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80054b6:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80054ba:	e9c0 2300 	strd	r2, r3, [r0]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80054be:	2300      	movs	r3, #0
 80054c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80054c4:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80054c8:	2210      	movs	r2, #16
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054ca:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80054cc:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 80054d0:	2207      	movs	r2, #7
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80054d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80054d6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80054da:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80054de:	2308      	movs	r3, #8
 80054e0:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80054e2:	f7fd fc19 	bl	8002d18 <HAL_SPI_Init>
 80054e6:	b118      	cbz	r0, 80054f0 <MX_SPI3_Init+0x44>
  {
    Error_Handler();
  }

}
 80054e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80054ec:	f7ff bdd8 	b.w	80050a0 <Error_Handler>
}
 80054f0:	bd08      	pop	{r3, pc}
 80054f2:	bf00      	nop
 80054f4:	20000ad0 	.word	0x20000ad0
 80054f8:	40003c00 	.word	0x40003c00

080054fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	b08c      	sub	sp, #48	; 0x30
 8005500:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005502:	2214      	movs	r2, #20
 8005504:	2100      	movs	r1, #0
 8005506:	a807      	add	r0, sp, #28
 8005508:	f000 fa4a 	bl	80059a0 <memset>
  if(spiHandle->Instance==SPI1)
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	4a46      	ldr	r2, [pc, #280]	; (8005628 <HAL_SPI_MspInit+0x12c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d142      	bne.n	800559a <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005514:	4b45      	ldr	r3, [pc, #276]	; (800562c <HAL_SPI_MspInit+0x130>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005516:	26e0      	movs	r6, #224	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005518:	a907      	add	r1, sp, #28
 800551a:	4845      	ldr	r0, [pc, #276]	; (8005630 <HAL_SPI_MspInit+0x134>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800551c:	6c5a      	ldr	r2, [r3, #68]	; 0x44

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 800551e:	4c45      	ldr	r4, [pc, #276]	; (8005634 <HAL_SPI_MspInit+0x138>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005520:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005524:	645a      	str	r2, [r3, #68]	; 0x44
 8005526:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005528:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800552c:	9201      	str	r2, [sp, #4]
 800552e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	9302      	str	r3, [sp, #8]
 8005540:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005542:	2302      	movs	r3, #2
 8005544:	e9cd 6307 	strd	r6, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005548:	2305      	movs	r3, #5
 800554a:	2603      	movs	r6, #3
 800554c:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005550:	f7fb faae 	bl	8000ab0 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8005554:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8005558:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8005648 <HAL_SPI_MspInit+0x14c>
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800555c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005560:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005564:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005568:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800556a:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800556e:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005570:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005574:	2204      	movs	r2, #4
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005576:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005578:	e9c4 e302 	strd	lr, r3, [r4, #8]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800557c:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005580:	e9c4 1208 	strd	r1, r2, [r4, #32]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005584:	e9c4 630a 	strd	r6, r3, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005588:	f7fb f904 	bl	8000794 <HAL_DMA_Init>
 800558c:	b108      	cbz	r0, 8005592 <HAL_SPI_MspInit+0x96>
    {
      Error_Handler();
 800558e:	f7ff fd87 	bl	80050a0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8005592:	656c      	str	r4, [r5, #84]	; 0x54
 8005594:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005596:	b00c      	add	sp, #48	; 0x30
 8005598:	bd70      	pop	{r4, r5, r6, pc}
  else if(spiHandle->Instance==SPI2)
 800559a:	4a27      	ldr	r2, [pc, #156]	; (8005638 <HAL_SPI_MspInit+0x13c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d120      	bne.n	80055e2 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80055a0:	4b22      	ldr	r3, [pc, #136]	; (800562c <HAL_SPI_MspInit+0x130>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a2:	f44f 4060 	mov.w	r0, #57344	; 0xe000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80055a6:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055a8:	a907      	add	r1, sp, #28
    __HAL_RCC_SPI2_CLK_ENABLE();
 80055aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055b0:	641a      	str	r2, [r3, #64]	; 0x40
 80055b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055b4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80055b8:	9203      	str	r2, [sp, #12]
 80055ba:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055be:	f042 0202 	orr.w	r2, r2, #2
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	9304      	str	r3, [sp, #16]
 80055cc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ce:	2302      	movs	r3, #2
 80055d0:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80055d4:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d6:	4819      	ldr	r0, [pc, #100]	; (800563c <HAL_SPI_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80055d8:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055dc:	f7fb fa68 	bl	8000ab0 <HAL_GPIO_Init>
}
 80055e0:	e7d9      	b.n	8005596 <HAL_SPI_MspInit+0x9a>
  else if(spiHandle->Instance==SPI3)
 80055e2:	4a17      	ldr	r2, [pc, #92]	; (8005640 <HAL_SPI_MspInit+0x144>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d1d6      	bne.n	8005596 <HAL_SPI_MspInit+0x9a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80055e8:	4b10      	ldr	r3, [pc, #64]	; (800562c <HAL_SPI_MspInit+0x130>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80055ea:	2103      	movs	r1, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055ec:	4815      	ldr	r0, [pc, #84]	; (8005644 <HAL_SPI_MspInit+0x148>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80055ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
 80055f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055f8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80055fc:	9205      	str	r2, [sp, #20]
 80055fe:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005602:	f042 0204 	orr.w	r2, r2, #4
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005608:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	9306      	str	r3, [sp, #24]
 8005614:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005616:	2302      	movs	r3, #2
 8005618:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800561c:	2306      	movs	r3, #6
 800561e:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005622:	a907      	add	r1, sp, #28
 8005624:	e7da      	b.n	80055dc <HAL_SPI_MspInit+0xe0>
 8005626:	bf00      	nop
 8005628:	40013000 	.word	0x40013000
 800562c:	40023800 	.word	0x40023800
 8005630:	40020000 	.word	0x40020000
 8005634:	200009a8 	.word	0x200009a8
 8005638:	40003800 	.word	0x40003800
 800563c:	40020400 	.word	0x40020400
 8005640:	40003c00 	.word	0x40003c00
 8005644:	40020800 	.word	0x40020800
 8005648:	40026488 	.word	0x40026488

0800564c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <HAL_MspInit+0x2c>)
{
 800564e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8005650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005652:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005656:	641a      	str	r2, [r3, #64]	; 0x40
 8005658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800565a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800565e:	9200      	str	r2, [sp, #0]
 8005660:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005662:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005668:	645a      	str	r2, [r3, #68]	; 0x44
 800566a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005674:	b002      	add	sp, #8
 8005676:	4770      	bx	lr
 8005678:	40023800 	.word	0x40023800

0800567c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800567c:	4770      	bx	lr

0800567e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800567e:	e7fe      	b.n	800567e <HardFault_Handler>

08005680 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005680:	e7fe      	b.n	8005680 <MemManage_Handler>

08005682 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005682:	e7fe      	b.n	8005682 <BusFault_Handler>

08005684 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005684:	e7fe      	b.n	8005684 <UsageFault_Handler>

08005686 <SVC_Handler>:
 8005686:	4770      	bx	lr

08005688 <DebugMon_Handler>:
 8005688:	4770      	bx	lr

0800568a <PendSV_Handler>:
 800568a:	4770      	bx	lr

0800568c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800568c:	f7fa bfe2 	b.w	8000654 <HAL_IncTick>

08005690 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005690:	4801      	ldr	r0, [pc, #4]	; (8005698 <DMA1_Stream5_IRQHandler+0x8>)
 8005692:	f7fb b94f 	b.w	8000934 <HAL_DMA_IRQHandler>
 8005696:	bf00      	nop
 8005698:	200006d0 	.word	0x200006d0

0800569c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800569c:	4801      	ldr	r0, [pc, #4]	; (80056a4 <DMA1_Stream6_IRQHandler+0x8>)
 800569e:	f7fb b949 	b.w	8000934 <HAL_DMA_IRQHandler>
 80056a2:	bf00      	nop
 80056a4:	20000730 	.word	0x20000730

080056a8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80056a8:	2020      	movs	r0, #32
 80056aa:	f7fb bb07 	b.w	8000cbc <HAL_GPIO_EXTI_IRQHandler>
	...

080056b0 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80056b0:	4801      	ldr	r0, [pc, #4]	; (80056b8 <I2C1_EV_IRQHandler+0x8>)
 80056b2:	f7fb bfa7 	b.w	8001604 <HAL_I2C_EV_IRQHandler>
 80056b6:	bf00      	nop
 80056b8:	20000790 	.word	0x20000790

080056bc <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80056bc:	4801      	ldr	r0, [pc, #4]	; (80056c4 <I2C1_ER_IRQHandler+0x8>)
 80056be:	f7fc b9b7 	b.w	8001a30 <HAL_I2C_ER_IRQHandler>
 80056c2:	bf00      	nop
 80056c4:	20000790 	.word	0x20000790

080056c8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80056c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80056cc:	f7fb baf6 	b.w	8000cbc <HAL_GPIO_EXTI_IRQHandler>

080056d0 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80056d0:	4801      	ldr	r0, [pc, #4]	; (80056d8 <DMA2_Stream1_IRQHandler+0x8>)
 80056d2:	f7fb b92f 	b.w	8000934 <HAL_DMA_IRQHandler>
 80056d6:	bf00      	nop
 80056d8:	20000840 	.word	0x20000840

080056dc <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80056dc:	4801      	ldr	r0, [pc, #4]	; (80056e4 <DMA2_Stream2_IRQHandler+0x8>)
 80056de:	f7fb b929 	b.w	8000934 <HAL_DMA_IRQHandler>
 80056e2:	bf00      	nop
 80056e4:	200007e0 	.word	0x200007e0

080056e8 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80056e8:	4801      	ldr	r0, [pc, #4]	; (80056f0 <DMA2_Stream3_IRQHandler+0x8>)
 80056ea:	f7fb b923 	b.w	8000934 <HAL_DMA_IRQHandler>
 80056ee:	bf00      	nop
 80056f0:	20000b34 	.word	0x20000b34

080056f4 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80056f4:	4801      	ldr	r0, [pc, #4]	; (80056fc <DMA2_Stream5_IRQHandler+0x8>)
 80056f6:	f7fb b91d 	b.w	8000934 <HAL_DMA_IRQHandler>
 80056fa:	bf00      	nop
 80056fc:	200009a8 	.word	0x200009a8

08005700 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005700:	490f      	ldr	r1, [pc, #60]	; (8005740 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005702:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005704:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800570c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8005710:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <SystemInit+0x44>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	f042 0201 	orr.w	r2, r2, #1
 8005718:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800571a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005722:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005726:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005728:	4a07      	ldr	r2, [pc, #28]	; (8005748 <SystemInit+0x48>)
 800572a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005732:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005734:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005736:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800573a:	608b      	str	r3, [r1, #8]
#endif
}
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	e000ed00 	.word	0xe000ed00
 8005744:	40023800 	.word	0x40023800
 8005748:	24003010 	.word	0x24003010

0800574c <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim1);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800574c:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if(tim_pwmHandle->Instance==TIM1)
 800574e:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <HAL_TIM_PWM_MspInit+0x70>)
{
 8005750:	4605      	mov	r5, r0
  if(tim_pwmHandle->Instance==TIM1)
 8005752:	6802      	ldr	r2, [r0, #0]
 8005754:	429a      	cmp	r2, r3
 8005756:	d12f      	bne.n	80057b8 <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005758:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 800575c:	4c18      	ldr	r4, [pc, #96]	; (80057c0 <HAL_TIM_PWM_MspInit+0x74>)
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800575e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005762:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005766:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005768:	2140      	movs	r1, #64	; 0x40
    __HAL_RCC_TIM1_CLK_ENABLE();
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	645a      	str	r2, [r3, #68]	; 0x44
 8005770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8005772:	4a14      	ldr	r2, [pc, #80]	; (80057c4 <HAL_TIM_PWM_MspInit+0x78>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	9301      	str	r3, [sp, #4]
 800577a:	9b01      	ldr	r3, [sp, #4]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800577c:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8005780:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005784:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005788:	2300      	movs	r3, #0
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800578a:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800578e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8005792:	4620      	mov	r0, r4
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005794:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8005796:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800579a:	2204      	movs	r2, #4
 800579c:	e9c4 c208 	strd	ip, r2, [r4, #32]
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80057a0:	2203      	movs	r2, #3
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80057a2:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 80057a6:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80057aa:	f7fa fff3 	bl	8000794 <HAL_DMA_Init>
 80057ae:	b108      	cbz	r0, 80057b4 <HAL_TIM_PWM_MspInit+0x68>
    {
      Error_Handler();
 80057b0:	f7ff fc76 	bl	80050a0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80057b4:	626c      	str	r4, [r5, #36]	; 0x24
 80057b6:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80057b8:	b003      	add	sp, #12
 80057ba:	bd30      	pop	{r4, r5, pc}
 80057bc:	40010000 	.word	0x40010000
 80057c0:	20000b34 	.word	0x20000b34
 80057c4:	40026458 	.word	0x40026458

080057c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80057c8:	b510      	push	{r4, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057ce:	2214      	movs	r2, #20
 80057d0:	2100      	movs	r1, #0
 80057d2:	a801      	add	r0, sp, #4
 80057d4:	f000 f8e4 	bl	80059a0 <memset>
  if(timHandle->Instance==TIM1)
 80057d8:	6822      	ldr	r2, [r4, #0]
 80057da:	4b0e      	ldr	r3, [pc, #56]	; (8005814 <HAL_TIM_MspPostInit+0x4c>)
 80057dc:	429a      	cmp	r2, r3
 80057de:	d116      	bne.n	800580e <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80057e0:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    GPIO_InitStruct.Pin = LEDCHAIN_DATA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 80057e4:	a901      	add	r1, sp, #4
 80057e6:	480c      	ldr	r0, [pc, #48]	; (8005818 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80057e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ea:	f042 0210 	orr.w	r2, r2, #16
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057f0:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057fe:	2302      	movs	r3, #2
 8005800:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005804:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005806:	2301      	movs	r3, #1
 8005808:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 800580a:	f7fb f951 	bl	8000ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800580e:	b006      	add	sp, #24
 8005810:	bd10      	pop	{r4, pc}
 8005812:	bf00      	nop
 8005814:	40010000 	.word	0x40010000
 8005818:	40021000 	.word	0x40021000

0800581c <MX_TIM1_Init>:
{
 800581c:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800581e:	2400      	movs	r4, #0
{
 8005820:	b096      	sub	sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005822:	221c      	movs	r2, #28
 8005824:	4621      	mov	r1, r4
 8005826:	a804      	add	r0, sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005828:	9403      	str	r4, [sp, #12]
 800582a:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800582e:	f000 f8b7 	bl	80059a0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005832:	222c      	movs	r2, #44	; 0x2c
 8005834:	4621      	mov	r1, r4
 8005836:	eb0d 0002 	add.w	r0, sp, r2
 800583a:	f000 f8b1 	bl	80059a0 <memset>
  htim1.Instance = TIM1;
 800583e:	4823      	ldr	r0, [pc, #140]	; (80058cc <MX_TIM1_Init+0xb0>)
 8005840:	4b23      	ldr	r3, [pc, #140]	; (80058d0 <MX_TIM1_Init+0xb4>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005842:	6084      	str	r4, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 8005844:	6144      	str	r4, [r0, #20]
  htim1.Init.Prescaler = 0;
 8005846:	e9c0 3400 	strd	r3, r4, [r0]
  htim1.Init.Period = 269;
 800584a:	f240 130d 	movw	r3, #269	; 0x10d
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800584e:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005852:	2380      	movs	r3, #128	; 0x80
 8005854:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005856:	f7fd fdfb 	bl	8003450 <HAL_TIM_PWM_Init>
 800585a:	b108      	cbz	r0, 8005860 <MX_TIM1_Init+0x44>
    Error_Handler();
 800585c:	f7ff fc20 	bl	80050a0 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005860:	a901      	add	r1, sp, #4
 8005862:	481a      	ldr	r0, [pc, #104]	; (80058cc <MX_TIM1_Init+0xb0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005864:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005866:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800586a:	f7fd fec9 	bl	8003600 <HAL_TIMEx_MasterConfigSynchronization>
 800586e:	b108      	cbz	r0, 8005874 <MX_TIM1_Init+0x58>
    Error_Handler();
 8005870:	f7ff fc16 	bl	80050a0 <Error_Handler>
  sConfigOC.Pulse = 0;
 8005874:	2400      	movs	r4, #0
 8005876:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005878:	a904      	add	r1, sp, #16
 800587a:	4814      	ldr	r0, [pc, #80]	; (80058cc <MX_TIM1_Init+0xb0>)
 800587c:	4622      	mov	r2, r4
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800587e:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.Pulse = 0;
 8005880:	e9cd 3404 	strd	r3, r4, [sp, #16]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005884:	e9cd 4406 	strd	r4, r4, [sp, #24]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005888:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800588c:	f7fd fe32 	bl	80034f4 <HAL_TIM_PWM_ConfigChannel>
 8005890:	b108      	cbz	r0, 8005896 <MX_TIM1_Init+0x7a>
    Error_Handler();
 8005892:	f7ff fc05 	bl	80050a0 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800589a:	a90b      	add	r1, sp, #44	; 0x2c
 800589c:	480b      	ldr	r0, [pc, #44]	; (80058cc <MX_TIM1_Init+0xb0>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800589e:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80058a0:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80058a2:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakFilter = 0;
 80058a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80058a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80058ac:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 80058b0:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.Break2Filter = 0;
 80058b4:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80058b8:	f7fd fece 	bl	8003658 <HAL_TIMEx_ConfigBreakDeadTime>
 80058bc:	b108      	cbz	r0, 80058c2 <MX_TIM1_Init+0xa6>
    Error_Handler();
 80058be:	f7ff fbef 	bl	80050a0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80058c2:	4802      	ldr	r0, [pc, #8]	; (80058cc <MX_TIM1_Init+0xb0>)
 80058c4:	f7ff ff80 	bl	80057c8 <HAL_TIM_MspPostInit>
}
 80058c8:	b016      	add	sp, #88	; 0x58
 80058ca:	bd10      	pop	{r4, pc}
 80058cc:	20000b94 	.word	0x20000b94
 80058d0:	40010000 	.word	0x40010000

080058d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80058d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800590c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80058d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80058da:	e003      	b.n	80058e4 <LoopCopyDataInit>

080058dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80058dc:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80058de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80058e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80058e2:	3104      	adds	r1, #4

080058e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80058e4:	480b      	ldr	r0, [pc, #44]	; (8005914 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80058e6:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80058e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80058ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80058ec:	d3f6      	bcc.n	80058dc <CopyDataInit>
  ldr  r2, =_sbss
 80058ee:	4a0b      	ldr	r2, [pc, #44]	; (800591c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80058f0:	e002      	b.n	80058f8 <LoopFillZerobss>

080058f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80058f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80058f4:	f842 3b04 	str.w	r3, [r2], #4

080058f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80058f8:	4b09      	ldr	r3, [pc, #36]	; (8005920 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80058fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80058fc:	d3f9      	bcc.n	80058f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80058fe:	f7ff feff 	bl	8005700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005902:	f000 f819 	bl	8005938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005906:	f7ff fc3d 	bl	8005184 <main>
  bx  lr    
 800590a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800590c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005910:	08009660 	.word	0x08009660
  ldr  r0, =_sdata
 8005914:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005918:	2000021c 	.word	0x2000021c
  ldr  r2, =_sbss
 800591c:	2000021c 	.word	0x2000021c
  ldr  r3, = _ebss
 8005920:	20000be8 	.word	0x20000be8

08005924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005924:	e7fe      	b.n	8005924 <ADC_IRQHandler>
	...

08005928 <calloc>:
 8005928:	4b02      	ldr	r3, [pc, #8]	; (8005934 <calloc+0xc>)
 800592a:	460a      	mov	r2, r1
 800592c:	4601      	mov	r1, r0
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	f000 b83e 	b.w	80059b0 <_calloc_r>
 8005934:	2000004c 	.word	0x2000004c

08005938 <__libc_init_array>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	4d0d      	ldr	r5, [pc, #52]	; (8005970 <__libc_init_array+0x38>)
 800593c:	4c0d      	ldr	r4, [pc, #52]	; (8005974 <__libc_init_array+0x3c>)
 800593e:	1b64      	subs	r4, r4, r5
 8005940:	10a4      	asrs	r4, r4, #2
 8005942:	2600      	movs	r6, #0
 8005944:	42a6      	cmp	r6, r4
 8005946:	d109      	bne.n	800595c <__libc_init_array+0x24>
 8005948:	4d0b      	ldr	r5, [pc, #44]	; (8005978 <__libc_init_array+0x40>)
 800594a:	4c0c      	ldr	r4, [pc, #48]	; (800597c <__libc_init_array+0x44>)
 800594c:	f002 feb2 	bl	80086b4 <_init>
 8005950:	1b64      	subs	r4, r4, r5
 8005952:	10a4      	asrs	r4, r4, #2
 8005954:	2600      	movs	r6, #0
 8005956:	42a6      	cmp	r6, r4
 8005958:	d105      	bne.n	8005966 <__libc_init_array+0x2e>
 800595a:	bd70      	pop	{r4, r5, r6, pc}
 800595c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005960:	4798      	blx	r3
 8005962:	3601      	adds	r6, #1
 8005964:	e7ee      	b.n	8005944 <__libc_init_array+0xc>
 8005966:	f855 3b04 	ldr.w	r3, [r5], #4
 800596a:	4798      	blx	r3
 800596c:	3601      	adds	r6, #1
 800596e:	e7f2      	b.n	8005956 <__libc_init_array+0x1e>
 8005970:	08009658 	.word	0x08009658
 8005974:	08009658 	.word	0x08009658
 8005978:	08009658 	.word	0x08009658
 800597c:	0800965c 	.word	0x0800965c

08005980 <malloc>:
 8005980:	4b02      	ldr	r3, [pc, #8]	; (800598c <malloc+0xc>)
 8005982:	4601      	mov	r1, r0
 8005984:	6818      	ldr	r0, [r3, #0]
 8005986:	f000 b895 	b.w	8005ab4 <_malloc_r>
 800598a:	bf00      	nop
 800598c:	2000004c 	.word	0x2000004c

08005990 <free>:
 8005990:	4b02      	ldr	r3, [pc, #8]	; (800599c <free+0xc>)
 8005992:	4601      	mov	r1, r0
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	f000 b821 	b.w	80059dc <_free_r>
 800599a:	bf00      	nop
 800599c:	2000004c 	.word	0x2000004c

080059a0 <memset>:
 80059a0:	4402      	add	r2, r0
 80059a2:	4603      	mov	r3, r0
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d100      	bne.n	80059aa <memset+0xa>
 80059a8:	4770      	bx	lr
 80059aa:	f803 1b01 	strb.w	r1, [r3], #1
 80059ae:	e7f9      	b.n	80059a4 <memset+0x4>

080059b0 <_calloc_r>:
 80059b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059b2:	fba1 2402 	umull	r2, r4, r1, r2
 80059b6:	b94c      	cbnz	r4, 80059cc <_calloc_r+0x1c>
 80059b8:	4611      	mov	r1, r2
 80059ba:	9201      	str	r2, [sp, #4]
 80059bc:	f000 f87a 	bl	8005ab4 <_malloc_r>
 80059c0:	9a01      	ldr	r2, [sp, #4]
 80059c2:	4605      	mov	r5, r0
 80059c4:	b930      	cbnz	r0, 80059d4 <_calloc_r+0x24>
 80059c6:	4628      	mov	r0, r5
 80059c8:	b003      	add	sp, #12
 80059ca:	bd30      	pop	{r4, r5, pc}
 80059cc:	220c      	movs	r2, #12
 80059ce:	6002      	str	r2, [r0, #0]
 80059d0:	2500      	movs	r5, #0
 80059d2:	e7f8      	b.n	80059c6 <_calloc_r+0x16>
 80059d4:	4621      	mov	r1, r4
 80059d6:	f7ff ffe3 	bl	80059a0 <memset>
 80059da:	e7f4      	b.n	80059c6 <_calloc_r+0x16>

080059dc <_free_r>:
 80059dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059de:	2900      	cmp	r1, #0
 80059e0:	d044      	beq.n	8005a6c <_free_r+0x90>
 80059e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059e6:	9001      	str	r0, [sp, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f1a1 0404 	sub.w	r4, r1, #4
 80059ee:	bfb8      	it	lt
 80059f0:	18e4      	addlt	r4, r4, r3
 80059f2:	f001 fbcb 	bl	800718c <__malloc_lock>
 80059f6:	4a1e      	ldr	r2, [pc, #120]	; (8005a70 <_free_r+0x94>)
 80059f8:	9801      	ldr	r0, [sp, #4]
 80059fa:	6813      	ldr	r3, [r2, #0]
 80059fc:	b933      	cbnz	r3, 8005a0c <_free_r+0x30>
 80059fe:	6063      	str	r3, [r4, #4]
 8005a00:	6014      	str	r4, [r2, #0]
 8005a02:	b003      	add	sp, #12
 8005a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a08:	f001 bbc6 	b.w	8007198 <__malloc_unlock>
 8005a0c:	42a3      	cmp	r3, r4
 8005a0e:	d908      	bls.n	8005a22 <_free_r+0x46>
 8005a10:	6825      	ldr	r5, [r4, #0]
 8005a12:	1961      	adds	r1, r4, r5
 8005a14:	428b      	cmp	r3, r1
 8005a16:	bf01      	itttt	eq
 8005a18:	6819      	ldreq	r1, [r3, #0]
 8005a1a:	685b      	ldreq	r3, [r3, #4]
 8005a1c:	1949      	addeq	r1, r1, r5
 8005a1e:	6021      	streq	r1, [r4, #0]
 8005a20:	e7ed      	b.n	80059fe <_free_r+0x22>
 8005a22:	461a      	mov	r2, r3
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	b10b      	cbz	r3, 8005a2c <_free_r+0x50>
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	d9fa      	bls.n	8005a22 <_free_r+0x46>
 8005a2c:	6811      	ldr	r1, [r2, #0]
 8005a2e:	1855      	adds	r5, r2, r1
 8005a30:	42a5      	cmp	r5, r4
 8005a32:	d10b      	bne.n	8005a4c <_free_r+0x70>
 8005a34:	6824      	ldr	r4, [r4, #0]
 8005a36:	4421      	add	r1, r4
 8005a38:	1854      	adds	r4, r2, r1
 8005a3a:	42a3      	cmp	r3, r4
 8005a3c:	6011      	str	r1, [r2, #0]
 8005a3e:	d1e0      	bne.n	8005a02 <_free_r+0x26>
 8005a40:	681c      	ldr	r4, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	6053      	str	r3, [r2, #4]
 8005a46:	4421      	add	r1, r4
 8005a48:	6011      	str	r1, [r2, #0]
 8005a4a:	e7da      	b.n	8005a02 <_free_r+0x26>
 8005a4c:	d902      	bls.n	8005a54 <_free_r+0x78>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	6003      	str	r3, [r0, #0]
 8005a52:	e7d6      	b.n	8005a02 <_free_r+0x26>
 8005a54:	6825      	ldr	r5, [r4, #0]
 8005a56:	1961      	adds	r1, r4, r5
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf04      	itt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	6063      	str	r3, [r4, #4]
 8005a62:	bf04      	itt	eq
 8005a64:	1949      	addeq	r1, r1, r5
 8005a66:	6021      	streq	r1, [r4, #0]
 8005a68:	6054      	str	r4, [r2, #4]
 8005a6a:	e7ca      	b.n	8005a02 <_free_r+0x26>
 8005a6c:	b003      	add	sp, #12
 8005a6e:	bd30      	pop	{r4, r5, pc}
 8005a70:	20000bd4 	.word	0x20000bd4

08005a74 <sbrk_aligned>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	4e0e      	ldr	r6, [pc, #56]	; (8005ab0 <sbrk_aligned+0x3c>)
 8005a78:	460c      	mov	r4, r1
 8005a7a:	6831      	ldr	r1, [r6, #0]
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	b911      	cbnz	r1, 8005a86 <sbrk_aligned+0x12>
 8005a80:	f000 fcd0 	bl	8006424 <_sbrk_r>
 8005a84:	6030      	str	r0, [r6, #0]
 8005a86:	4621      	mov	r1, r4
 8005a88:	4628      	mov	r0, r5
 8005a8a:	f000 fccb 	bl	8006424 <_sbrk_r>
 8005a8e:	1c43      	adds	r3, r0, #1
 8005a90:	d00a      	beq.n	8005aa8 <sbrk_aligned+0x34>
 8005a92:	1cc4      	adds	r4, r0, #3
 8005a94:	f024 0403 	bic.w	r4, r4, #3
 8005a98:	42a0      	cmp	r0, r4
 8005a9a:	d007      	beq.n	8005aac <sbrk_aligned+0x38>
 8005a9c:	1a21      	subs	r1, r4, r0
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f000 fcc0 	bl	8006424 <_sbrk_r>
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d101      	bne.n	8005aac <sbrk_aligned+0x38>
 8005aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8005aac:	4620      	mov	r0, r4
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	20000bd8 	.word	0x20000bd8

08005ab4 <_malloc_r>:
 8005ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab8:	1ccd      	adds	r5, r1, #3
 8005aba:	f025 0503 	bic.w	r5, r5, #3
 8005abe:	3508      	adds	r5, #8
 8005ac0:	2d0c      	cmp	r5, #12
 8005ac2:	bf38      	it	cc
 8005ac4:	250c      	movcc	r5, #12
 8005ac6:	2d00      	cmp	r5, #0
 8005ac8:	4607      	mov	r7, r0
 8005aca:	db01      	blt.n	8005ad0 <_malloc_r+0x1c>
 8005acc:	42a9      	cmp	r1, r5
 8005ace:	d905      	bls.n	8005adc <_malloc_r+0x28>
 8005ad0:	230c      	movs	r3, #12
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	2600      	movs	r6, #0
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005adc:	4e2e      	ldr	r6, [pc, #184]	; (8005b98 <_malloc_r+0xe4>)
 8005ade:	f001 fb55 	bl	800718c <__malloc_lock>
 8005ae2:	6833      	ldr	r3, [r6, #0]
 8005ae4:	461c      	mov	r4, r3
 8005ae6:	bb34      	cbnz	r4, 8005b36 <_malloc_r+0x82>
 8005ae8:	4629      	mov	r1, r5
 8005aea:	4638      	mov	r0, r7
 8005aec:	f7ff ffc2 	bl	8005a74 <sbrk_aligned>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	4604      	mov	r4, r0
 8005af4:	d14d      	bne.n	8005b92 <_malloc_r+0xde>
 8005af6:	6834      	ldr	r4, [r6, #0]
 8005af8:	4626      	mov	r6, r4
 8005afa:	2e00      	cmp	r6, #0
 8005afc:	d140      	bne.n	8005b80 <_malloc_r+0xcc>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	4631      	mov	r1, r6
 8005b02:	4638      	mov	r0, r7
 8005b04:	eb04 0803 	add.w	r8, r4, r3
 8005b08:	f000 fc8c 	bl	8006424 <_sbrk_r>
 8005b0c:	4580      	cmp	r8, r0
 8005b0e:	d13a      	bne.n	8005b86 <_malloc_r+0xd2>
 8005b10:	6821      	ldr	r1, [r4, #0]
 8005b12:	3503      	adds	r5, #3
 8005b14:	1a6d      	subs	r5, r5, r1
 8005b16:	f025 0503 	bic.w	r5, r5, #3
 8005b1a:	3508      	adds	r5, #8
 8005b1c:	2d0c      	cmp	r5, #12
 8005b1e:	bf38      	it	cc
 8005b20:	250c      	movcc	r5, #12
 8005b22:	4629      	mov	r1, r5
 8005b24:	4638      	mov	r0, r7
 8005b26:	f7ff ffa5 	bl	8005a74 <sbrk_aligned>
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d02b      	beq.n	8005b86 <_malloc_r+0xd2>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	442b      	add	r3, r5
 8005b32:	6023      	str	r3, [r4, #0]
 8005b34:	e00e      	b.n	8005b54 <_malloc_r+0xa0>
 8005b36:	6822      	ldr	r2, [r4, #0]
 8005b38:	1b52      	subs	r2, r2, r5
 8005b3a:	d41e      	bmi.n	8005b7a <_malloc_r+0xc6>
 8005b3c:	2a0b      	cmp	r2, #11
 8005b3e:	d916      	bls.n	8005b6e <_malloc_r+0xba>
 8005b40:	1961      	adds	r1, r4, r5
 8005b42:	42a3      	cmp	r3, r4
 8005b44:	6025      	str	r5, [r4, #0]
 8005b46:	bf18      	it	ne
 8005b48:	6059      	strne	r1, [r3, #4]
 8005b4a:	6863      	ldr	r3, [r4, #4]
 8005b4c:	bf08      	it	eq
 8005b4e:	6031      	streq	r1, [r6, #0]
 8005b50:	5162      	str	r2, [r4, r5]
 8005b52:	604b      	str	r3, [r1, #4]
 8005b54:	4638      	mov	r0, r7
 8005b56:	f104 060b 	add.w	r6, r4, #11
 8005b5a:	f001 fb1d 	bl	8007198 <__malloc_unlock>
 8005b5e:	f026 0607 	bic.w	r6, r6, #7
 8005b62:	1d23      	adds	r3, r4, #4
 8005b64:	1af2      	subs	r2, r6, r3
 8005b66:	d0b6      	beq.n	8005ad6 <_malloc_r+0x22>
 8005b68:	1b9b      	subs	r3, r3, r6
 8005b6a:	50a3      	str	r3, [r4, r2]
 8005b6c:	e7b3      	b.n	8005ad6 <_malloc_r+0x22>
 8005b6e:	6862      	ldr	r2, [r4, #4]
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	bf0c      	ite	eq
 8005b74:	6032      	streq	r2, [r6, #0]
 8005b76:	605a      	strne	r2, [r3, #4]
 8005b78:	e7ec      	b.n	8005b54 <_malloc_r+0xa0>
 8005b7a:	4623      	mov	r3, r4
 8005b7c:	6864      	ldr	r4, [r4, #4]
 8005b7e:	e7b2      	b.n	8005ae6 <_malloc_r+0x32>
 8005b80:	4634      	mov	r4, r6
 8005b82:	6876      	ldr	r6, [r6, #4]
 8005b84:	e7b9      	b.n	8005afa <_malloc_r+0x46>
 8005b86:	230c      	movs	r3, #12
 8005b88:	603b      	str	r3, [r7, #0]
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	f001 fb04 	bl	8007198 <__malloc_unlock>
 8005b90:	e7a1      	b.n	8005ad6 <_malloc_r+0x22>
 8005b92:	6025      	str	r5, [r4, #0]
 8005b94:	e7de      	b.n	8005b54 <_malloc_r+0xa0>
 8005b96:	bf00      	nop
 8005b98:	20000bd4 	.word	0x20000bd4

08005b9c <__cvt>:
 8005b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b9e:	ed2d 8b02 	vpush	{d8}
 8005ba2:	eeb0 8b40 	vmov.f64	d8, d0
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	4617      	mov	r7, r2
 8005baa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005bac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005bae:	ee18 2a90 	vmov	r2, s17
 8005bb2:	f025 0520 	bic.w	r5, r5, #32
 8005bb6:	2a00      	cmp	r2, #0
 8005bb8:	bfb6      	itet	lt
 8005bba:	222d      	movlt	r2, #45	; 0x2d
 8005bbc:	2200      	movge	r2, #0
 8005bbe:	eeb1 8b40 	vneglt.f64	d8, d0
 8005bc2:	2d46      	cmp	r5, #70	; 0x46
 8005bc4:	460c      	mov	r4, r1
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	d004      	beq.n	8005bd4 <__cvt+0x38>
 8005bca:	2d45      	cmp	r5, #69	; 0x45
 8005bcc:	d100      	bne.n	8005bd0 <__cvt+0x34>
 8005bce:	3401      	adds	r4, #1
 8005bd0:	2102      	movs	r1, #2
 8005bd2:	e000      	b.n	8005bd6 <__cvt+0x3a>
 8005bd4:	2103      	movs	r1, #3
 8005bd6:	ab03      	add	r3, sp, #12
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	ab02      	add	r3, sp, #8
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	4622      	mov	r2, r4
 8005be0:	4633      	mov	r3, r6
 8005be2:	eeb0 0b48 	vmov.f64	d0, d8
 8005be6:	f000 fd3f 	bl	8006668 <_dtoa_r>
 8005bea:	2d47      	cmp	r5, #71	; 0x47
 8005bec:	d101      	bne.n	8005bf2 <__cvt+0x56>
 8005bee:	07fb      	lsls	r3, r7, #31
 8005bf0:	d51a      	bpl.n	8005c28 <__cvt+0x8c>
 8005bf2:	2d46      	cmp	r5, #70	; 0x46
 8005bf4:	eb00 0204 	add.w	r2, r0, r4
 8005bf8:	d10c      	bne.n	8005c14 <__cvt+0x78>
 8005bfa:	7803      	ldrb	r3, [r0, #0]
 8005bfc:	2b30      	cmp	r3, #48	; 0x30
 8005bfe:	d107      	bne.n	8005c10 <__cvt+0x74>
 8005c00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c08:	bf1c      	itt	ne
 8005c0a:	f1c4 0401 	rsbne	r4, r4, #1
 8005c0e:	6034      	strne	r4, [r6, #0]
 8005c10:	6833      	ldr	r3, [r6, #0]
 8005c12:	441a      	add	r2, r3
 8005c14:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c1c:	bf08      	it	eq
 8005c1e:	9203      	streq	r2, [sp, #12]
 8005c20:	2130      	movs	r1, #48	; 0x30
 8005c22:	9b03      	ldr	r3, [sp, #12]
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d307      	bcc.n	8005c38 <__cvt+0x9c>
 8005c28:	9b03      	ldr	r3, [sp, #12]
 8005c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c2c:	1a1b      	subs	r3, r3, r0
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	b005      	add	sp, #20
 8005c32:	ecbd 8b02 	vpop	{d8}
 8005c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c38:	1c5c      	adds	r4, r3, #1
 8005c3a:	9403      	str	r4, [sp, #12]
 8005c3c:	7019      	strb	r1, [r3, #0]
 8005c3e:	e7f0      	b.n	8005c22 <__cvt+0x86>

08005c40 <__exponent>:
 8005c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c42:	4603      	mov	r3, r0
 8005c44:	2900      	cmp	r1, #0
 8005c46:	bfb8      	it	lt
 8005c48:	4249      	neglt	r1, r1
 8005c4a:	f803 2b02 	strb.w	r2, [r3], #2
 8005c4e:	bfb4      	ite	lt
 8005c50:	222d      	movlt	r2, #45	; 0x2d
 8005c52:	222b      	movge	r2, #43	; 0x2b
 8005c54:	2909      	cmp	r1, #9
 8005c56:	7042      	strb	r2, [r0, #1]
 8005c58:	dd2a      	ble.n	8005cb0 <__exponent+0x70>
 8005c5a:	f10d 0407 	add.w	r4, sp, #7
 8005c5e:	46a4      	mov	ip, r4
 8005c60:	270a      	movs	r7, #10
 8005c62:	46a6      	mov	lr, r4
 8005c64:	460a      	mov	r2, r1
 8005c66:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c6a:	fb07 1516 	mls	r5, r7, r6, r1
 8005c6e:	3530      	adds	r5, #48	; 0x30
 8005c70:	2a63      	cmp	r2, #99	; 0x63
 8005c72:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	dcf1      	bgt.n	8005c62 <__exponent+0x22>
 8005c7e:	3130      	adds	r1, #48	; 0x30
 8005c80:	f1ae 0502 	sub.w	r5, lr, #2
 8005c84:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c88:	1c44      	adds	r4, r0, #1
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	4561      	cmp	r1, ip
 8005c8e:	d30a      	bcc.n	8005ca6 <__exponent+0x66>
 8005c90:	f10d 0209 	add.w	r2, sp, #9
 8005c94:	eba2 020e 	sub.w	r2, r2, lr
 8005c98:	4565      	cmp	r5, ip
 8005c9a:	bf88      	it	hi
 8005c9c:	2200      	movhi	r2, #0
 8005c9e:	4413      	add	r3, r2
 8005ca0:	1a18      	subs	r0, r3, r0
 8005ca2:	b003      	add	sp, #12
 8005ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005caa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005cae:	e7ed      	b.n	8005c8c <__exponent+0x4c>
 8005cb0:	2330      	movs	r3, #48	; 0x30
 8005cb2:	3130      	adds	r1, #48	; 0x30
 8005cb4:	7083      	strb	r3, [r0, #2]
 8005cb6:	70c1      	strb	r1, [r0, #3]
 8005cb8:	1d03      	adds	r3, r0, #4
 8005cba:	e7f1      	b.n	8005ca0 <__exponent+0x60>
 8005cbc:	0000      	movs	r0, r0
	...

08005cc0 <_printf_float>:
 8005cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc4:	b08b      	sub	sp, #44	; 0x2c
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005ccc:	4616      	mov	r6, r2
 8005cce:	461f      	mov	r7, r3
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	f001 fa37 	bl	8007144 <_localeconv_r>
 8005cd6:	f8d0 b000 	ldr.w	fp, [r0]
 8005cda:	4658      	mov	r0, fp
 8005cdc:	f7fa fab0 	bl	8000240 <strlen>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	9308      	str	r3, [sp, #32]
 8005ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005cec:	6822      	ldr	r2, [r4, #0]
 8005cee:	3307      	adds	r3, #7
 8005cf0:	f023 0307 	bic.w	r3, r3, #7
 8005cf4:	f103 0108 	add.w	r1, r3, #8
 8005cf8:	f8c8 1000 	str.w	r1, [r8]
 8005cfc:	4682      	mov	sl, r0
 8005cfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d02:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005d06:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8005f68 <_printf_float+0x2a8>
 8005d0a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005d0e:	eeb0 6bc0 	vabs.f64	d6, d0
 8005d12:	eeb4 6b47 	vcmp.f64	d6, d7
 8005d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d1a:	dd24      	ble.n	8005d66 <_printf_float+0xa6>
 8005d1c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d24:	d502      	bpl.n	8005d2c <_printf_float+0x6c>
 8005d26:	232d      	movs	r3, #45	; 0x2d
 8005d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d2c:	4b90      	ldr	r3, [pc, #576]	; (8005f70 <_printf_float+0x2b0>)
 8005d2e:	4891      	ldr	r0, [pc, #580]	; (8005f74 <_printf_float+0x2b4>)
 8005d30:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005d34:	bf94      	ite	ls
 8005d36:	4698      	movls	r8, r3
 8005d38:	4680      	movhi	r8, r0
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	f022 0204 	bic.w	r2, r2, #4
 8005d42:	2300      	movs	r3, #0
 8005d44:	6022      	str	r2, [r4, #0]
 8005d46:	9304      	str	r3, [sp, #16]
 8005d48:	9700      	str	r7, [sp, #0]
 8005d4a:	4633      	mov	r3, r6
 8005d4c:	aa09      	add	r2, sp, #36	; 0x24
 8005d4e:	4621      	mov	r1, r4
 8005d50:	4628      	mov	r0, r5
 8005d52:	f000 f9d3 	bl	80060fc <_printf_common>
 8005d56:	3001      	adds	r0, #1
 8005d58:	f040 808a 	bne.w	8005e70 <_printf_float+0x1b0>
 8005d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d60:	b00b      	add	sp, #44	; 0x2c
 8005d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d66:	eeb4 0b40 	vcmp.f64	d0, d0
 8005d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6e:	d709      	bvc.n	8005d84 <_printf_float+0xc4>
 8005d70:	ee10 3a90 	vmov	r3, s1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	bfbc      	itt	lt
 8005d78:	232d      	movlt	r3, #45	; 0x2d
 8005d7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d7e:	487e      	ldr	r0, [pc, #504]	; (8005f78 <_printf_float+0x2b8>)
 8005d80:	4b7e      	ldr	r3, [pc, #504]	; (8005f7c <_printf_float+0x2bc>)
 8005d82:	e7d5      	b.n	8005d30 <_printf_float+0x70>
 8005d84:	6863      	ldr	r3, [r4, #4]
 8005d86:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005d8a:	9104      	str	r1, [sp, #16]
 8005d8c:	1c59      	adds	r1, r3, #1
 8005d8e:	d13c      	bne.n	8005e0a <_printf_float+0x14a>
 8005d90:	2306      	movs	r3, #6
 8005d92:	6063      	str	r3, [r4, #4]
 8005d94:	2300      	movs	r3, #0
 8005d96:	9303      	str	r3, [sp, #12]
 8005d98:	ab08      	add	r3, sp, #32
 8005d9a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005d9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005da2:	ab07      	add	r3, sp, #28
 8005da4:	6861      	ldr	r1, [r4, #4]
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	6022      	str	r2, [r4, #0]
 8005daa:	f10d 031b 	add.w	r3, sp, #27
 8005dae:	4628      	mov	r0, r5
 8005db0:	f7ff fef4 	bl	8005b9c <__cvt>
 8005db4:	9b04      	ldr	r3, [sp, #16]
 8005db6:	9907      	ldr	r1, [sp, #28]
 8005db8:	2b47      	cmp	r3, #71	; 0x47
 8005dba:	4680      	mov	r8, r0
 8005dbc:	d108      	bne.n	8005dd0 <_printf_float+0x110>
 8005dbe:	1cc8      	adds	r0, r1, #3
 8005dc0:	db02      	blt.n	8005dc8 <_printf_float+0x108>
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	4299      	cmp	r1, r3
 8005dc6:	dd41      	ble.n	8005e4c <_printf_float+0x18c>
 8005dc8:	f1a9 0902 	sub.w	r9, r9, #2
 8005dcc:	fa5f f989 	uxtb.w	r9, r9
 8005dd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005dd4:	d820      	bhi.n	8005e18 <_printf_float+0x158>
 8005dd6:	3901      	subs	r1, #1
 8005dd8:	464a      	mov	r2, r9
 8005dda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005dde:	9107      	str	r1, [sp, #28]
 8005de0:	f7ff ff2e 	bl	8005c40 <__exponent>
 8005de4:	9a08      	ldr	r2, [sp, #32]
 8005de6:	9004      	str	r0, [sp, #16]
 8005de8:	1813      	adds	r3, r2, r0
 8005dea:	2a01      	cmp	r2, #1
 8005dec:	6123      	str	r3, [r4, #16]
 8005dee:	dc02      	bgt.n	8005df6 <_printf_float+0x136>
 8005df0:	6822      	ldr	r2, [r4, #0]
 8005df2:	07d2      	lsls	r2, r2, #31
 8005df4:	d501      	bpl.n	8005dfa <_printf_float+0x13a>
 8005df6:	3301      	adds	r3, #1
 8005df8:	6123      	str	r3, [r4, #16]
 8005dfa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0a2      	beq.n	8005d48 <_printf_float+0x88>
 8005e02:	232d      	movs	r3, #45	; 0x2d
 8005e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e08:	e79e      	b.n	8005d48 <_printf_float+0x88>
 8005e0a:	9904      	ldr	r1, [sp, #16]
 8005e0c:	2947      	cmp	r1, #71	; 0x47
 8005e0e:	d1c1      	bne.n	8005d94 <_printf_float+0xd4>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1bf      	bne.n	8005d94 <_printf_float+0xd4>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e7bc      	b.n	8005d92 <_printf_float+0xd2>
 8005e18:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005e1c:	d118      	bne.n	8005e50 <_printf_float+0x190>
 8005e1e:	2900      	cmp	r1, #0
 8005e20:	6863      	ldr	r3, [r4, #4]
 8005e22:	dd0b      	ble.n	8005e3c <_printf_float+0x17c>
 8005e24:	6121      	str	r1, [r4, #16]
 8005e26:	b913      	cbnz	r3, 8005e2e <_printf_float+0x16e>
 8005e28:	6822      	ldr	r2, [r4, #0]
 8005e2a:	07d0      	lsls	r0, r2, #31
 8005e2c:	d502      	bpl.n	8005e34 <_printf_float+0x174>
 8005e2e:	3301      	adds	r3, #1
 8005e30:	440b      	add	r3, r1
 8005e32:	6123      	str	r3, [r4, #16]
 8005e34:	2300      	movs	r3, #0
 8005e36:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e38:	9304      	str	r3, [sp, #16]
 8005e3a:	e7de      	b.n	8005dfa <_printf_float+0x13a>
 8005e3c:	b913      	cbnz	r3, 8005e44 <_printf_float+0x184>
 8005e3e:	6822      	ldr	r2, [r4, #0]
 8005e40:	07d2      	lsls	r2, r2, #31
 8005e42:	d501      	bpl.n	8005e48 <_printf_float+0x188>
 8005e44:	3302      	adds	r3, #2
 8005e46:	e7f4      	b.n	8005e32 <_printf_float+0x172>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e7f2      	b.n	8005e32 <_printf_float+0x172>
 8005e4c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005e50:	9b08      	ldr	r3, [sp, #32]
 8005e52:	4299      	cmp	r1, r3
 8005e54:	db05      	blt.n	8005e62 <_printf_float+0x1a2>
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	6121      	str	r1, [r4, #16]
 8005e5a:	07d8      	lsls	r0, r3, #31
 8005e5c:	d5ea      	bpl.n	8005e34 <_printf_float+0x174>
 8005e5e:	1c4b      	adds	r3, r1, #1
 8005e60:	e7e7      	b.n	8005e32 <_printf_float+0x172>
 8005e62:	2900      	cmp	r1, #0
 8005e64:	bfd4      	ite	le
 8005e66:	f1c1 0202 	rsble	r2, r1, #2
 8005e6a:	2201      	movgt	r2, #1
 8005e6c:	4413      	add	r3, r2
 8005e6e:	e7e0      	b.n	8005e32 <_printf_float+0x172>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	055a      	lsls	r2, r3, #21
 8005e74:	d407      	bmi.n	8005e86 <_printf_float+0x1c6>
 8005e76:	6923      	ldr	r3, [r4, #16]
 8005e78:	4642      	mov	r2, r8
 8005e7a:	4631      	mov	r1, r6
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	47b8      	blx	r7
 8005e80:	3001      	adds	r0, #1
 8005e82:	d12a      	bne.n	8005eda <_printf_float+0x21a>
 8005e84:	e76a      	b.n	8005d5c <_printf_float+0x9c>
 8005e86:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e8a:	f240 80e2 	bls.w	8006052 <_printf_float+0x392>
 8005e8e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005e92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e9a:	d133      	bne.n	8005f04 <_printf_float+0x244>
 8005e9c:	4a38      	ldr	r2, [pc, #224]	; (8005f80 <_printf_float+0x2c0>)
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4631      	mov	r1, r6
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	47b8      	blx	r7
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	f43f af58 	beq.w	8005d5c <_printf_float+0x9c>
 8005eac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	db02      	blt.n	8005eba <_printf_float+0x1fa>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	07d8      	lsls	r0, r3, #31
 8005eb8:	d50f      	bpl.n	8005eda <_printf_float+0x21a>
 8005eba:	4653      	mov	r3, sl
 8005ebc:	465a      	mov	r2, fp
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	47b8      	blx	r7
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	f43f af49 	beq.w	8005d5c <_printf_float+0x9c>
 8005eca:	f04f 0800 	mov.w	r8, #0
 8005ece:	f104 091a 	add.w	r9, r4, #26
 8005ed2:	9b08      	ldr	r3, [sp, #32]
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	4543      	cmp	r3, r8
 8005ed8:	dc09      	bgt.n	8005eee <_printf_float+0x22e>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	079b      	lsls	r3, r3, #30
 8005ede:	f100 8108 	bmi.w	80060f2 <_printf_float+0x432>
 8005ee2:	68e0      	ldr	r0, [r4, #12]
 8005ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee6:	4298      	cmp	r0, r3
 8005ee8:	bfb8      	it	lt
 8005eea:	4618      	movlt	r0, r3
 8005eec:	e738      	b.n	8005d60 <_printf_float+0xa0>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	464a      	mov	r2, r9
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	47b8      	blx	r7
 8005ef8:	3001      	adds	r0, #1
 8005efa:	f43f af2f 	beq.w	8005d5c <_printf_float+0x9c>
 8005efe:	f108 0801 	add.w	r8, r8, #1
 8005f02:	e7e6      	b.n	8005ed2 <_printf_float+0x212>
 8005f04:	9b07      	ldr	r3, [sp, #28]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	dc3c      	bgt.n	8005f84 <_printf_float+0x2c4>
 8005f0a:	4a1d      	ldr	r2, [pc, #116]	; (8005f80 <_printf_float+0x2c0>)
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4628      	mov	r0, r5
 8005f12:	47b8      	blx	r7
 8005f14:	3001      	adds	r0, #1
 8005f16:	f43f af21 	beq.w	8005d5c <_printf_float+0x9c>
 8005f1a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	d102      	bne.n	8005f28 <_printf_float+0x268>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	07d9      	lsls	r1, r3, #31
 8005f26:	d5d8      	bpl.n	8005eda <_printf_float+0x21a>
 8005f28:	4653      	mov	r3, sl
 8005f2a:	465a      	mov	r2, fp
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4628      	mov	r0, r5
 8005f30:	47b8      	blx	r7
 8005f32:	3001      	adds	r0, #1
 8005f34:	f43f af12 	beq.w	8005d5c <_printf_float+0x9c>
 8005f38:	f04f 0900 	mov.w	r9, #0
 8005f3c:	f104 0a1a 	add.w	sl, r4, #26
 8005f40:	9b07      	ldr	r3, [sp, #28]
 8005f42:	425b      	negs	r3, r3
 8005f44:	454b      	cmp	r3, r9
 8005f46:	dc01      	bgt.n	8005f4c <_printf_float+0x28c>
 8005f48:	9b08      	ldr	r3, [sp, #32]
 8005f4a:	e795      	b.n	8005e78 <_printf_float+0x1b8>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	4652      	mov	r2, sl
 8005f50:	4631      	mov	r1, r6
 8005f52:	4628      	mov	r0, r5
 8005f54:	47b8      	blx	r7
 8005f56:	3001      	adds	r0, #1
 8005f58:	f43f af00 	beq.w	8005d5c <_printf_float+0x9c>
 8005f5c:	f109 0901 	add.w	r9, r9, #1
 8005f60:	e7ee      	b.n	8005f40 <_printf_float+0x280>
 8005f62:	bf00      	nop
 8005f64:	f3af 8000 	nop.w
 8005f68:	ffffffff 	.word	0xffffffff
 8005f6c:	7fefffff 	.word	0x7fefffff
 8005f70:	08009274 	.word	0x08009274
 8005f74:	08009278 	.word	0x08009278
 8005f78:	08009280 	.word	0x08009280
 8005f7c:	0800927c 	.word	0x0800927c
 8005f80:	08009284 	.word	0x08009284
 8005f84:	9a08      	ldr	r2, [sp, #32]
 8005f86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	bfa8      	it	ge
 8005f8c:	461a      	movge	r2, r3
 8005f8e:	2a00      	cmp	r2, #0
 8005f90:	4691      	mov	r9, r2
 8005f92:	dc38      	bgt.n	8006006 <_printf_float+0x346>
 8005f94:	2300      	movs	r3, #0
 8005f96:	9305      	str	r3, [sp, #20]
 8005f98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f9c:	f104 021a 	add.w	r2, r4, #26
 8005fa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fa2:	9905      	ldr	r1, [sp, #20]
 8005fa4:	9304      	str	r3, [sp, #16]
 8005fa6:	eba3 0309 	sub.w	r3, r3, r9
 8005faa:	428b      	cmp	r3, r1
 8005fac:	dc33      	bgt.n	8006016 <_printf_float+0x356>
 8005fae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	db3c      	blt.n	8006030 <_printf_float+0x370>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	07da      	lsls	r2, r3, #31
 8005fba:	d439      	bmi.n	8006030 <_printf_float+0x370>
 8005fbc:	9b08      	ldr	r3, [sp, #32]
 8005fbe:	9a04      	ldr	r2, [sp, #16]
 8005fc0:	9907      	ldr	r1, [sp, #28]
 8005fc2:	1a9a      	subs	r2, r3, r2
 8005fc4:	eba3 0901 	sub.w	r9, r3, r1
 8005fc8:	4591      	cmp	r9, r2
 8005fca:	bfa8      	it	ge
 8005fcc:	4691      	movge	r9, r2
 8005fce:	f1b9 0f00 	cmp.w	r9, #0
 8005fd2:	dc35      	bgt.n	8006040 <_printf_float+0x380>
 8005fd4:	f04f 0800 	mov.w	r8, #0
 8005fd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fdc:	f104 0a1a 	add.w	sl, r4, #26
 8005fe0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005fe4:	1a9b      	subs	r3, r3, r2
 8005fe6:	eba3 0309 	sub.w	r3, r3, r9
 8005fea:	4543      	cmp	r3, r8
 8005fec:	f77f af75 	ble.w	8005eda <_printf_float+0x21a>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	4652      	mov	r2, sl
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	47b8      	blx	r7
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	f43f aeae 	beq.w	8005d5c <_printf_float+0x9c>
 8006000:	f108 0801 	add.w	r8, r8, #1
 8006004:	e7ec      	b.n	8005fe0 <_printf_float+0x320>
 8006006:	4613      	mov	r3, r2
 8006008:	4631      	mov	r1, r6
 800600a:	4642      	mov	r2, r8
 800600c:	4628      	mov	r0, r5
 800600e:	47b8      	blx	r7
 8006010:	3001      	adds	r0, #1
 8006012:	d1bf      	bne.n	8005f94 <_printf_float+0x2d4>
 8006014:	e6a2      	b.n	8005d5c <_printf_float+0x9c>
 8006016:	2301      	movs	r3, #1
 8006018:	4631      	mov	r1, r6
 800601a:	4628      	mov	r0, r5
 800601c:	9204      	str	r2, [sp, #16]
 800601e:	47b8      	blx	r7
 8006020:	3001      	adds	r0, #1
 8006022:	f43f ae9b 	beq.w	8005d5c <_printf_float+0x9c>
 8006026:	9b05      	ldr	r3, [sp, #20]
 8006028:	9a04      	ldr	r2, [sp, #16]
 800602a:	3301      	adds	r3, #1
 800602c:	9305      	str	r3, [sp, #20]
 800602e:	e7b7      	b.n	8005fa0 <_printf_float+0x2e0>
 8006030:	4653      	mov	r3, sl
 8006032:	465a      	mov	r2, fp
 8006034:	4631      	mov	r1, r6
 8006036:	4628      	mov	r0, r5
 8006038:	47b8      	blx	r7
 800603a:	3001      	adds	r0, #1
 800603c:	d1be      	bne.n	8005fbc <_printf_float+0x2fc>
 800603e:	e68d      	b.n	8005d5c <_printf_float+0x9c>
 8006040:	9a04      	ldr	r2, [sp, #16]
 8006042:	464b      	mov	r3, r9
 8006044:	4442      	add	r2, r8
 8006046:	4631      	mov	r1, r6
 8006048:	4628      	mov	r0, r5
 800604a:	47b8      	blx	r7
 800604c:	3001      	adds	r0, #1
 800604e:	d1c1      	bne.n	8005fd4 <_printf_float+0x314>
 8006050:	e684      	b.n	8005d5c <_printf_float+0x9c>
 8006052:	9a08      	ldr	r2, [sp, #32]
 8006054:	2a01      	cmp	r2, #1
 8006056:	dc01      	bgt.n	800605c <_printf_float+0x39c>
 8006058:	07db      	lsls	r3, r3, #31
 800605a:	d537      	bpl.n	80060cc <_printf_float+0x40c>
 800605c:	2301      	movs	r3, #1
 800605e:	4642      	mov	r2, r8
 8006060:	4631      	mov	r1, r6
 8006062:	4628      	mov	r0, r5
 8006064:	47b8      	blx	r7
 8006066:	3001      	adds	r0, #1
 8006068:	f43f ae78 	beq.w	8005d5c <_printf_float+0x9c>
 800606c:	4653      	mov	r3, sl
 800606e:	465a      	mov	r2, fp
 8006070:	4631      	mov	r1, r6
 8006072:	4628      	mov	r0, r5
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	f43f ae70 	beq.w	8005d5c <_printf_float+0x9c>
 800607c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006080:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006088:	d01b      	beq.n	80060c2 <_printf_float+0x402>
 800608a:	9b08      	ldr	r3, [sp, #32]
 800608c:	f108 0201 	add.w	r2, r8, #1
 8006090:	3b01      	subs	r3, #1
 8006092:	4631      	mov	r1, r6
 8006094:	4628      	mov	r0, r5
 8006096:	47b8      	blx	r7
 8006098:	3001      	adds	r0, #1
 800609a:	d10e      	bne.n	80060ba <_printf_float+0x3fa>
 800609c:	e65e      	b.n	8005d5c <_printf_float+0x9c>
 800609e:	2301      	movs	r3, #1
 80060a0:	464a      	mov	r2, r9
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	f43f ae57 	beq.w	8005d5c <_printf_float+0x9c>
 80060ae:	f108 0801 	add.w	r8, r8, #1
 80060b2:	9b08      	ldr	r3, [sp, #32]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	4543      	cmp	r3, r8
 80060b8:	dcf1      	bgt.n	800609e <_printf_float+0x3de>
 80060ba:	9b04      	ldr	r3, [sp, #16]
 80060bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80060c0:	e6db      	b.n	8005e7a <_printf_float+0x1ba>
 80060c2:	f04f 0800 	mov.w	r8, #0
 80060c6:	f104 091a 	add.w	r9, r4, #26
 80060ca:	e7f2      	b.n	80060b2 <_printf_float+0x3f2>
 80060cc:	2301      	movs	r3, #1
 80060ce:	4642      	mov	r2, r8
 80060d0:	e7df      	b.n	8006092 <_printf_float+0x3d2>
 80060d2:	2301      	movs	r3, #1
 80060d4:	464a      	mov	r2, r9
 80060d6:	4631      	mov	r1, r6
 80060d8:	4628      	mov	r0, r5
 80060da:	47b8      	blx	r7
 80060dc:	3001      	adds	r0, #1
 80060de:	f43f ae3d 	beq.w	8005d5c <_printf_float+0x9c>
 80060e2:	f108 0801 	add.w	r8, r8, #1
 80060e6:	68e3      	ldr	r3, [r4, #12]
 80060e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060ea:	1a5b      	subs	r3, r3, r1
 80060ec:	4543      	cmp	r3, r8
 80060ee:	dcf0      	bgt.n	80060d2 <_printf_float+0x412>
 80060f0:	e6f7      	b.n	8005ee2 <_printf_float+0x222>
 80060f2:	f04f 0800 	mov.w	r8, #0
 80060f6:	f104 0919 	add.w	r9, r4, #25
 80060fa:	e7f4      	b.n	80060e6 <_printf_float+0x426>

080060fc <_printf_common>:
 80060fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006100:	4616      	mov	r6, r2
 8006102:	4699      	mov	r9, r3
 8006104:	688a      	ldr	r2, [r1, #8]
 8006106:	690b      	ldr	r3, [r1, #16]
 8006108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800610c:	4293      	cmp	r3, r2
 800610e:	bfb8      	it	lt
 8006110:	4613      	movlt	r3, r2
 8006112:	6033      	str	r3, [r6, #0]
 8006114:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006118:	4607      	mov	r7, r0
 800611a:	460c      	mov	r4, r1
 800611c:	b10a      	cbz	r2, 8006122 <_printf_common+0x26>
 800611e:	3301      	adds	r3, #1
 8006120:	6033      	str	r3, [r6, #0]
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	0699      	lsls	r1, r3, #26
 8006126:	bf42      	ittt	mi
 8006128:	6833      	ldrmi	r3, [r6, #0]
 800612a:	3302      	addmi	r3, #2
 800612c:	6033      	strmi	r3, [r6, #0]
 800612e:	6825      	ldr	r5, [r4, #0]
 8006130:	f015 0506 	ands.w	r5, r5, #6
 8006134:	d106      	bne.n	8006144 <_printf_common+0x48>
 8006136:	f104 0a19 	add.w	sl, r4, #25
 800613a:	68e3      	ldr	r3, [r4, #12]
 800613c:	6832      	ldr	r2, [r6, #0]
 800613e:	1a9b      	subs	r3, r3, r2
 8006140:	42ab      	cmp	r3, r5
 8006142:	dc26      	bgt.n	8006192 <_printf_common+0x96>
 8006144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006148:	1e13      	subs	r3, r2, #0
 800614a:	6822      	ldr	r2, [r4, #0]
 800614c:	bf18      	it	ne
 800614e:	2301      	movne	r3, #1
 8006150:	0692      	lsls	r2, r2, #26
 8006152:	d42b      	bmi.n	80061ac <_printf_common+0xb0>
 8006154:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006158:	4649      	mov	r1, r9
 800615a:	4638      	mov	r0, r7
 800615c:	47c0      	blx	r8
 800615e:	3001      	adds	r0, #1
 8006160:	d01e      	beq.n	80061a0 <_printf_common+0xa4>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	68e5      	ldr	r5, [r4, #12]
 8006166:	6832      	ldr	r2, [r6, #0]
 8006168:	f003 0306 	and.w	r3, r3, #6
 800616c:	2b04      	cmp	r3, #4
 800616e:	bf08      	it	eq
 8006170:	1aad      	subeq	r5, r5, r2
 8006172:	68a3      	ldr	r3, [r4, #8]
 8006174:	6922      	ldr	r2, [r4, #16]
 8006176:	bf0c      	ite	eq
 8006178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800617c:	2500      	movne	r5, #0
 800617e:	4293      	cmp	r3, r2
 8006180:	bfc4      	itt	gt
 8006182:	1a9b      	subgt	r3, r3, r2
 8006184:	18ed      	addgt	r5, r5, r3
 8006186:	2600      	movs	r6, #0
 8006188:	341a      	adds	r4, #26
 800618a:	42b5      	cmp	r5, r6
 800618c:	d11a      	bne.n	80061c4 <_printf_common+0xc8>
 800618e:	2000      	movs	r0, #0
 8006190:	e008      	b.n	80061a4 <_printf_common+0xa8>
 8006192:	2301      	movs	r3, #1
 8006194:	4652      	mov	r2, sl
 8006196:	4649      	mov	r1, r9
 8006198:	4638      	mov	r0, r7
 800619a:	47c0      	blx	r8
 800619c:	3001      	adds	r0, #1
 800619e:	d103      	bne.n	80061a8 <_printf_common+0xac>
 80061a0:	f04f 30ff 	mov.w	r0, #4294967295
 80061a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a8:	3501      	adds	r5, #1
 80061aa:	e7c6      	b.n	800613a <_printf_common+0x3e>
 80061ac:	18e1      	adds	r1, r4, r3
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	2030      	movs	r0, #48	; 0x30
 80061b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061b6:	4422      	add	r2, r4
 80061b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061c0:	3302      	adds	r3, #2
 80061c2:	e7c7      	b.n	8006154 <_printf_common+0x58>
 80061c4:	2301      	movs	r3, #1
 80061c6:	4622      	mov	r2, r4
 80061c8:	4649      	mov	r1, r9
 80061ca:	4638      	mov	r0, r7
 80061cc:	47c0      	blx	r8
 80061ce:	3001      	adds	r0, #1
 80061d0:	d0e6      	beq.n	80061a0 <_printf_common+0xa4>
 80061d2:	3601      	adds	r6, #1
 80061d4:	e7d9      	b.n	800618a <_printf_common+0x8e>
	...

080061d8 <_printf_i>:
 80061d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061dc:	7e0f      	ldrb	r7, [r1, #24]
 80061de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061e0:	2f78      	cmp	r7, #120	; 0x78
 80061e2:	4691      	mov	r9, r2
 80061e4:	4680      	mov	r8, r0
 80061e6:	460c      	mov	r4, r1
 80061e8:	469a      	mov	sl, r3
 80061ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061ee:	d807      	bhi.n	8006200 <_printf_i+0x28>
 80061f0:	2f62      	cmp	r7, #98	; 0x62
 80061f2:	d80a      	bhi.n	800620a <_printf_i+0x32>
 80061f4:	2f00      	cmp	r7, #0
 80061f6:	f000 80d8 	beq.w	80063aa <_printf_i+0x1d2>
 80061fa:	2f58      	cmp	r7, #88	; 0x58
 80061fc:	f000 80a3 	beq.w	8006346 <_printf_i+0x16e>
 8006200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006208:	e03a      	b.n	8006280 <_printf_i+0xa8>
 800620a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800620e:	2b15      	cmp	r3, #21
 8006210:	d8f6      	bhi.n	8006200 <_printf_i+0x28>
 8006212:	a101      	add	r1, pc, #4	; (adr r1, 8006218 <_printf_i+0x40>)
 8006214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006218:	08006271 	.word	0x08006271
 800621c:	08006285 	.word	0x08006285
 8006220:	08006201 	.word	0x08006201
 8006224:	08006201 	.word	0x08006201
 8006228:	08006201 	.word	0x08006201
 800622c:	08006201 	.word	0x08006201
 8006230:	08006285 	.word	0x08006285
 8006234:	08006201 	.word	0x08006201
 8006238:	08006201 	.word	0x08006201
 800623c:	08006201 	.word	0x08006201
 8006240:	08006201 	.word	0x08006201
 8006244:	08006391 	.word	0x08006391
 8006248:	080062b5 	.word	0x080062b5
 800624c:	08006373 	.word	0x08006373
 8006250:	08006201 	.word	0x08006201
 8006254:	08006201 	.word	0x08006201
 8006258:	080063b3 	.word	0x080063b3
 800625c:	08006201 	.word	0x08006201
 8006260:	080062b5 	.word	0x080062b5
 8006264:	08006201 	.word	0x08006201
 8006268:	08006201 	.word	0x08006201
 800626c:	0800637b 	.word	0x0800637b
 8006270:	682b      	ldr	r3, [r5, #0]
 8006272:	1d1a      	adds	r2, r3, #4
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	602a      	str	r2, [r5, #0]
 8006278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800627c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006280:	2301      	movs	r3, #1
 8006282:	e0a3      	b.n	80063cc <_printf_i+0x1f4>
 8006284:	6820      	ldr	r0, [r4, #0]
 8006286:	6829      	ldr	r1, [r5, #0]
 8006288:	0606      	lsls	r6, r0, #24
 800628a:	f101 0304 	add.w	r3, r1, #4
 800628e:	d50a      	bpl.n	80062a6 <_printf_i+0xce>
 8006290:	680e      	ldr	r6, [r1, #0]
 8006292:	602b      	str	r3, [r5, #0]
 8006294:	2e00      	cmp	r6, #0
 8006296:	da03      	bge.n	80062a0 <_printf_i+0xc8>
 8006298:	232d      	movs	r3, #45	; 0x2d
 800629a:	4276      	negs	r6, r6
 800629c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a0:	485e      	ldr	r0, [pc, #376]	; (800641c <_printf_i+0x244>)
 80062a2:	230a      	movs	r3, #10
 80062a4:	e019      	b.n	80062da <_printf_i+0x102>
 80062a6:	680e      	ldr	r6, [r1, #0]
 80062a8:	602b      	str	r3, [r5, #0]
 80062aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062ae:	bf18      	it	ne
 80062b0:	b236      	sxthne	r6, r6
 80062b2:	e7ef      	b.n	8006294 <_printf_i+0xbc>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	1d19      	adds	r1, r3, #4
 80062ba:	6029      	str	r1, [r5, #0]
 80062bc:	0601      	lsls	r1, r0, #24
 80062be:	d501      	bpl.n	80062c4 <_printf_i+0xec>
 80062c0:	681e      	ldr	r6, [r3, #0]
 80062c2:	e002      	b.n	80062ca <_printf_i+0xf2>
 80062c4:	0646      	lsls	r6, r0, #25
 80062c6:	d5fb      	bpl.n	80062c0 <_printf_i+0xe8>
 80062c8:	881e      	ldrh	r6, [r3, #0]
 80062ca:	4854      	ldr	r0, [pc, #336]	; (800641c <_printf_i+0x244>)
 80062cc:	2f6f      	cmp	r7, #111	; 0x6f
 80062ce:	bf0c      	ite	eq
 80062d0:	2308      	moveq	r3, #8
 80062d2:	230a      	movne	r3, #10
 80062d4:	2100      	movs	r1, #0
 80062d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062da:	6865      	ldr	r5, [r4, #4]
 80062dc:	60a5      	str	r5, [r4, #8]
 80062de:	2d00      	cmp	r5, #0
 80062e0:	bfa2      	ittt	ge
 80062e2:	6821      	ldrge	r1, [r4, #0]
 80062e4:	f021 0104 	bicge.w	r1, r1, #4
 80062e8:	6021      	strge	r1, [r4, #0]
 80062ea:	b90e      	cbnz	r6, 80062f0 <_printf_i+0x118>
 80062ec:	2d00      	cmp	r5, #0
 80062ee:	d04d      	beq.n	800638c <_printf_i+0x1b4>
 80062f0:	4615      	mov	r5, r2
 80062f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80062f6:	fb03 6711 	mls	r7, r3, r1, r6
 80062fa:	5dc7      	ldrb	r7, [r0, r7]
 80062fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006300:	4637      	mov	r7, r6
 8006302:	42bb      	cmp	r3, r7
 8006304:	460e      	mov	r6, r1
 8006306:	d9f4      	bls.n	80062f2 <_printf_i+0x11a>
 8006308:	2b08      	cmp	r3, #8
 800630a:	d10b      	bne.n	8006324 <_printf_i+0x14c>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	07de      	lsls	r6, r3, #31
 8006310:	d508      	bpl.n	8006324 <_printf_i+0x14c>
 8006312:	6923      	ldr	r3, [r4, #16]
 8006314:	6861      	ldr	r1, [r4, #4]
 8006316:	4299      	cmp	r1, r3
 8006318:	bfde      	ittt	le
 800631a:	2330      	movle	r3, #48	; 0x30
 800631c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006320:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006324:	1b52      	subs	r2, r2, r5
 8006326:	6122      	str	r2, [r4, #16]
 8006328:	f8cd a000 	str.w	sl, [sp]
 800632c:	464b      	mov	r3, r9
 800632e:	aa03      	add	r2, sp, #12
 8006330:	4621      	mov	r1, r4
 8006332:	4640      	mov	r0, r8
 8006334:	f7ff fee2 	bl	80060fc <_printf_common>
 8006338:	3001      	adds	r0, #1
 800633a:	d14c      	bne.n	80063d6 <_printf_i+0x1fe>
 800633c:	f04f 30ff 	mov.w	r0, #4294967295
 8006340:	b004      	add	sp, #16
 8006342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006346:	4835      	ldr	r0, [pc, #212]	; (800641c <_printf_i+0x244>)
 8006348:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800634c:	6829      	ldr	r1, [r5, #0]
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	f851 6b04 	ldr.w	r6, [r1], #4
 8006354:	6029      	str	r1, [r5, #0]
 8006356:	061d      	lsls	r5, r3, #24
 8006358:	d514      	bpl.n	8006384 <_printf_i+0x1ac>
 800635a:	07df      	lsls	r7, r3, #31
 800635c:	bf44      	itt	mi
 800635e:	f043 0320 	orrmi.w	r3, r3, #32
 8006362:	6023      	strmi	r3, [r4, #0]
 8006364:	b91e      	cbnz	r6, 800636e <_printf_i+0x196>
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	f023 0320 	bic.w	r3, r3, #32
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	2310      	movs	r3, #16
 8006370:	e7b0      	b.n	80062d4 <_printf_i+0xfc>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	f043 0320 	orr.w	r3, r3, #32
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	2378      	movs	r3, #120	; 0x78
 800637c:	4828      	ldr	r0, [pc, #160]	; (8006420 <_printf_i+0x248>)
 800637e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006382:	e7e3      	b.n	800634c <_printf_i+0x174>
 8006384:	0659      	lsls	r1, r3, #25
 8006386:	bf48      	it	mi
 8006388:	b2b6      	uxthmi	r6, r6
 800638a:	e7e6      	b.n	800635a <_printf_i+0x182>
 800638c:	4615      	mov	r5, r2
 800638e:	e7bb      	b.n	8006308 <_printf_i+0x130>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	6826      	ldr	r6, [r4, #0]
 8006394:	6961      	ldr	r1, [r4, #20]
 8006396:	1d18      	adds	r0, r3, #4
 8006398:	6028      	str	r0, [r5, #0]
 800639a:	0635      	lsls	r5, r6, #24
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	d501      	bpl.n	80063a4 <_printf_i+0x1cc>
 80063a0:	6019      	str	r1, [r3, #0]
 80063a2:	e002      	b.n	80063aa <_printf_i+0x1d2>
 80063a4:	0670      	lsls	r0, r6, #25
 80063a6:	d5fb      	bpl.n	80063a0 <_printf_i+0x1c8>
 80063a8:	8019      	strh	r1, [r3, #0]
 80063aa:	2300      	movs	r3, #0
 80063ac:	6123      	str	r3, [r4, #16]
 80063ae:	4615      	mov	r5, r2
 80063b0:	e7ba      	b.n	8006328 <_printf_i+0x150>
 80063b2:	682b      	ldr	r3, [r5, #0]
 80063b4:	1d1a      	adds	r2, r3, #4
 80063b6:	602a      	str	r2, [r5, #0]
 80063b8:	681d      	ldr	r5, [r3, #0]
 80063ba:	6862      	ldr	r2, [r4, #4]
 80063bc:	2100      	movs	r1, #0
 80063be:	4628      	mov	r0, r5
 80063c0:	f7f9 ff46 	bl	8000250 <memchr>
 80063c4:	b108      	cbz	r0, 80063ca <_printf_i+0x1f2>
 80063c6:	1b40      	subs	r0, r0, r5
 80063c8:	6060      	str	r0, [r4, #4]
 80063ca:	6863      	ldr	r3, [r4, #4]
 80063cc:	6123      	str	r3, [r4, #16]
 80063ce:	2300      	movs	r3, #0
 80063d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063d4:	e7a8      	b.n	8006328 <_printf_i+0x150>
 80063d6:	6923      	ldr	r3, [r4, #16]
 80063d8:	462a      	mov	r2, r5
 80063da:	4649      	mov	r1, r9
 80063dc:	4640      	mov	r0, r8
 80063de:	47d0      	blx	sl
 80063e0:	3001      	adds	r0, #1
 80063e2:	d0ab      	beq.n	800633c <_printf_i+0x164>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	079b      	lsls	r3, r3, #30
 80063e8:	d413      	bmi.n	8006412 <_printf_i+0x23a>
 80063ea:	68e0      	ldr	r0, [r4, #12]
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	4298      	cmp	r0, r3
 80063f0:	bfb8      	it	lt
 80063f2:	4618      	movlt	r0, r3
 80063f4:	e7a4      	b.n	8006340 <_printf_i+0x168>
 80063f6:	2301      	movs	r3, #1
 80063f8:	4632      	mov	r2, r6
 80063fa:	4649      	mov	r1, r9
 80063fc:	4640      	mov	r0, r8
 80063fe:	47d0      	blx	sl
 8006400:	3001      	adds	r0, #1
 8006402:	d09b      	beq.n	800633c <_printf_i+0x164>
 8006404:	3501      	adds	r5, #1
 8006406:	68e3      	ldr	r3, [r4, #12]
 8006408:	9903      	ldr	r1, [sp, #12]
 800640a:	1a5b      	subs	r3, r3, r1
 800640c:	42ab      	cmp	r3, r5
 800640e:	dcf2      	bgt.n	80063f6 <_printf_i+0x21e>
 8006410:	e7eb      	b.n	80063ea <_printf_i+0x212>
 8006412:	2500      	movs	r5, #0
 8006414:	f104 0619 	add.w	r6, r4, #25
 8006418:	e7f5      	b.n	8006406 <_printf_i+0x22e>
 800641a:	bf00      	nop
 800641c:	08009286 	.word	0x08009286
 8006420:	08009297 	.word	0x08009297

08006424 <_sbrk_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	4d06      	ldr	r5, [pc, #24]	; (8006440 <_sbrk_r+0x1c>)
 8006428:	2300      	movs	r3, #0
 800642a:	4604      	mov	r4, r0
 800642c:	4608      	mov	r0, r1
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	f002 f928 	bl	8008684 <_sbrk>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_sbrk_r+0x1a>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	b103      	cbz	r3, 800643e <_sbrk_r+0x1a>
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	20000bdc 	.word	0x20000bdc

08006444 <siprintf>:
 8006444:	b40e      	push	{r1, r2, r3}
 8006446:	b500      	push	{lr}
 8006448:	b09c      	sub	sp, #112	; 0x70
 800644a:	ab1d      	add	r3, sp, #116	; 0x74
 800644c:	9002      	str	r0, [sp, #8]
 800644e:	9006      	str	r0, [sp, #24]
 8006450:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006454:	4809      	ldr	r0, [pc, #36]	; (800647c <siprintf+0x38>)
 8006456:	9107      	str	r1, [sp, #28]
 8006458:	9104      	str	r1, [sp, #16]
 800645a:	4909      	ldr	r1, [pc, #36]	; (8006480 <siprintf+0x3c>)
 800645c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006460:	9105      	str	r1, [sp, #20]
 8006462:	6800      	ldr	r0, [r0, #0]
 8006464:	9301      	str	r3, [sp, #4]
 8006466:	a902      	add	r1, sp, #8
 8006468:	f001 fa7c 	bl	8007964 <_svfiprintf_r>
 800646c:	9b02      	ldr	r3, [sp, #8]
 800646e:	2200      	movs	r2, #0
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	b01c      	add	sp, #112	; 0x70
 8006474:	f85d eb04 	ldr.w	lr, [sp], #4
 8006478:	b003      	add	sp, #12
 800647a:	4770      	bx	lr
 800647c:	2000004c 	.word	0x2000004c
 8006480:	ffff0208 	.word	0xffff0208

08006484 <__sread>:
 8006484:	b510      	push	{r4, lr}
 8006486:	460c      	mov	r4, r1
 8006488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800648c:	f001 fb6a 	bl	8007b64 <_read_r>
 8006490:	2800      	cmp	r0, #0
 8006492:	bfab      	itete	ge
 8006494:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006496:	89a3      	ldrhlt	r3, [r4, #12]
 8006498:	181b      	addge	r3, r3, r0
 800649a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800649e:	bfac      	ite	ge
 80064a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80064a2:	81a3      	strhlt	r3, [r4, #12]
 80064a4:	bd10      	pop	{r4, pc}

080064a6 <__swrite>:
 80064a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064aa:	461f      	mov	r7, r3
 80064ac:	898b      	ldrh	r3, [r1, #12]
 80064ae:	05db      	lsls	r3, r3, #23
 80064b0:	4605      	mov	r5, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	4616      	mov	r6, r2
 80064b6:	d505      	bpl.n	80064c4 <__swrite+0x1e>
 80064b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064bc:	2302      	movs	r3, #2
 80064be:	2200      	movs	r2, #0
 80064c0:	f000 fe44 	bl	800714c <_lseek_r>
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064ce:	81a3      	strh	r3, [r4, #12]
 80064d0:	4632      	mov	r2, r6
 80064d2:	463b      	mov	r3, r7
 80064d4:	4628      	mov	r0, r5
 80064d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064da:	f000 b817 	b.w	800650c <_write_r>

080064de <__sseek>:
 80064de:	b510      	push	{r4, lr}
 80064e0:	460c      	mov	r4, r1
 80064e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e6:	f000 fe31 	bl	800714c <_lseek_r>
 80064ea:	1c43      	adds	r3, r0, #1
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	bf15      	itete	ne
 80064f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80064f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064fa:	81a3      	strheq	r3, [r4, #12]
 80064fc:	bf18      	it	ne
 80064fe:	81a3      	strhne	r3, [r4, #12]
 8006500:	bd10      	pop	{r4, pc}

08006502 <__sclose>:
 8006502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006506:	f000 b813 	b.w	8006530 <_close_r>
	...

0800650c <_write_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4d07      	ldr	r5, [pc, #28]	; (800652c <_write_r+0x20>)
 8006510:	4604      	mov	r4, r0
 8006512:	4608      	mov	r0, r1
 8006514:	4611      	mov	r1, r2
 8006516:	2200      	movs	r2, #0
 8006518:	602a      	str	r2, [r5, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	f002 f8c0 	bl	80086a0 <_write>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_write_r+0x1e>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_write_r+0x1e>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	20000bdc 	.word	0x20000bdc

08006530 <_close_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4d06      	ldr	r5, [pc, #24]	; (800654c <_close_r+0x1c>)
 8006534:	2300      	movs	r3, #0
 8006536:	4604      	mov	r4, r0
 8006538:	4608      	mov	r0, r1
 800653a:	602b      	str	r3, [r5, #0]
 800653c:	f002 f86a 	bl	8008614 <_close>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d102      	bne.n	800654a <_close_r+0x1a>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	b103      	cbz	r3, 800654a <_close_r+0x1a>
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	20000bdc 	.word	0x20000bdc

08006550 <quorem>:
 8006550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	6903      	ldr	r3, [r0, #16]
 8006556:	690c      	ldr	r4, [r1, #16]
 8006558:	42a3      	cmp	r3, r4
 800655a:	4607      	mov	r7, r0
 800655c:	f2c0 8081 	blt.w	8006662 <quorem+0x112>
 8006560:	3c01      	subs	r4, #1
 8006562:	f101 0814 	add.w	r8, r1, #20
 8006566:	f100 0514 	add.w	r5, r0, #20
 800656a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800656e:	9301      	str	r3, [sp, #4]
 8006570:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006574:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006578:	3301      	adds	r3, #1
 800657a:	429a      	cmp	r2, r3
 800657c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006580:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006584:	fbb2 f6f3 	udiv	r6, r2, r3
 8006588:	d331      	bcc.n	80065ee <quorem+0x9e>
 800658a:	f04f 0e00 	mov.w	lr, #0
 800658e:	4640      	mov	r0, r8
 8006590:	46ac      	mov	ip, r5
 8006592:	46f2      	mov	sl, lr
 8006594:	f850 2b04 	ldr.w	r2, [r0], #4
 8006598:	b293      	uxth	r3, r2
 800659a:	fb06 e303 	mla	r3, r6, r3, lr
 800659e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	ebaa 0303 	sub.w	r3, sl, r3
 80065a8:	f8dc a000 	ldr.w	sl, [ip]
 80065ac:	0c12      	lsrs	r2, r2, #16
 80065ae:	fa13 f38a 	uxtah	r3, r3, sl
 80065b2:	fb06 e202 	mla	r2, r6, r2, lr
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	9b00      	ldr	r3, [sp, #0]
 80065ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80065be:	b292      	uxth	r2, r2
 80065c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80065c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80065cc:	4581      	cmp	r9, r0
 80065ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065d2:	f84c 3b04 	str.w	r3, [ip], #4
 80065d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065da:	d2db      	bcs.n	8006594 <quorem+0x44>
 80065dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80065e0:	b92b      	cbnz	r3, 80065ee <quorem+0x9e>
 80065e2:	9b01      	ldr	r3, [sp, #4]
 80065e4:	3b04      	subs	r3, #4
 80065e6:	429d      	cmp	r5, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	d32e      	bcc.n	800664a <quorem+0xfa>
 80065ec:	613c      	str	r4, [r7, #16]
 80065ee:	4638      	mov	r0, r7
 80065f0:	f001 f85a 	bl	80076a8 <__mcmp>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	db24      	blt.n	8006642 <quorem+0xf2>
 80065f8:	3601      	adds	r6, #1
 80065fa:	4628      	mov	r0, r5
 80065fc:	f04f 0c00 	mov.w	ip, #0
 8006600:	f858 2b04 	ldr.w	r2, [r8], #4
 8006604:	f8d0 e000 	ldr.w	lr, [r0]
 8006608:	b293      	uxth	r3, r2
 800660a:	ebac 0303 	sub.w	r3, ip, r3
 800660e:	0c12      	lsrs	r2, r2, #16
 8006610:	fa13 f38e 	uxtah	r3, r3, lr
 8006614:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006618:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800661c:	b29b      	uxth	r3, r3
 800661e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006622:	45c1      	cmp	r9, r8
 8006624:	f840 3b04 	str.w	r3, [r0], #4
 8006628:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800662c:	d2e8      	bcs.n	8006600 <quorem+0xb0>
 800662e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006632:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006636:	b922      	cbnz	r2, 8006642 <quorem+0xf2>
 8006638:	3b04      	subs	r3, #4
 800663a:	429d      	cmp	r5, r3
 800663c:	461a      	mov	r2, r3
 800663e:	d30a      	bcc.n	8006656 <quorem+0x106>
 8006640:	613c      	str	r4, [r7, #16]
 8006642:	4630      	mov	r0, r6
 8006644:	b003      	add	sp, #12
 8006646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	3b04      	subs	r3, #4
 800664e:	2a00      	cmp	r2, #0
 8006650:	d1cc      	bne.n	80065ec <quorem+0x9c>
 8006652:	3c01      	subs	r4, #1
 8006654:	e7c7      	b.n	80065e6 <quorem+0x96>
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	3b04      	subs	r3, #4
 800665a:	2a00      	cmp	r2, #0
 800665c:	d1f0      	bne.n	8006640 <quorem+0xf0>
 800665e:	3c01      	subs	r4, #1
 8006660:	e7eb      	b.n	800663a <quorem+0xea>
 8006662:	2000      	movs	r0, #0
 8006664:	e7ee      	b.n	8006644 <quorem+0xf4>
	...

08006668 <_dtoa_r>:
 8006668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	ed2d 8b02 	vpush	{d8}
 8006670:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006672:	b091      	sub	sp, #68	; 0x44
 8006674:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006678:	ec59 8b10 	vmov	r8, r9, d0
 800667c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800667e:	9106      	str	r1, [sp, #24]
 8006680:	4606      	mov	r6, r0
 8006682:	9208      	str	r2, [sp, #32]
 8006684:	930c      	str	r3, [sp, #48]	; 0x30
 8006686:	b975      	cbnz	r5, 80066a6 <_dtoa_r+0x3e>
 8006688:	2010      	movs	r0, #16
 800668a:	f7ff f979 	bl	8005980 <malloc>
 800668e:	4602      	mov	r2, r0
 8006690:	6270      	str	r0, [r6, #36]	; 0x24
 8006692:	b920      	cbnz	r0, 800669e <_dtoa_r+0x36>
 8006694:	4baa      	ldr	r3, [pc, #680]	; (8006940 <_dtoa_r+0x2d8>)
 8006696:	21ea      	movs	r1, #234	; 0xea
 8006698:	48aa      	ldr	r0, [pc, #680]	; (8006944 <_dtoa_r+0x2dc>)
 800669a:	f001 fa75 	bl	8007b88 <__assert_func>
 800669e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80066a2:	6005      	str	r5, [r0, #0]
 80066a4:	60c5      	str	r5, [r0, #12]
 80066a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80066a8:	6819      	ldr	r1, [r3, #0]
 80066aa:	b151      	cbz	r1, 80066c2 <_dtoa_r+0x5a>
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	604a      	str	r2, [r1, #4]
 80066b0:	2301      	movs	r3, #1
 80066b2:	4093      	lsls	r3, r2
 80066b4:	608b      	str	r3, [r1, #8]
 80066b6:	4630      	mov	r0, r6
 80066b8:	f000 fdb4 	bl	8007224 <_Bfree>
 80066bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	f1b9 0300 	subs.w	r3, r9, #0
 80066c6:	bfbb      	ittet	lt
 80066c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80066cc:	9303      	strlt	r3, [sp, #12]
 80066ce:	2300      	movge	r3, #0
 80066d0:	2201      	movlt	r2, #1
 80066d2:	bfac      	ite	ge
 80066d4:	6023      	strge	r3, [r4, #0]
 80066d6:	6022      	strlt	r2, [r4, #0]
 80066d8:	4b9b      	ldr	r3, [pc, #620]	; (8006948 <_dtoa_r+0x2e0>)
 80066da:	9c03      	ldr	r4, [sp, #12]
 80066dc:	43a3      	bics	r3, r4
 80066de:	d11c      	bne.n	800671a <_dtoa_r+0xb2>
 80066e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80066ec:	ea53 0308 	orrs.w	r3, r3, r8
 80066f0:	f000 84fd 	beq.w	80070ee <_dtoa_r+0xa86>
 80066f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066f6:	b963      	cbnz	r3, 8006712 <_dtoa_r+0xaa>
 80066f8:	4b94      	ldr	r3, [pc, #592]	; (800694c <_dtoa_r+0x2e4>)
 80066fa:	e01f      	b.n	800673c <_dtoa_r+0xd4>
 80066fc:	4b94      	ldr	r3, [pc, #592]	; (8006950 <_dtoa_r+0x2e8>)
 80066fe:	9301      	str	r3, [sp, #4]
 8006700:	3308      	adds	r3, #8
 8006702:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	9801      	ldr	r0, [sp, #4]
 8006708:	b011      	add	sp, #68	; 0x44
 800670a:	ecbd 8b02 	vpop	{d8}
 800670e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006712:	4b8e      	ldr	r3, [pc, #568]	; (800694c <_dtoa_r+0x2e4>)
 8006714:	9301      	str	r3, [sp, #4]
 8006716:	3303      	adds	r3, #3
 8006718:	e7f3      	b.n	8006702 <_dtoa_r+0x9a>
 800671a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800671e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006726:	d10b      	bne.n	8006740 <_dtoa_r+0xd8>
 8006728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800672a:	2301      	movs	r3, #1
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 84d9 	beq.w	80070e8 <_dtoa_r+0xa80>
 8006736:	4887      	ldr	r0, [pc, #540]	; (8006954 <_dtoa_r+0x2ec>)
 8006738:	6018      	str	r0, [r3, #0]
 800673a:	1e43      	subs	r3, r0, #1
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	e7e2      	b.n	8006706 <_dtoa_r+0x9e>
 8006740:	a90f      	add	r1, sp, #60	; 0x3c
 8006742:	aa0e      	add	r2, sp, #56	; 0x38
 8006744:	4630      	mov	r0, r6
 8006746:	eeb0 0b48 	vmov.f64	d0, d8
 800674a:	f001 f853 	bl	80077f4 <__d2b>
 800674e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8006752:	4605      	mov	r5, r0
 8006754:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006756:	2900      	cmp	r1, #0
 8006758:	d046      	beq.n	80067e8 <_dtoa_r+0x180>
 800675a:	ee18 4a90 	vmov	r4, s17
 800675e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006762:	ec53 2b18 	vmov	r2, r3, d8
 8006766:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800676a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800676e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006772:	2400      	movs	r4, #0
 8006774:	ec43 2b16 	vmov	d6, r2, r3
 8006778:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800677c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006928 <_dtoa_r+0x2c0>
 8006780:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006784:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8006930 <_dtoa_r+0x2c8>
 8006788:	eea7 6b05 	vfma.f64	d6, d7, d5
 800678c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006938 <_dtoa_r+0x2d0>
 8006790:	ee07 1a90 	vmov	s15, r1
 8006794:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006798:	eeb0 7b46 	vmov.f64	d7, d6
 800679c:	eea4 7b05 	vfma.f64	d7, d4, d5
 80067a0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80067a4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80067a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ac:	ee16 ba90 	vmov	fp, s13
 80067b0:	940a      	str	r4, [sp, #40]	; 0x28
 80067b2:	d508      	bpl.n	80067c6 <_dtoa_r+0x15e>
 80067b4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80067b8:	eeb4 6b47 	vcmp.f64	d6, d7
 80067bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c0:	bf18      	it	ne
 80067c2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80067c6:	f1bb 0f16 	cmp.w	fp, #22
 80067ca:	d82f      	bhi.n	800682c <_dtoa_r+0x1c4>
 80067cc:	4b62      	ldr	r3, [pc, #392]	; (8006958 <_dtoa_r+0x2f0>)
 80067ce:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067d2:	ed93 7b00 	vldr	d7, [r3]
 80067d6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80067da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067de:	d501      	bpl.n	80067e4 <_dtoa_r+0x17c>
 80067e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067e4:	2300      	movs	r3, #0
 80067e6:	e022      	b.n	800682e <_dtoa_r+0x1c6>
 80067e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80067ea:	4401      	add	r1, r0
 80067ec:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	bfc1      	itttt	gt
 80067f4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067f8:	fa04 f303 	lslgt.w	r3, r4, r3
 80067fc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8006800:	fa28 f804 	lsrgt.w	r8, r8, r4
 8006804:	bfd6      	itet	le
 8006806:	f1c3 0320 	rsble	r3, r3, #32
 800680a:	ea43 0808 	orrgt.w	r8, r3, r8
 800680e:	fa08 f803 	lslle.w	r8, r8, r3
 8006812:	ee07 8a90 	vmov	s15, r8
 8006816:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800681a:	3901      	subs	r1, #1
 800681c:	ee17 4a90 	vmov	r4, s15
 8006820:	ec53 2b17 	vmov	r2, r3, d7
 8006824:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8006828:	2401      	movs	r4, #1
 800682a:	e7a3      	b.n	8006774 <_dtoa_r+0x10c>
 800682c:	2301      	movs	r3, #1
 800682e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006830:	1a43      	subs	r3, r0, r1
 8006832:	1e5a      	subs	r2, r3, #1
 8006834:	bf45      	ittet	mi
 8006836:	f1c3 0301 	rsbmi	r3, r3, #1
 800683a:	9304      	strmi	r3, [sp, #16]
 800683c:	2300      	movpl	r3, #0
 800683e:	2300      	movmi	r3, #0
 8006840:	9205      	str	r2, [sp, #20]
 8006842:	bf54      	ite	pl
 8006844:	9304      	strpl	r3, [sp, #16]
 8006846:	9305      	strmi	r3, [sp, #20]
 8006848:	f1bb 0f00 	cmp.w	fp, #0
 800684c:	db18      	blt.n	8006880 <_dtoa_r+0x218>
 800684e:	9b05      	ldr	r3, [sp, #20]
 8006850:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006854:	445b      	add	r3, fp
 8006856:	9305      	str	r3, [sp, #20]
 8006858:	2300      	movs	r3, #0
 800685a:	9a06      	ldr	r2, [sp, #24]
 800685c:	2a09      	cmp	r2, #9
 800685e:	d849      	bhi.n	80068f4 <_dtoa_r+0x28c>
 8006860:	2a05      	cmp	r2, #5
 8006862:	bfc4      	itt	gt
 8006864:	3a04      	subgt	r2, #4
 8006866:	9206      	strgt	r2, [sp, #24]
 8006868:	9a06      	ldr	r2, [sp, #24]
 800686a:	f1a2 0202 	sub.w	r2, r2, #2
 800686e:	bfcc      	ite	gt
 8006870:	2400      	movgt	r4, #0
 8006872:	2401      	movle	r4, #1
 8006874:	2a03      	cmp	r2, #3
 8006876:	d848      	bhi.n	800690a <_dtoa_r+0x2a2>
 8006878:	e8df f002 	tbb	[pc, r2]
 800687c:	3a2c2e0b 	.word	0x3a2c2e0b
 8006880:	9b04      	ldr	r3, [sp, #16]
 8006882:	2200      	movs	r2, #0
 8006884:	eba3 030b 	sub.w	r3, r3, fp
 8006888:	9304      	str	r3, [sp, #16]
 800688a:	9209      	str	r2, [sp, #36]	; 0x24
 800688c:	f1cb 0300 	rsb	r3, fp, #0
 8006890:	e7e3      	b.n	800685a <_dtoa_r+0x1f2>
 8006892:	2200      	movs	r2, #0
 8006894:	9207      	str	r2, [sp, #28]
 8006896:	9a08      	ldr	r2, [sp, #32]
 8006898:	2a00      	cmp	r2, #0
 800689a:	dc39      	bgt.n	8006910 <_dtoa_r+0x2a8>
 800689c:	f04f 0a01 	mov.w	sl, #1
 80068a0:	46d1      	mov	r9, sl
 80068a2:	4652      	mov	r2, sl
 80068a4:	f8cd a020 	str.w	sl, [sp, #32]
 80068a8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80068aa:	2100      	movs	r1, #0
 80068ac:	6079      	str	r1, [r7, #4]
 80068ae:	2004      	movs	r0, #4
 80068b0:	f100 0c14 	add.w	ip, r0, #20
 80068b4:	4594      	cmp	ip, r2
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	d92f      	bls.n	800691a <_dtoa_r+0x2b2>
 80068ba:	4630      	mov	r0, r6
 80068bc:	930d      	str	r3, [sp, #52]	; 0x34
 80068be:	f000 fc71 	bl	80071a4 <_Balloc>
 80068c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068c4:	9001      	str	r0, [sp, #4]
 80068c6:	4602      	mov	r2, r0
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d149      	bne.n	8006960 <_dtoa_r+0x2f8>
 80068cc:	4b23      	ldr	r3, [pc, #140]	; (800695c <_dtoa_r+0x2f4>)
 80068ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80068d2:	e6e1      	b.n	8006698 <_dtoa_r+0x30>
 80068d4:	2201      	movs	r2, #1
 80068d6:	e7dd      	b.n	8006894 <_dtoa_r+0x22c>
 80068d8:	2200      	movs	r2, #0
 80068da:	9207      	str	r2, [sp, #28]
 80068dc:	9a08      	ldr	r2, [sp, #32]
 80068de:	eb0b 0a02 	add.w	sl, fp, r2
 80068e2:	f10a 0901 	add.w	r9, sl, #1
 80068e6:	464a      	mov	r2, r9
 80068e8:	2a01      	cmp	r2, #1
 80068ea:	bfb8      	it	lt
 80068ec:	2201      	movlt	r2, #1
 80068ee:	e7db      	b.n	80068a8 <_dtoa_r+0x240>
 80068f0:	2201      	movs	r2, #1
 80068f2:	e7f2      	b.n	80068da <_dtoa_r+0x272>
 80068f4:	2401      	movs	r4, #1
 80068f6:	2200      	movs	r2, #0
 80068f8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80068fc:	f04f 3aff 	mov.w	sl, #4294967295
 8006900:	2100      	movs	r1, #0
 8006902:	46d1      	mov	r9, sl
 8006904:	2212      	movs	r2, #18
 8006906:	9108      	str	r1, [sp, #32]
 8006908:	e7ce      	b.n	80068a8 <_dtoa_r+0x240>
 800690a:	2201      	movs	r2, #1
 800690c:	9207      	str	r2, [sp, #28]
 800690e:	e7f5      	b.n	80068fc <_dtoa_r+0x294>
 8006910:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006914:	46d1      	mov	r9, sl
 8006916:	4652      	mov	r2, sl
 8006918:	e7c6      	b.n	80068a8 <_dtoa_r+0x240>
 800691a:	3101      	adds	r1, #1
 800691c:	6079      	str	r1, [r7, #4]
 800691e:	0040      	lsls	r0, r0, #1
 8006920:	e7c6      	b.n	80068b0 <_dtoa_r+0x248>
 8006922:	bf00      	nop
 8006924:	f3af 8000 	nop.w
 8006928:	636f4361 	.word	0x636f4361
 800692c:	3fd287a7 	.word	0x3fd287a7
 8006930:	8b60c8b3 	.word	0x8b60c8b3
 8006934:	3fc68a28 	.word	0x3fc68a28
 8006938:	509f79fb 	.word	0x509f79fb
 800693c:	3fd34413 	.word	0x3fd34413
 8006940:	080092b5 	.word	0x080092b5
 8006944:	080092cc 	.word	0x080092cc
 8006948:	7ff00000 	.word	0x7ff00000
 800694c:	080092b1 	.word	0x080092b1
 8006950:	080092a8 	.word	0x080092a8
 8006954:	08009285 	.word	0x08009285
 8006958:	080093c0 	.word	0x080093c0
 800695c:	08009327 	.word	0x08009327
 8006960:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006962:	9901      	ldr	r1, [sp, #4]
 8006964:	6011      	str	r1, [r2, #0]
 8006966:	f1b9 0f0e 	cmp.w	r9, #14
 800696a:	d86c      	bhi.n	8006a46 <_dtoa_r+0x3de>
 800696c:	2c00      	cmp	r4, #0
 800696e:	d06a      	beq.n	8006a46 <_dtoa_r+0x3de>
 8006970:	f1bb 0f00 	cmp.w	fp, #0
 8006974:	f340 80a0 	ble.w	8006ab8 <_dtoa_r+0x450>
 8006978:	49c1      	ldr	r1, [pc, #772]	; (8006c80 <_dtoa_r+0x618>)
 800697a:	f00b 020f 	and.w	r2, fp, #15
 800697e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006982:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006986:	ed92 7b00 	vldr	d7, [r2]
 800698a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800698e:	f000 8087 	beq.w	8006aa0 <_dtoa_r+0x438>
 8006992:	4abc      	ldr	r2, [pc, #752]	; (8006c84 <_dtoa_r+0x61c>)
 8006994:	ed92 6b08 	vldr	d6, [r2, #32]
 8006998:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800699c:	ed8d 6b02 	vstr	d6, [sp, #8]
 80069a0:	f001 010f 	and.w	r1, r1, #15
 80069a4:	2203      	movs	r2, #3
 80069a6:	48b7      	ldr	r0, [pc, #732]	; (8006c84 <_dtoa_r+0x61c>)
 80069a8:	2900      	cmp	r1, #0
 80069aa:	d17b      	bne.n	8006aa4 <_dtoa_r+0x43c>
 80069ac:	ed9d 6b02 	vldr	d6, [sp, #8]
 80069b0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80069b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80069b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069ba:	2900      	cmp	r1, #0
 80069bc:	f000 80a2 	beq.w	8006b04 <_dtoa_r+0x49c>
 80069c0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80069c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80069cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d0:	f140 8098 	bpl.w	8006b04 <_dtoa_r+0x49c>
 80069d4:	f1b9 0f00 	cmp.w	r9, #0
 80069d8:	f000 8094 	beq.w	8006b04 <_dtoa_r+0x49c>
 80069dc:	f1ba 0f00 	cmp.w	sl, #0
 80069e0:	dd2f      	ble.n	8006a42 <_dtoa_r+0x3da>
 80069e2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80069e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80069ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 80069ee:	f10b 37ff 	add.w	r7, fp, #4294967295
 80069f2:	3201      	adds	r2, #1
 80069f4:	4650      	mov	r0, sl
 80069f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80069fa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80069fe:	ee07 2a90 	vmov	s15, r2
 8006a02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a06:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006a0a:	ee15 4a90 	vmov	r4, s11
 8006a0e:	ec52 1b15 	vmov	r1, r2, d5
 8006a12:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d177      	bne.n	8006b0a <_dtoa_r+0x4a2>
 8006a1a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006a1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006a22:	ec42 1b17 	vmov	d7, r1, r2
 8006a26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a2e:	f300 8263 	bgt.w	8006ef8 <_dtoa_r+0x890>
 8006a32:	eeb1 7b47 	vneg.f64	d7, d7
 8006a36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a3e:	f100 8258 	bmi.w	8006ef2 <_dtoa_r+0x88a>
 8006a42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006a46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a48:	2a00      	cmp	r2, #0
 8006a4a:	f2c0 811d 	blt.w	8006c88 <_dtoa_r+0x620>
 8006a4e:	f1bb 0f0e 	cmp.w	fp, #14
 8006a52:	f300 8119 	bgt.w	8006c88 <_dtoa_r+0x620>
 8006a56:	4b8a      	ldr	r3, [pc, #552]	; (8006c80 <_dtoa_r+0x618>)
 8006a58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a5c:	ed93 6b00 	vldr	d6, [r3]
 8006a60:	9b08      	ldr	r3, [sp, #32]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f280 80b7 	bge.w	8006bd6 <_dtoa_r+0x56e>
 8006a68:	f1b9 0f00 	cmp.w	r9, #0
 8006a6c:	f300 80b3 	bgt.w	8006bd6 <_dtoa_r+0x56e>
 8006a70:	f040 823f 	bne.w	8006ef2 <_dtoa_r+0x88a>
 8006a74:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006a78:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006a7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a88:	464c      	mov	r4, r9
 8006a8a:	464f      	mov	r7, r9
 8006a8c:	f280 8215 	bge.w	8006eba <_dtoa_r+0x852>
 8006a90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006a94:	2331      	movs	r3, #49	; 0x31
 8006a96:	f808 3b01 	strb.w	r3, [r8], #1
 8006a9a:	f10b 0b01 	add.w	fp, fp, #1
 8006a9e:	e211      	b.n	8006ec4 <_dtoa_r+0x85c>
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	e780      	b.n	80069a6 <_dtoa_r+0x33e>
 8006aa4:	07cc      	lsls	r4, r1, #31
 8006aa6:	d504      	bpl.n	8006ab2 <_dtoa_r+0x44a>
 8006aa8:	ed90 6b00 	vldr	d6, [r0]
 8006aac:	3201      	adds	r2, #1
 8006aae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006ab2:	1049      	asrs	r1, r1, #1
 8006ab4:	3008      	adds	r0, #8
 8006ab6:	e777      	b.n	80069a8 <_dtoa_r+0x340>
 8006ab8:	d022      	beq.n	8006b00 <_dtoa_r+0x498>
 8006aba:	f1cb 0100 	rsb	r1, fp, #0
 8006abe:	4a70      	ldr	r2, [pc, #448]	; (8006c80 <_dtoa_r+0x618>)
 8006ac0:	f001 000f 	and.w	r0, r1, #15
 8006ac4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006ac8:	ed92 7b00 	vldr	d7, [r2]
 8006acc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006ad0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ad4:	486b      	ldr	r0, [pc, #428]	; (8006c84 <_dtoa_r+0x61c>)
 8006ad6:	1109      	asrs	r1, r1, #4
 8006ad8:	2400      	movs	r4, #0
 8006ada:	2202      	movs	r2, #2
 8006adc:	b929      	cbnz	r1, 8006aea <_dtoa_r+0x482>
 8006ade:	2c00      	cmp	r4, #0
 8006ae0:	f43f af6a 	beq.w	80069b8 <_dtoa_r+0x350>
 8006ae4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ae8:	e766      	b.n	80069b8 <_dtoa_r+0x350>
 8006aea:	07cf      	lsls	r7, r1, #31
 8006aec:	d505      	bpl.n	8006afa <_dtoa_r+0x492>
 8006aee:	ed90 6b00 	vldr	d6, [r0]
 8006af2:	3201      	adds	r2, #1
 8006af4:	2401      	movs	r4, #1
 8006af6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006afa:	1049      	asrs	r1, r1, #1
 8006afc:	3008      	adds	r0, #8
 8006afe:	e7ed      	b.n	8006adc <_dtoa_r+0x474>
 8006b00:	2202      	movs	r2, #2
 8006b02:	e759      	b.n	80069b8 <_dtoa_r+0x350>
 8006b04:	465f      	mov	r7, fp
 8006b06:	4648      	mov	r0, r9
 8006b08:	e775      	b.n	80069f6 <_dtoa_r+0x38e>
 8006b0a:	ec42 1b17 	vmov	d7, r1, r2
 8006b0e:	4a5c      	ldr	r2, [pc, #368]	; (8006c80 <_dtoa_r+0x618>)
 8006b10:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006b14:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006b18:	9a01      	ldr	r2, [sp, #4]
 8006b1a:	1814      	adds	r4, r2, r0
 8006b1c:	9a07      	ldr	r2, [sp, #28]
 8006b1e:	b352      	cbz	r2, 8006b76 <_dtoa_r+0x50e>
 8006b20:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006b24:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006b28:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006b2c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006b30:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006b34:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006b38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006b3c:	ee14 2a90 	vmov	r2, s9
 8006b40:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006b44:	3230      	adds	r2, #48	; 0x30
 8006b46:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006b4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b52:	f808 2b01 	strb.w	r2, [r8], #1
 8006b56:	d439      	bmi.n	8006bcc <_dtoa_r+0x564>
 8006b58:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006b5c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b64:	d472      	bmi.n	8006c4c <_dtoa_r+0x5e4>
 8006b66:	45a0      	cmp	r8, r4
 8006b68:	f43f af6b 	beq.w	8006a42 <_dtoa_r+0x3da>
 8006b6c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006b70:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006b74:	e7e0      	b.n	8006b38 <_dtoa_r+0x4d0>
 8006b76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006b7a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006b7e:	4621      	mov	r1, r4
 8006b80:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006b84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006b88:	ee14 2a90 	vmov	r2, s9
 8006b8c:	3230      	adds	r2, #48	; 0x30
 8006b8e:	f808 2b01 	strb.w	r2, [r8], #1
 8006b92:	45a0      	cmp	r8, r4
 8006b94:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006b98:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006b9c:	d118      	bne.n	8006bd0 <_dtoa_r+0x568>
 8006b9e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006ba2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006ba6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bae:	dc4d      	bgt.n	8006c4c <_dtoa_r+0x5e4>
 8006bb0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006bb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bbc:	f57f af41 	bpl.w	8006a42 <_dtoa_r+0x3da>
 8006bc0:	4688      	mov	r8, r1
 8006bc2:	3901      	subs	r1, #1
 8006bc4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006bc8:	2b30      	cmp	r3, #48	; 0x30
 8006bca:	d0f9      	beq.n	8006bc0 <_dtoa_r+0x558>
 8006bcc:	46bb      	mov	fp, r7
 8006bce:	e02a      	b.n	8006c26 <_dtoa_r+0x5be>
 8006bd0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006bd4:	e7d6      	b.n	8006b84 <_dtoa_r+0x51c>
 8006bd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006bda:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006bde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006be2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006be6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006bea:	ee15 3a10 	vmov	r3, s10
 8006bee:	3330      	adds	r3, #48	; 0x30
 8006bf0:	f808 3b01 	strb.w	r3, [r8], #1
 8006bf4:	9b01      	ldr	r3, [sp, #4]
 8006bf6:	eba8 0303 	sub.w	r3, r8, r3
 8006bfa:	4599      	cmp	r9, r3
 8006bfc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006c00:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006c04:	d133      	bne.n	8006c6e <_dtoa_r+0x606>
 8006c06:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006c0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c12:	dc1a      	bgt.n	8006c4a <_dtoa_r+0x5e2>
 8006c14:	eeb4 7b46 	vcmp.f64	d7, d6
 8006c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c1c:	d103      	bne.n	8006c26 <_dtoa_r+0x5be>
 8006c1e:	ee15 3a10 	vmov	r3, s10
 8006c22:	07d9      	lsls	r1, r3, #31
 8006c24:	d411      	bmi.n	8006c4a <_dtoa_r+0x5e2>
 8006c26:	4629      	mov	r1, r5
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f000 fafb 	bl	8007224 <_Bfree>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c32:	f888 3000 	strb.w	r3, [r8]
 8006c36:	f10b 0301 	add.w	r3, fp, #1
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f43f ad61 	beq.w	8006706 <_dtoa_r+0x9e>
 8006c44:	f8c3 8000 	str.w	r8, [r3]
 8006c48:	e55d      	b.n	8006706 <_dtoa_r+0x9e>
 8006c4a:	465f      	mov	r7, fp
 8006c4c:	4643      	mov	r3, r8
 8006c4e:	4698      	mov	r8, r3
 8006c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c54:	2a39      	cmp	r2, #57	; 0x39
 8006c56:	d106      	bne.n	8006c66 <_dtoa_r+0x5fe>
 8006c58:	9a01      	ldr	r2, [sp, #4]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d1f7      	bne.n	8006c4e <_dtoa_r+0x5e6>
 8006c5e:	9901      	ldr	r1, [sp, #4]
 8006c60:	2230      	movs	r2, #48	; 0x30
 8006c62:	3701      	adds	r7, #1
 8006c64:	700a      	strb	r2, [r1, #0]
 8006c66:	781a      	ldrb	r2, [r3, #0]
 8006c68:	3201      	adds	r2, #1
 8006c6a:	701a      	strb	r2, [r3, #0]
 8006c6c:	e7ae      	b.n	8006bcc <_dtoa_r+0x564>
 8006c6e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006c72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7a:	d1b2      	bne.n	8006be2 <_dtoa_r+0x57a>
 8006c7c:	e7d3      	b.n	8006c26 <_dtoa_r+0x5be>
 8006c7e:	bf00      	nop
 8006c80:	080093c0 	.word	0x080093c0
 8006c84:	08009398 	.word	0x08009398
 8006c88:	9907      	ldr	r1, [sp, #28]
 8006c8a:	2900      	cmp	r1, #0
 8006c8c:	f000 80d0 	beq.w	8006e30 <_dtoa_r+0x7c8>
 8006c90:	9906      	ldr	r1, [sp, #24]
 8006c92:	2901      	cmp	r1, #1
 8006c94:	f300 80b4 	bgt.w	8006e00 <_dtoa_r+0x798>
 8006c98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c9a:	2900      	cmp	r1, #0
 8006c9c:	f000 80ac 	beq.w	8006df8 <_dtoa_r+0x790>
 8006ca0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006ca4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006ca8:	461c      	mov	r4, r3
 8006caa:	930a      	str	r3, [sp, #40]	; 0x28
 8006cac:	9b04      	ldr	r3, [sp, #16]
 8006cae:	4413      	add	r3, r2
 8006cb0:	9304      	str	r3, [sp, #16]
 8006cb2:	9b05      	ldr	r3, [sp, #20]
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	4413      	add	r3, r2
 8006cb8:	4630      	mov	r0, r6
 8006cba:	9305      	str	r3, [sp, #20]
 8006cbc:	f000 fb6a 	bl	8007394 <__i2b>
 8006cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc2:	4607      	mov	r7, r0
 8006cc4:	f1b8 0f00 	cmp.w	r8, #0
 8006cc8:	dd0d      	ble.n	8006ce6 <_dtoa_r+0x67e>
 8006cca:	9a05      	ldr	r2, [sp, #20]
 8006ccc:	2a00      	cmp	r2, #0
 8006cce:	dd0a      	ble.n	8006ce6 <_dtoa_r+0x67e>
 8006cd0:	4542      	cmp	r2, r8
 8006cd2:	9904      	ldr	r1, [sp, #16]
 8006cd4:	bfa8      	it	ge
 8006cd6:	4642      	movge	r2, r8
 8006cd8:	1a89      	subs	r1, r1, r2
 8006cda:	9104      	str	r1, [sp, #16]
 8006cdc:	9905      	ldr	r1, [sp, #20]
 8006cde:	eba8 0802 	sub.w	r8, r8, r2
 8006ce2:	1a8a      	subs	r2, r1, r2
 8006ce4:	9205      	str	r2, [sp, #20]
 8006ce6:	b303      	cbz	r3, 8006d2a <_dtoa_r+0x6c2>
 8006ce8:	9a07      	ldr	r2, [sp, #28]
 8006cea:	2a00      	cmp	r2, #0
 8006cec:	f000 80a5 	beq.w	8006e3a <_dtoa_r+0x7d2>
 8006cf0:	2c00      	cmp	r4, #0
 8006cf2:	dd13      	ble.n	8006d1c <_dtoa_r+0x6b4>
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	930d      	str	r3, [sp, #52]	; 0x34
 8006cfc:	f000 fc0a 	bl	8007514 <__pow5mult>
 8006d00:	462a      	mov	r2, r5
 8006d02:	4601      	mov	r1, r0
 8006d04:	4607      	mov	r7, r0
 8006d06:	4630      	mov	r0, r6
 8006d08:	f000 fb5a 	bl	80073c0 <__multiply>
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	900a      	str	r0, [sp, #40]	; 0x28
 8006d10:	4630      	mov	r0, r6
 8006d12:	f000 fa87 	bl	8007224 <_Bfree>
 8006d16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d1a:	4615      	mov	r5, r2
 8006d1c:	1b1a      	subs	r2, r3, r4
 8006d1e:	d004      	beq.n	8006d2a <_dtoa_r+0x6c2>
 8006d20:	4629      	mov	r1, r5
 8006d22:	4630      	mov	r0, r6
 8006d24:	f000 fbf6 	bl	8007514 <__pow5mult>
 8006d28:	4605      	mov	r5, r0
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f000 fb31 	bl	8007394 <__i2b>
 8006d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	4604      	mov	r4, r0
 8006d38:	f340 8081 	ble.w	8006e3e <_dtoa_r+0x7d6>
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4601      	mov	r1, r0
 8006d40:	4630      	mov	r0, r6
 8006d42:	f000 fbe7 	bl	8007514 <__pow5mult>
 8006d46:	9b06      	ldr	r3, [sp, #24]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	dd7a      	ble.n	8006e44 <_dtoa_r+0x7dc>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	930a      	str	r3, [sp, #40]	; 0x28
 8006d52:	6922      	ldr	r2, [r4, #16]
 8006d54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006d58:	6910      	ldr	r0, [r2, #16]
 8006d5a:	f000 facb 	bl	80072f4 <__hi0bits>
 8006d5e:	f1c0 0020 	rsb	r0, r0, #32
 8006d62:	9b05      	ldr	r3, [sp, #20]
 8006d64:	4418      	add	r0, r3
 8006d66:	f010 001f 	ands.w	r0, r0, #31
 8006d6a:	f000 808c 	beq.w	8006e86 <_dtoa_r+0x81e>
 8006d6e:	f1c0 0220 	rsb	r2, r0, #32
 8006d72:	2a04      	cmp	r2, #4
 8006d74:	f340 8085 	ble.w	8006e82 <_dtoa_r+0x81a>
 8006d78:	f1c0 001c 	rsb	r0, r0, #28
 8006d7c:	9b04      	ldr	r3, [sp, #16]
 8006d7e:	4403      	add	r3, r0
 8006d80:	9304      	str	r3, [sp, #16]
 8006d82:	9b05      	ldr	r3, [sp, #20]
 8006d84:	4403      	add	r3, r0
 8006d86:	4480      	add	r8, r0
 8006d88:	9305      	str	r3, [sp, #20]
 8006d8a:	9b04      	ldr	r3, [sp, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	dd05      	ble.n	8006d9c <_dtoa_r+0x734>
 8006d90:	4629      	mov	r1, r5
 8006d92:	461a      	mov	r2, r3
 8006d94:	4630      	mov	r0, r6
 8006d96:	f000 fc17 	bl	80075c8 <__lshift>
 8006d9a:	4605      	mov	r5, r0
 8006d9c:	9b05      	ldr	r3, [sp, #20]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	dd05      	ble.n	8006dae <_dtoa_r+0x746>
 8006da2:	4621      	mov	r1, r4
 8006da4:	461a      	mov	r2, r3
 8006da6:	4630      	mov	r0, r6
 8006da8:	f000 fc0e 	bl	80075c8 <__lshift>
 8006dac:	4604      	mov	r4, r0
 8006dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d06a      	beq.n	8006e8a <_dtoa_r+0x822>
 8006db4:	4621      	mov	r1, r4
 8006db6:	4628      	mov	r0, r5
 8006db8:	f000 fc76 	bl	80076a8 <__mcmp>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	da64      	bge.n	8006e8a <_dtoa_r+0x822>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	220a      	movs	r2, #10
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f000 fa4e 	bl	8007268 <__multadd>
 8006dcc:	9b07      	ldr	r3, [sp, #28]
 8006dce:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dd2:	4605      	mov	r5, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 8191 	beq.w	80070fc <_dtoa_r+0xa94>
 8006dda:	4639      	mov	r1, r7
 8006ddc:	2300      	movs	r3, #0
 8006dde:	220a      	movs	r2, #10
 8006de0:	4630      	mov	r0, r6
 8006de2:	f000 fa41 	bl	8007268 <__multadd>
 8006de6:	f1ba 0f00 	cmp.w	sl, #0
 8006dea:	4607      	mov	r7, r0
 8006dec:	f300 808d 	bgt.w	8006f0a <_dtoa_r+0x8a2>
 8006df0:	9b06      	ldr	r3, [sp, #24]
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	dc50      	bgt.n	8006e98 <_dtoa_r+0x830>
 8006df6:	e088      	b.n	8006f0a <_dtoa_r+0x8a2>
 8006df8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dfa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006dfe:	e751      	b.n	8006ca4 <_dtoa_r+0x63c>
 8006e00:	f109 34ff 	add.w	r4, r9, #4294967295
 8006e04:	42a3      	cmp	r3, r4
 8006e06:	bfbf      	itttt	lt
 8006e08:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8006e0a:	1ae3      	sublt	r3, r4, r3
 8006e0c:	18d2      	addlt	r2, r2, r3
 8006e0e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8006e10:	bfb6      	itet	lt
 8006e12:	4623      	movlt	r3, r4
 8006e14:	1b1c      	subge	r4, r3, r4
 8006e16:	2400      	movlt	r4, #0
 8006e18:	f1b9 0f00 	cmp.w	r9, #0
 8006e1c:	bfb5      	itete	lt
 8006e1e:	9a04      	ldrlt	r2, [sp, #16]
 8006e20:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8006e24:	eba2 0809 	sublt.w	r8, r2, r9
 8006e28:	464a      	movge	r2, r9
 8006e2a:	bfb8      	it	lt
 8006e2c:	2200      	movlt	r2, #0
 8006e2e:	e73c      	b.n	8006caa <_dtoa_r+0x642>
 8006e30:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006e34:	9f07      	ldr	r7, [sp, #28]
 8006e36:	461c      	mov	r4, r3
 8006e38:	e744      	b.n	8006cc4 <_dtoa_r+0x65c>
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	e770      	b.n	8006d20 <_dtoa_r+0x6b8>
 8006e3e:	9b06      	ldr	r3, [sp, #24]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	dc18      	bgt.n	8006e76 <_dtoa_r+0x80e>
 8006e44:	9b02      	ldr	r3, [sp, #8]
 8006e46:	b9b3      	cbnz	r3, 8006e76 <_dtoa_r+0x80e>
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006e4e:	b9a2      	cbnz	r2, 8006e7a <_dtoa_r+0x812>
 8006e50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e54:	0d12      	lsrs	r2, r2, #20
 8006e56:	0512      	lsls	r2, r2, #20
 8006e58:	b18a      	cbz	r2, 8006e7e <_dtoa_r+0x816>
 8006e5a:	9b04      	ldr	r3, [sp, #16]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	9304      	str	r3, [sp, #16]
 8006e60:	9b05      	ldr	r3, [sp, #20]
 8006e62:	3301      	adds	r3, #1
 8006e64:	9305      	str	r3, [sp, #20]
 8006e66:	2301      	movs	r3, #1
 8006e68:	930a      	str	r3, [sp, #40]	; 0x28
 8006e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f47f af70 	bne.w	8006d52 <_dtoa_r+0x6ea>
 8006e72:	2001      	movs	r0, #1
 8006e74:	e775      	b.n	8006d62 <_dtoa_r+0x6fa>
 8006e76:	2300      	movs	r3, #0
 8006e78:	e7f6      	b.n	8006e68 <_dtoa_r+0x800>
 8006e7a:	9b02      	ldr	r3, [sp, #8]
 8006e7c:	e7f4      	b.n	8006e68 <_dtoa_r+0x800>
 8006e7e:	920a      	str	r2, [sp, #40]	; 0x28
 8006e80:	e7f3      	b.n	8006e6a <_dtoa_r+0x802>
 8006e82:	d082      	beq.n	8006d8a <_dtoa_r+0x722>
 8006e84:	4610      	mov	r0, r2
 8006e86:	301c      	adds	r0, #28
 8006e88:	e778      	b.n	8006d7c <_dtoa_r+0x714>
 8006e8a:	f1b9 0f00 	cmp.w	r9, #0
 8006e8e:	dc37      	bgt.n	8006f00 <_dtoa_r+0x898>
 8006e90:	9b06      	ldr	r3, [sp, #24]
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	dd34      	ble.n	8006f00 <_dtoa_r+0x898>
 8006e96:	46ca      	mov	sl, r9
 8006e98:	f1ba 0f00 	cmp.w	sl, #0
 8006e9c:	d10d      	bne.n	8006eba <_dtoa_r+0x852>
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	4653      	mov	r3, sl
 8006ea2:	2205      	movs	r2, #5
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	f000 f9df 	bl	8007268 <__multadd>
 8006eaa:	4601      	mov	r1, r0
 8006eac:	4604      	mov	r4, r0
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f000 fbfa 	bl	80076a8 <__mcmp>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	f73f adeb 	bgt.w	8006a90 <_dtoa_r+0x428>
 8006eba:	9b08      	ldr	r3, [sp, #32]
 8006ebc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006ec0:	ea6f 0b03 	mvn.w	fp, r3
 8006ec4:	f04f 0900 	mov.w	r9, #0
 8006ec8:	4621      	mov	r1, r4
 8006eca:	4630      	mov	r0, r6
 8006ecc:	f000 f9aa 	bl	8007224 <_Bfree>
 8006ed0:	2f00      	cmp	r7, #0
 8006ed2:	f43f aea8 	beq.w	8006c26 <_dtoa_r+0x5be>
 8006ed6:	f1b9 0f00 	cmp.w	r9, #0
 8006eda:	d005      	beq.n	8006ee8 <_dtoa_r+0x880>
 8006edc:	45b9      	cmp	r9, r7
 8006ede:	d003      	beq.n	8006ee8 <_dtoa_r+0x880>
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f000 f99e 	bl	8007224 <_Bfree>
 8006ee8:	4639      	mov	r1, r7
 8006eea:	4630      	mov	r0, r6
 8006eec:	f000 f99a 	bl	8007224 <_Bfree>
 8006ef0:	e699      	b.n	8006c26 <_dtoa_r+0x5be>
 8006ef2:	2400      	movs	r4, #0
 8006ef4:	4627      	mov	r7, r4
 8006ef6:	e7e0      	b.n	8006eba <_dtoa_r+0x852>
 8006ef8:	46bb      	mov	fp, r7
 8006efa:	4604      	mov	r4, r0
 8006efc:	4607      	mov	r7, r0
 8006efe:	e5c7      	b.n	8006a90 <_dtoa_r+0x428>
 8006f00:	9b07      	ldr	r3, [sp, #28]
 8006f02:	46ca      	mov	sl, r9
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 8100 	beq.w	800710a <_dtoa_r+0xaa2>
 8006f0a:	f1b8 0f00 	cmp.w	r8, #0
 8006f0e:	dd05      	ble.n	8006f1c <_dtoa_r+0x8b4>
 8006f10:	4639      	mov	r1, r7
 8006f12:	4642      	mov	r2, r8
 8006f14:	4630      	mov	r0, r6
 8006f16:	f000 fb57 	bl	80075c8 <__lshift>
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d05d      	beq.n	8006fde <_dtoa_r+0x976>
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4630      	mov	r0, r6
 8006f26:	f000 f93d 	bl	80071a4 <_Balloc>
 8006f2a:	4680      	mov	r8, r0
 8006f2c:	b928      	cbnz	r0, 8006f3a <_dtoa_r+0x8d2>
 8006f2e:	4b82      	ldr	r3, [pc, #520]	; (8007138 <_dtoa_r+0xad0>)
 8006f30:	4602      	mov	r2, r0
 8006f32:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f36:	f7ff bbaf 	b.w	8006698 <_dtoa_r+0x30>
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	3202      	adds	r2, #2
 8006f3e:	0092      	lsls	r2, r2, #2
 8006f40:	f107 010c 	add.w	r1, r7, #12
 8006f44:	300c      	adds	r0, #12
 8006f46:	f000 f913 	bl	8007170 <memcpy>
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	4641      	mov	r1, r8
 8006f4e:	4630      	mov	r0, r6
 8006f50:	f000 fb3a 	bl	80075c8 <__lshift>
 8006f54:	9b01      	ldr	r3, [sp, #4]
 8006f56:	3301      	adds	r3, #1
 8006f58:	9304      	str	r3, [sp, #16]
 8006f5a:	9b01      	ldr	r3, [sp, #4]
 8006f5c:	4453      	add	r3, sl
 8006f5e:	9308      	str	r3, [sp, #32]
 8006f60:	9b02      	ldr	r3, [sp, #8]
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	46b9      	mov	r9, r7
 8006f68:	9307      	str	r3, [sp, #28]
 8006f6a:	4607      	mov	r7, r0
 8006f6c:	9b04      	ldr	r3, [sp, #16]
 8006f6e:	4621      	mov	r1, r4
 8006f70:	3b01      	subs	r3, #1
 8006f72:	4628      	mov	r0, r5
 8006f74:	9302      	str	r3, [sp, #8]
 8006f76:	f7ff faeb 	bl	8006550 <quorem>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	3330      	adds	r3, #48	; 0x30
 8006f7e:	9005      	str	r0, [sp, #20]
 8006f80:	4649      	mov	r1, r9
 8006f82:	4628      	mov	r0, r5
 8006f84:	9309      	str	r3, [sp, #36]	; 0x24
 8006f86:	f000 fb8f 	bl	80076a8 <__mcmp>
 8006f8a:	463a      	mov	r2, r7
 8006f8c:	4682      	mov	sl, r0
 8006f8e:	4621      	mov	r1, r4
 8006f90:	4630      	mov	r0, r6
 8006f92:	f000 fba5 	bl	80076e0 <__mdiff>
 8006f96:	68c2      	ldr	r2, [r0, #12]
 8006f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f9a:	4680      	mov	r8, r0
 8006f9c:	bb0a      	cbnz	r2, 8006fe2 <_dtoa_r+0x97a>
 8006f9e:	4601      	mov	r1, r0
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	f000 fb81 	bl	80076a8 <__mcmp>
 8006fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa8:	4602      	mov	r2, r0
 8006faa:	4641      	mov	r1, r8
 8006fac:	4630      	mov	r0, r6
 8006fae:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006fb2:	f000 f937 	bl	8007224 <_Bfree>
 8006fb6:	9b06      	ldr	r3, [sp, #24]
 8006fb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fba:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006fbe:	ea43 0102 	orr.w	r1, r3, r2
 8006fc2:	9b07      	ldr	r3, [sp, #28]
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc8:	d10d      	bne.n	8006fe6 <_dtoa_r+0x97e>
 8006fca:	2b39      	cmp	r3, #57	; 0x39
 8006fcc:	d029      	beq.n	8007022 <_dtoa_r+0x9ba>
 8006fce:	f1ba 0f00 	cmp.w	sl, #0
 8006fd2:	dd01      	ble.n	8006fd8 <_dtoa_r+0x970>
 8006fd4:	9b05      	ldr	r3, [sp, #20]
 8006fd6:	3331      	adds	r3, #49	; 0x31
 8006fd8:	9a02      	ldr	r2, [sp, #8]
 8006fda:	7013      	strb	r3, [r2, #0]
 8006fdc:	e774      	b.n	8006ec8 <_dtoa_r+0x860>
 8006fde:	4638      	mov	r0, r7
 8006fe0:	e7b8      	b.n	8006f54 <_dtoa_r+0x8ec>
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	e7e1      	b.n	8006faa <_dtoa_r+0x942>
 8006fe6:	f1ba 0f00 	cmp.w	sl, #0
 8006fea:	db06      	blt.n	8006ffa <_dtoa_r+0x992>
 8006fec:	9906      	ldr	r1, [sp, #24]
 8006fee:	ea41 0a0a 	orr.w	sl, r1, sl
 8006ff2:	9907      	ldr	r1, [sp, #28]
 8006ff4:	ea5a 0101 	orrs.w	r1, sl, r1
 8006ff8:	d120      	bne.n	800703c <_dtoa_r+0x9d4>
 8006ffa:	2a00      	cmp	r2, #0
 8006ffc:	ddec      	ble.n	8006fd8 <_dtoa_r+0x970>
 8006ffe:	4629      	mov	r1, r5
 8007000:	2201      	movs	r2, #1
 8007002:	4630      	mov	r0, r6
 8007004:	9304      	str	r3, [sp, #16]
 8007006:	f000 fadf 	bl	80075c8 <__lshift>
 800700a:	4621      	mov	r1, r4
 800700c:	4605      	mov	r5, r0
 800700e:	f000 fb4b 	bl	80076a8 <__mcmp>
 8007012:	2800      	cmp	r0, #0
 8007014:	9b04      	ldr	r3, [sp, #16]
 8007016:	dc02      	bgt.n	800701e <_dtoa_r+0x9b6>
 8007018:	d1de      	bne.n	8006fd8 <_dtoa_r+0x970>
 800701a:	07da      	lsls	r2, r3, #31
 800701c:	d5dc      	bpl.n	8006fd8 <_dtoa_r+0x970>
 800701e:	2b39      	cmp	r3, #57	; 0x39
 8007020:	d1d8      	bne.n	8006fd4 <_dtoa_r+0x96c>
 8007022:	9a02      	ldr	r2, [sp, #8]
 8007024:	2339      	movs	r3, #57	; 0x39
 8007026:	7013      	strb	r3, [r2, #0]
 8007028:	4643      	mov	r3, r8
 800702a:	4698      	mov	r8, r3
 800702c:	3b01      	subs	r3, #1
 800702e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007032:	2a39      	cmp	r2, #57	; 0x39
 8007034:	d051      	beq.n	80070da <_dtoa_r+0xa72>
 8007036:	3201      	adds	r2, #1
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	e745      	b.n	8006ec8 <_dtoa_r+0x860>
 800703c:	2a00      	cmp	r2, #0
 800703e:	dd03      	ble.n	8007048 <_dtoa_r+0x9e0>
 8007040:	2b39      	cmp	r3, #57	; 0x39
 8007042:	d0ee      	beq.n	8007022 <_dtoa_r+0x9ba>
 8007044:	3301      	adds	r3, #1
 8007046:	e7c7      	b.n	8006fd8 <_dtoa_r+0x970>
 8007048:	9a04      	ldr	r2, [sp, #16]
 800704a:	9908      	ldr	r1, [sp, #32]
 800704c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007050:	428a      	cmp	r2, r1
 8007052:	d02b      	beq.n	80070ac <_dtoa_r+0xa44>
 8007054:	4629      	mov	r1, r5
 8007056:	2300      	movs	r3, #0
 8007058:	220a      	movs	r2, #10
 800705a:	4630      	mov	r0, r6
 800705c:	f000 f904 	bl	8007268 <__multadd>
 8007060:	45b9      	cmp	r9, r7
 8007062:	4605      	mov	r5, r0
 8007064:	f04f 0300 	mov.w	r3, #0
 8007068:	f04f 020a 	mov.w	r2, #10
 800706c:	4649      	mov	r1, r9
 800706e:	4630      	mov	r0, r6
 8007070:	d107      	bne.n	8007082 <_dtoa_r+0xa1a>
 8007072:	f000 f8f9 	bl	8007268 <__multadd>
 8007076:	4681      	mov	r9, r0
 8007078:	4607      	mov	r7, r0
 800707a:	9b04      	ldr	r3, [sp, #16]
 800707c:	3301      	adds	r3, #1
 800707e:	9304      	str	r3, [sp, #16]
 8007080:	e774      	b.n	8006f6c <_dtoa_r+0x904>
 8007082:	f000 f8f1 	bl	8007268 <__multadd>
 8007086:	4639      	mov	r1, r7
 8007088:	4681      	mov	r9, r0
 800708a:	2300      	movs	r3, #0
 800708c:	220a      	movs	r2, #10
 800708e:	4630      	mov	r0, r6
 8007090:	f000 f8ea 	bl	8007268 <__multadd>
 8007094:	4607      	mov	r7, r0
 8007096:	e7f0      	b.n	800707a <_dtoa_r+0xa12>
 8007098:	f1ba 0f00 	cmp.w	sl, #0
 800709c:	9a01      	ldr	r2, [sp, #4]
 800709e:	bfcc      	ite	gt
 80070a0:	46d0      	movgt	r8, sl
 80070a2:	f04f 0801 	movle.w	r8, #1
 80070a6:	4490      	add	r8, r2
 80070a8:	f04f 0900 	mov.w	r9, #0
 80070ac:	4629      	mov	r1, r5
 80070ae:	2201      	movs	r2, #1
 80070b0:	4630      	mov	r0, r6
 80070b2:	9302      	str	r3, [sp, #8]
 80070b4:	f000 fa88 	bl	80075c8 <__lshift>
 80070b8:	4621      	mov	r1, r4
 80070ba:	4605      	mov	r5, r0
 80070bc:	f000 faf4 	bl	80076a8 <__mcmp>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	dcb1      	bgt.n	8007028 <_dtoa_r+0x9c0>
 80070c4:	d102      	bne.n	80070cc <_dtoa_r+0xa64>
 80070c6:	9b02      	ldr	r3, [sp, #8]
 80070c8:	07db      	lsls	r3, r3, #31
 80070ca:	d4ad      	bmi.n	8007028 <_dtoa_r+0x9c0>
 80070cc:	4643      	mov	r3, r8
 80070ce:	4698      	mov	r8, r3
 80070d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070d4:	2a30      	cmp	r2, #48	; 0x30
 80070d6:	d0fa      	beq.n	80070ce <_dtoa_r+0xa66>
 80070d8:	e6f6      	b.n	8006ec8 <_dtoa_r+0x860>
 80070da:	9a01      	ldr	r2, [sp, #4]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d1a4      	bne.n	800702a <_dtoa_r+0x9c2>
 80070e0:	f10b 0b01 	add.w	fp, fp, #1
 80070e4:	2331      	movs	r3, #49	; 0x31
 80070e6:	e778      	b.n	8006fda <_dtoa_r+0x972>
 80070e8:	4b14      	ldr	r3, [pc, #80]	; (800713c <_dtoa_r+0xad4>)
 80070ea:	f7ff bb27 	b.w	800673c <_dtoa_r+0xd4>
 80070ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f47f ab03 	bne.w	80066fc <_dtoa_r+0x94>
 80070f6:	4b12      	ldr	r3, [pc, #72]	; (8007140 <_dtoa_r+0xad8>)
 80070f8:	f7ff bb20 	b.w	800673c <_dtoa_r+0xd4>
 80070fc:	f1ba 0f00 	cmp.w	sl, #0
 8007100:	dc03      	bgt.n	800710a <_dtoa_r+0xaa2>
 8007102:	9b06      	ldr	r3, [sp, #24]
 8007104:	2b02      	cmp	r3, #2
 8007106:	f73f aec7 	bgt.w	8006e98 <_dtoa_r+0x830>
 800710a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800710e:	4621      	mov	r1, r4
 8007110:	4628      	mov	r0, r5
 8007112:	f7ff fa1d 	bl	8006550 <quorem>
 8007116:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800711a:	f808 3b01 	strb.w	r3, [r8], #1
 800711e:	9a01      	ldr	r2, [sp, #4]
 8007120:	eba8 0202 	sub.w	r2, r8, r2
 8007124:	4592      	cmp	sl, r2
 8007126:	ddb7      	ble.n	8007098 <_dtoa_r+0xa30>
 8007128:	4629      	mov	r1, r5
 800712a:	2300      	movs	r3, #0
 800712c:	220a      	movs	r2, #10
 800712e:	4630      	mov	r0, r6
 8007130:	f000 f89a 	bl	8007268 <__multadd>
 8007134:	4605      	mov	r5, r0
 8007136:	e7ea      	b.n	800710e <_dtoa_r+0xaa6>
 8007138:	08009327 	.word	0x08009327
 800713c:	08009284 	.word	0x08009284
 8007140:	080092a8 	.word	0x080092a8

08007144 <_localeconv_r>:
 8007144:	4800      	ldr	r0, [pc, #0]	; (8007148 <_localeconv_r+0x4>)
 8007146:	4770      	bx	lr
 8007148:	200001a0 	.word	0x200001a0

0800714c <_lseek_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	4d07      	ldr	r5, [pc, #28]	; (800716c <_lseek_r+0x20>)
 8007150:	4604      	mov	r4, r0
 8007152:	4608      	mov	r0, r1
 8007154:	4611      	mov	r1, r2
 8007156:	2200      	movs	r2, #0
 8007158:	602a      	str	r2, [r5, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	f001 fa82 	bl	8008664 <_lseek>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	d102      	bne.n	800716a <_lseek_r+0x1e>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	b103      	cbz	r3, 800716a <_lseek_r+0x1e>
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	bd38      	pop	{r3, r4, r5, pc}
 800716c:	20000bdc 	.word	0x20000bdc

08007170 <memcpy>:
 8007170:	440a      	add	r2, r1
 8007172:	4291      	cmp	r1, r2
 8007174:	f100 33ff 	add.w	r3, r0, #4294967295
 8007178:	d100      	bne.n	800717c <memcpy+0xc>
 800717a:	4770      	bx	lr
 800717c:	b510      	push	{r4, lr}
 800717e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007186:	4291      	cmp	r1, r2
 8007188:	d1f9      	bne.n	800717e <memcpy+0xe>
 800718a:	bd10      	pop	{r4, pc}

0800718c <__malloc_lock>:
 800718c:	4801      	ldr	r0, [pc, #4]	; (8007194 <__malloc_lock+0x8>)
 800718e:	f000 bee3 	b.w	8007f58 <__retarget_lock_acquire_recursive>
 8007192:	bf00      	nop
 8007194:	20000be0 	.word	0x20000be0

08007198 <__malloc_unlock>:
 8007198:	4801      	ldr	r0, [pc, #4]	; (80071a0 <__malloc_unlock+0x8>)
 800719a:	f000 bede 	b.w	8007f5a <__retarget_lock_release_recursive>
 800719e:	bf00      	nop
 80071a0:	20000be0 	.word	0x20000be0

080071a4 <_Balloc>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071a8:	4604      	mov	r4, r0
 80071aa:	460d      	mov	r5, r1
 80071ac:	b976      	cbnz	r6, 80071cc <_Balloc+0x28>
 80071ae:	2010      	movs	r0, #16
 80071b0:	f7fe fbe6 	bl	8005980 <malloc>
 80071b4:	4602      	mov	r2, r0
 80071b6:	6260      	str	r0, [r4, #36]	; 0x24
 80071b8:	b920      	cbnz	r0, 80071c4 <_Balloc+0x20>
 80071ba:	4b18      	ldr	r3, [pc, #96]	; (800721c <_Balloc+0x78>)
 80071bc:	4818      	ldr	r0, [pc, #96]	; (8007220 <_Balloc+0x7c>)
 80071be:	2166      	movs	r1, #102	; 0x66
 80071c0:	f000 fce2 	bl	8007b88 <__assert_func>
 80071c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071c8:	6006      	str	r6, [r0, #0]
 80071ca:	60c6      	str	r6, [r0, #12]
 80071cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071ce:	68f3      	ldr	r3, [r6, #12]
 80071d0:	b183      	cbz	r3, 80071f4 <_Balloc+0x50>
 80071d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071da:	b9b8      	cbnz	r0, 800720c <_Balloc+0x68>
 80071dc:	2101      	movs	r1, #1
 80071de:	fa01 f605 	lsl.w	r6, r1, r5
 80071e2:	1d72      	adds	r2, r6, #5
 80071e4:	0092      	lsls	r2, r2, #2
 80071e6:	4620      	mov	r0, r4
 80071e8:	f7fe fbe2 	bl	80059b0 <_calloc_r>
 80071ec:	b160      	cbz	r0, 8007208 <_Balloc+0x64>
 80071ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071f2:	e00e      	b.n	8007212 <_Balloc+0x6e>
 80071f4:	2221      	movs	r2, #33	; 0x21
 80071f6:	2104      	movs	r1, #4
 80071f8:	4620      	mov	r0, r4
 80071fa:	f7fe fbd9 	bl	80059b0 <_calloc_r>
 80071fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007200:	60f0      	str	r0, [r6, #12]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1e4      	bne.n	80071d2 <_Balloc+0x2e>
 8007208:	2000      	movs	r0, #0
 800720a:	bd70      	pop	{r4, r5, r6, pc}
 800720c:	6802      	ldr	r2, [r0, #0]
 800720e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007212:	2300      	movs	r3, #0
 8007214:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007218:	e7f7      	b.n	800720a <_Balloc+0x66>
 800721a:	bf00      	nop
 800721c:	080092b5 	.word	0x080092b5
 8007220:	08009338 	.word	0x08009338

08007224 <_Bfree>:
 8007224:	b570      	push	{r4, r5, r6, lr}
 8007226:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007228:	4605      	mov	r5, r0
 800722a:	460c      	mov	r4, r1
 800722c:	b976      	cbnz	r6, 800724c <_Bfree+0x28>
 800722e:	2010      	movs	r0, #16
 8007230:	f7fe fba6 	bl	8005980 <malloc>
 8007234:	4602      	mov	r2, r0
 8007236:	6268      	str	r0, [r5, #36]	; 0x24
 8007238:	b920      	cbnz	r0, 8007244 <_Bfree+0x20>
 800723a:	4b09      	ldr	r3, [pc, #36]	; (8007260 <_Bfree+0x3c>)
 800723c:	4809      	ldr	r0, [pc, #36]	; (8007264 <_Bfree+0x40>)
 800723e:	218a      	movs	r1, #138	; 0x8a
 8007240:	f000 fca2 	bl	8007b88 <__assert_func>
 8007244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007248:	6006      	str	r6, [r0, #0]
 800724a:	60c6      	str	r6, [r0, #12]
 800724c:	b13c      	cbz	r4, 800725e <_Bfree+0x3a>
 800724e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007250:	6862      	ldr	r2, [r4, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007258:	6021      	str	r1, [r4, #0]
 800725a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	080092b5 	.word	0x080092b5
 8007264:	08009338 	.word	0x08009338

08007268 <__multadd>:
 8007268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800726c:	690d      	ldr	r5, [r1, #16]
 800726e:	4607      	mov	r7, r0
 8007270:	460c      	mov	r4, r1
 8007272:	461e      	mov	r6, r3
 8007274:	f101 0c14 	add.w	ip, r1, #20
 8007278:	2000      	movs	r0, #0
 800727a:	f8dc 3000 	ldr.w	r3, [ip]
 800727e:	b299      	uxth	r1, r3
 8007280:	fb02 6101 	mla	r1, r2, r1, r6
 8007284:	0c1e      	lsrs	r6, r3, #16
 8007286:	0c0b      	lsrs	r3, r1, #16
 8007288:	fb02 3306 	mla	r3, r2, r6, r3
 800728c:	b289      	uxth	r1, r1
 800728e:	3001      	adds	r0, #1
 8007290:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007294:	4285      	cmp	r5, r0
 8007296:	f84c 1b04 	str.w	r1, [ip], #4
 800729a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800729e:	dcec      	bgt.n	800727a <__multadd+0x12>
 80072a0:	b30e      	cbz	r6, 80072e6 <__multadd+0x7e>
 80072a2:	68a3      	ldr	r3, [r4, #8]
 80072a4:	42ab      	cmp	r3, r5
 80072a6:	dc19      	bgt.n	80072dc <__multadd+0x74>
 80072a8:	6861      	ldr	r1, [r4, #4]
 80072aa:	4638      	mov	r0, r7
 80072ac:	3101      	adds	r1, #1
 80072ae:	f7ff ff79 	bl	80071a4 <_Balloc>
 80072b2:	4680      	mov	r8, r0
 80072b4:	b928      	cbnz	r0, 80072c2 <__multadd+0x5a>
 80072b6:	4602      	mov	r2, r0
 80072b8:	4b0c      	ldr	r3, [pc, #48]	; (80072ec <__multadd+0x84>)
 80072ba:	480d      	ldr	r0, [pc, #52]	; (80072f0 <__multadd+0x88>)
 80072bc:	21b5      	movs	r1, #181	; 0xb5
 80072be:	f000 fc63 	bl	8007b88 <__assert_func>
 80072c2:	6922      	ldr	r2, [r4, #16]
 80072c4:	3202      	adds	r2, #2
 80072c6:	f104 010c 	add.w	r1, r4, #12
 80072ca:	0092      	lsls	r2, r2, #2
 80072cc:	300c      	adds	r0, #12
 80072ce:	f7ff ff4f 	bl	8007170 <memcpy>
 80072d2:	4621      	mov	r1, r4
 80072d4:	4638      	mov	r0, r7
 80072d6:	f7ff ffa5 	bl	8007224 <_Bfree>
 80072da:	4644      	mov	r4, r8
 80072dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072e0:	3501      	adds	r5, #1
 80072e2:	615e      	str	r6, [r3, #20]
 80072e4:	6125      	str	r5, [r4, #16]
 80072e6:	4620      	mov	r0, r4
 80072e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ec:	08009327 	.word	0x08009327
 80072f0:	08009338 	.word	0x08009338

080072f4 <__hi0bits>:
 80072f4:	0c03      	lsrs	r3, r0, #16
 80072f6:	041b      	lsls	r3, r3, #16
 80072f8:	b9d3      	cbnz	r3, 8007330 <__hi0bits+0x3c>
 80072fa:	0400      	lsls	r0, r0, #16
 80072fc:	2310      	movs	r3, #16
 80072fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007302:	bf04      	itt	eq
 8007304:	0200      	lsleq	r0, r0, #8
 8007306:	3308      	addeq	r3, #8
 8007308:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800730c:	bf04      	itt	eq
 800730e:	0100      	lsleq	r0, r0, #4
 8007310:	3304      	addeq	r3, #4
 8007312:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007316:	bf04      	itt	eq
 8007318:	0080      	lsleq	r0, r0, #2
 800731a:	3302      	addeq	r3, #2
 800731c:	2800      	cmp	r0, #0
 800731e:	db05      	blt.n	800732c <__hi0bits+0x38>
 8007320:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007324:	f103 0301 	add.w	r3, r3, #1
 8007328:	bf08      	it	eq
 800732a:	2320      	moveq	r3, #32
 800732c:	4618      	mov	r0, r3
 800732e:	4770      	bx	lr
 8007330:	2300      	movs	r3, #0
 8007332:	e7e4      	b.n	80072fe <__hi0bits+0xa>

08007334 <__lo0bits>:
 8007334:	6803      	ldr	r3, [r0, #0]
 8007336:	f013 0207 	ands.w	r2, r3, #7
 800733a:	4601      	mov	r1, r0
 800733c:	d00b      	beq.n	8007356 <__lo0bits+0x22>
 800733e:	07da      	lsls	r2, r3, #31
 8007340:	d423      	bmi.n	800738a <__lo0bits+0x56>
 8007342:	0798      	lsls	r0, r3, #30
 8007344:	bf49      	itett	mi
 8007346:	085b      	lsrmi	r3, r3, #1
 8007348:	089b      	lsrpl	r3, r3, #2
 800734a:	2001      	movmi	r0, #1
 800734c:	600b      	strmi	r3, [r1, #0]
 800734e:	bf5c      	itt	pl
 8007350:	600b      	strpl	r3, [r1, #0]
 8007352:	2002      	movpl	r0, #2
 8007354:	4770      	bx	lr
 8007356:	b298      	uxth	r0, r3
 8007358:	b9a8      	cbnz	r0, 8007386 <__lo0bits+0x52>
 800735a:	0c1b      	lsrs	r3, r3, #16
 800735c:	2010      	movs	r0, #16
 800735e:	b2da      	uxtb	r2, r3
 8007360:	b90a      	cbnz	r2, 8007366 <__lo0bits+0x32>
 8007362:	3008      	adds	r0, #8
 8007364:	0a1b      	lsrs	r3, r3, #8
 8007366:	071a      	lsls	r2, r3, #28
 8007368:	bf04      	itt	eq
 800736a:	091b      	lsreq	r3, r3, #4
 800736c:	3004      	addeq	r0, #4
 800736e:	079a      	lsls	r2, r3, #30
 8007370:	bf04      	itt	eq
 8007372:	089b      	lsreq	r3, r3, #2
 8007374:	3002      	addeq	r0, #2
 8007376:	07da      	lsls	r2, r3, #31
 8007378:	d403      	bmi.n	8007382 <__lo0bits+0x4e>
 800737a:	085b      	lsrs	r3, r3, #1
 800737c:	f100 0001 	add.w	r0, r0, #1
 8007380:	d005      	beq.n	800738e <__lo0bits+0x5a>
 8007382:	600b      	str	r3, [r1, #0]
 8007384:	4770      	bx	lr
 8007386:	4610      	mov	r0, r2
 8007388:	e7e9      	b.n	800735e <__lo0bits+0x2a>
 800738a:	2000      	movs	r0, #0
 800738c:	4770      	bx	lr
 800738e:	2020      	movs	r0, #32
 8007390:	4770      	bx	lr
	...

08007394 <__i2b>:
 8007394:	b510      	push	{r4, lr}
 8007396:	460c      	mov	r4, r1
 8007398:	2101      	movs	r1, #1
 800739a:	f7ff ff03 	bl	80071a4 <_Balloc>
 800739e:	4602      	mov	r2, r0
 80073a0:	b928      	cbnz	r0, 80073ae <__i2b+0x1a>
 80073a2:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <__i2b+0x24>)
 80073a4:	4805      	ldr	r0, [pc, #20]	; (80073bc <__i2b+0x28>)
 80073a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80073aa:	f000 fbed 	bl	8007b88 <__assert_func>
 80073ae:	2301      	movs	r3, #1
 80073b0:	6144      	str	r4, [r0, #20]
 80073b2:	6103      	str	r3, [r0, #16]
 80073b4:	bd10      	pop	{r4, pc}
 80073b6:	bf00      	nop
 80073b8:	08009327 	.word	0x08009327
 80073bc:	08009338 	.word	0x08009338

080073c0 <__multiply>:
 80073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	4691      	mov	r9, r2
 80073c6:	690a      	ldr	r2, [r1, #16]
 80073c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	bfb8      	it	lt
 80073d0:	460b      	movlt	r3, r1
 80073d2:	460c      	mov	r4, r1
 80073d4:	bfbc      	itt	lt
 80073d6:	464c      	movlt	r4, r9
 80073d8:	4699      	movlt	r9, r3
 80073da:	6927      	ldr	r7, [r4, #16]
 80073dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073e0:	68a3      	ldr	r3, [r4, #8]
 80073e2:	6861      	ldr	r1, [r4, #4]
 80073e4:	eb07 060a 	add.w	r6, r7, sl
 80073e8:	42b3      	cmp	r3, r6
 80073ea:	b085      	sub	sp, #20
 80073ec:	bfb8      	it	lt
 80073ee:	3101      	addlt	r1, #1
 80073f0:	f7ff fed8 	bl	80071a4 <_Balloc>
 80073f4:	b930      	cbnz	r0, 8007404 <__multiply+0x44>
 80073f6:	4602      	mov	r2, r0
 80073f8:	4b44      	ldr	r3, [pc, #272]	; (800750c <__multiply+0x14c>)
 80073fa:	4845      	ldr	r0, [pc, #276]	; (8007510 <__multiply+0x150>)
 80073fc:	f240 115d 	movw	r1, #349	; 0x15d
 8007400:	f000 fbc2 	bl	8007b88 <__assert_func>
 8007404:	f100 0514 	add.w	r5, r0, #20
 8007408:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800740c:	462b      	mov	r3, r5
 800740e:	2200      	movs	r2, #0
 8007410:	4543      	cmp	r3, r8
 8007412:	d321      	bcc.n	8007458 <__multiply+0x98>
 8007414:	f104 0314 	add.w	r3, r4, #20
 8007418:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800741c:	f109 0314 	add.w	r3, r9, #20
 8007420:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007424:	9202      	str	r2, [sp, #8]
 8007426:	1b3a      	subs	r2, r7, r4
 8007428:	3a15      	subs	r2, #21
 800742a:	f022 0203 	bic.w	r2, r2, #3
 800742e:	3204      	adds	r2, #4
 8007430:	f104 0115 	add.w	r1, r4, #21
 8007434:	428f      	cmp	r7, r1
 8007436:	bf38      	it	cc
 8007438:	2204      	movcc	r2, #4
 800743a:	9201      	str	r2, [sp, #4]
 800743c:	9a02      	ldr	r2, [sp, #8]
 800743e:	9303      	str	r3, [sp, #12]
 8007440:	429a      	cmp	r2, r3
 8007442:	d80c      	bhi.n	800745e <__multiply+0x9e>
 8007444:	2e00      	cmp	r6, #0
 8007446:	dd03      	ble.n	8007450 <__multiply+0x90>
 8007448:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800744c:	2b00      	cmp	r3, #0
 800744e:	d05a      	beq.n	8007506 <__multiply+0x146>
 8007450:	6106      	str	r6, [r0, #16]
 8007452:	b005      	add	sp, #20
 8007454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007458:	f843 2b04 	str.w	r2, [r3], #4
 800745c:	e7d8      	b.n	8007410 <__multiply+0x50>
 800745e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007462:	f1ba 0f00 	cmp.w	sl, #0
 8007466:	d024      	beq.n	80074b2 <__multiply+0xf2>
 8007468:	f104 0e14 	add.w	lr, r4, #20
 800746c:	46a9      	mov	r9, r5
 800746e:	f04f 0c00 	mov.w	ip, #0
 8007472:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007476:	f8d9 1000 	ldr.w	r1, [r9]
 800747a:	fa1f fb82 	uxth.w	fp, r2
 800747e:	b289      	uxth	r1, r1
 8007480:	fb0a 110b 	mla	r1, sl, fp, r1
 8007484:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007488:	f8d9 2000 	ldr.w	r2, [r9]
 800748c:	4461      	add	r1, ip
 800748e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007492:	fb0a c20b 	mla	r2, sl, fp, ip
 8007496:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800749a:	b289      	uxth	r1, r1
 800749c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074a0:	4577      	cmp	r7, lr
 80074a2:	f849 1b04 	str.w	r1, [r9], #4
 80074a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074aa:	d8e2      	bhi.n	8007472 <__multiply+0xb2>
 80074ac:	9a01      	ldr	r2, [sp, #4]
 80074ae:	f845 c002 	str.w	ip, [r5, r2]
 80074b2:	9a03      	ldr	r2, [sp, #12]
 80074b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074b8:	3304      	adds	r3, #4
 80074ba:	f1b9 0f00 	cmp.w	r9, #0
 80074be:	d020      	beq.n	8007502 <__multiply+0x142>
 80074c0:	6829      	ldr	r1, [r5, #0]
 80074c2:	f104 0c14 	add.w	ip, r4, #20
 80074c6:	46ae      	mov	lr, r5
 80074c8:	f04f 0a00 	mov.w	sl, #0
 80074cc:	f8bc b000 	ldrh.w	fp, [ip]
 80074d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074d4:	fb09 220b 	mla	r2, r9, fp, r2
 80074d8:	4492      	add	sl, r2
 80074da:	b289      	uxth	r1, r1
 80074dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80074e0:	f84e 1b04 	str.w	r1, [lr], #4
 80074e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80074e8:	f8be 1000 	ldrh.w	r1, [lr]
 80074ec:	0c12      	lsrs	r2, r2, #16
 80074ee:	fb09 1102 	mla	r1, r9, r2, r1
 80074f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80074f6:	4567      	cmp	r7, ip
 80074f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074fc:	d8e6      	bhi.n	80074cc <__multiply+0x10c>
 80074fe:	9a01      	ldr	r2, [sp, #4]
 8007500:	50a9      	str	r1, [r5, r2]
 8007502:	3504      	adds	r5, #4
 8007504:	e79a      	b.n	800743c <__multiply+0x7c>
 8007506:	3e01      	subs	r6, #1
 8007508:	e79c      	b.n	8007444 <__multiply+0x84>
 800750a:	bf00      	nop
 800750c:	08009327 	.word	0x08009327
 8007510:	08009338 	.word	0x08009338

08007514 <__pow5mult>:
 8007514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007518:	4615      	mov	r5, r2
 800751a:	f012 0203 	ands.w	r2, r2, #3
 800751e:	4606      	mov	r6, r0
 8007520:	460f      	mov	r7, r1
 8007522:	d007      	beq.n	8007534 <__pow5mult+0x20>
 8007524:	4c25      	ldr	r4, [pc, #148]	; (80075bc <__pow5mult+0xa8>)
 8007526:	3a01      	subs	r2, #1
 8007528:	2300      	movs	r3, #0
 800752a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800752e:	f7ff fe9b 	bl	8007268 <__multadd>
 8007532:	4607      	mov	r7, r0
 8007534:	10ad      	asrs	r5, r5, #2
 8007536:	d03d      	beq.n	80075b4 <__pow5mult+0xa0>
 8007538:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800753a:	b97c      	cbnz	r4, 800755c <__pow5mult+0x48>
 800753c:	2010      	movs	r0, #16
 800753e:	f7fe fa1f 	bl	8005980 <malloc>
 8007542:	4602      	mov	r2, r0
 8007544:	6270      	str	r0, [r6, #36]	; 0x24
 8007546:	b928      	cbnz	r0, 8007554 <__pow5mult+0x40>
 8007548:	4b1d      	ldr	r3, [pc, #116]	; (80075c0 <__pow5mult+0xac>)
 800754a:	481e      	ldr	r0, [pc, #120]	; (80075c4 <__pow5mult+0xb0>)
 800754c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007550:	f000 fb1a 	bl	8007b88 <__assert_func>
 8007554:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007558:	6004      	str	r4, [r0, #0]
 800755a:	60c4      	str	r4, [r0, #12]
 800755c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007560:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007564:	b94c      	cbnz	r4, 800757a <__pow5mult+0x66>
 8007566:	f240 2171 	movw	r1, #625	; 0x271
 800756a:	4630      	mov	r0, r6
 800756c:	f7ff ff12 	bl	8007394 <__i2b>
 8007570:	2300      	movs	r3, #0
 8007572:	f8c8 0008 	str.w	r0, [r8, #8]
 8007576:	4604      	mov	r4, r0
 8007578:	6003      	str	r3, [r0, #0]
 800757a:	f04f 0900 	mov.w	r9, #0
 800757e:	07eb      	lsls	r3, r5, #31
 8007580:	d50a      	bpl.n	8007598 <__pow5mult+0x84>
 8007582:	4639      	mov	r1, r7
 8007584:	4622      	mov	r2, r4
 8007586:	4630      	mov	r0, r6
 8007588:	f7ff ff1a 	bl	80073c0 <__multiply>
 800758c:	4639      	mov	r1, r7
 800758e:	4680      	mov	r8, r0
 8007590:	4630      	mov	r0, r6
 8007592:	f7ff fe47 	bl	8007224 <_Bfree>
 8007596:	4647      	mov	r7, r8
 8007598:	106d      	asrs	r5, r5, #1
 800759a:	d00b      	beq.n	80075b4 <__pow5mult+0xa0>
 800759c:	6820      	ldr	r0, [r4, #0]
 800759e:	b938      	cbnz	r0, 80075b0 <__pow5mult+0x9c>
 80075a0:	4622      	mov	r2, r4
 80075a2:	4621      	mov	r1, r4
 80075a4:	4630      	mov	r0, r6
 80075a6:	f7ff ff0b 	bl	80073c0 <__multiply>
 80075aa:	6020      	str	r0, [r4, #0]
 80075ac:	f8c0 9000 	str.w	r9, [r0]
 80075b0:	4604      	mov	r4, r0
 80075b2:	e7e4      	b.n	800757e <__pow5mult+0x6a>
 80075b4:	4638      	mov	r0, r7
 80075b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ba:	bf00      	nop
 80075bc:	08009488 	.word	0x08009488
 80075c0:	080092b5 	.word	0x080092b5
 80075c4:	08009338 	.word	0x08009338

080075c8 <__lshift>:
 80075c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075cc:	460c      	mov	r4, r1
 80075ce:	6849      	ldr	r1, [r1, #4]
 80075d0:	6923      	ldr	r3, [r4, #16]
 80075d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075d6:	68a3      	ldr	r3, [r4, #8]
 80075d8:	4607      	mov	r7, r0
 80075da:	4691      	mov	r9, r2
 80075dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075e0:	f108 0601 	add.w	r6, r8, #1
 80075e4:	42b3      	cmp	r3, r6
 80075e6:	db0b      	blt.n	8007600 <__lshift+0x38>
 80075e8:	4638      	mov	r0, r7
 80075ea:	f7ff fddb 	bl	80071a4 <_Balloc>
 80075ee:	4605      	mov	r5, r0
 80075f0:	b948      	cbnz	r0, 8007606 <__lshift+0x3e>
 80075f2:	4602      	mov	r2, r0
 80075f4:	4b2a      	ldr	r3, [pc, #168]	; (80076a0 <__lshift+0xd8>)
 80075f6:	482b      	ldr	r0, [pc, #172]	; (80076a4 <__lshift+0xdc>)
 80075f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075fc:	f000 fac4 	bl	8007b88 <__assert_func>
 8007600:	3101      	adds	r1, #1
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	e7ee      	b.n	80075e4 <__lshift+0x1c>
 8007606:	2300      	movs	r3, #0
 8007608:	f100 0114 	add.w	r1, r0, #20
 800760c:	f100 0210 	add.w	r2, r0, #16
 8007610:	4618      	mov	r0, r3
 8007612:	4553      	cmp	r3, sl
 8007614:	db37      	blt.n	8007686 <__lshift+0xbe>
 8007616:	6920      	ldr	r0, [r4, #16]
 8007618:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800761c:	f104 0314 	add.w	r3, r4, #20
 8007620:	f019 091f 	ands.w	r9, r9, #31
 8007624:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007628:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800762c:	d02f      	beq.n	800768e <__lshift+0xc6>
 800762e:	f1c9 0e20 	rsb	lr, r9, #32
 8007632:	468a      	mov	sl, r1
 8007634:	f04f 0c00 	mov.w	ip, #0
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	fa02 f209 	lsl.w	r2, r2, r9
 800763e:	ea42 020c 	orr.w	r2, r2, ip
 8007642:	f84a 2b04 	str.w	r2, [sl], #4
 8007646:	f853 2b04 	ldr.w	r2, [r3], #4
 800764a:	4298      	cmp	r0, r3
 800764c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007650:	d8f2      	bhi.n	8007638 <__lshift+0x70>
 8007652:	1b03      	subs	r3, r0, r4
 8007654:	3b15      	subs	r3, #21
 8007656:	f023 0303 	bic.w	r3, r3, #3
 800765a:	3304      	adds	r3, #4
 800765c:	f104 0215 	add.w	r2, r4, #21
 8007660:	4290      	cmp	r0, r2
 8007662:	bf38      	it	cc
 8007664:	2304      	movcc	r3, #4
 8007666:	f841 c003 	str.w	ip, [r1, r3]
 800766a:	f1bc 0f00 	cmp.w	ip, #0
 800766e:	d001      	beq.n	8007674 <__lshift+0xac>
 8007670:	f108 0602 	add.w	r6, r8, #2
 8007674:	3e01      	subs	r6, #1
 8007676:	4638      	mov	r0, r7
 8007678:	612e      	str	r6, [r5, #16]
 800767a:	4621      	mov	r1, r4
 800767c:	f7ff fdd2 	bl	8007224 <_Bfree>
 8007680:	4628      	mov	r0, r5
 8007682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007686:	f842 0f04 	str.w	r0, [r2, #4]!
 800768a:	3301      	adds	r3, #1
 800768c:	e7c1      	b.n	8007612 <__lshift+0x4a>
 800768e:	3904      	subs	r1, #4
 8007690:	f853 2b04 	ldr.w	r2, [r3], #4
 8007694:	f841 2f04 	str.w	r2, [r1, #4]!
 8007698:	4298      	cmp	r0, r3
 800769a:	d8f9      	bhi.n	8007690 <__lshift+0xc8>
 800769c:	e7ea      	b.n	8007674 <__lshift+0xac>
 800769e:	bf00      	nop
 80076a0:	08009327 	.word	0x08009327
 80076a4:	08009338 	.word	0x08009338

080076a8 <__mcmp>:
 80076a8:	b530      	push	{r4, r5, lr}
 80076aa:	6902      	ldr	r2, [r0, #16]
 80076ac:	690c      	ldr	r4, [r1, #16]
 80076ae:	1b12      	subs	r2, r2, r4
 80076b0:	d10e      	bne.n	80076d0 <__mcmp+0x28>
 80076b2:	f100 0314 	add.w	r3, r0, #20
 80076b6:	3114      	adds	r1, #20
 80076b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076c8:	42a5      	cmp	r5, r4
 80076ca:	d003      	beq.n	80076d4 <__mcmp+0x2c>
 80076cc:	d305      	bcc.n	80076da <__mcmp+0x32>
 80076ce:	2201      	movs	r2, #1
 80076d0:	4610      	mov	r0, r2
 80076d2:	bd30      	pop	{r4, r5, pc}
 80076d4:	4283      	cmp	r3, r0
 80076d6:	d3f3      	bcc.n	80076c0 <__mcmp+0x18>
 80076d8:	e7fa      	b.n	80076d0 <__mcmp+0x28>
 80076da:	f04f 32ff 	mov.w	r2, #4294967295
 80076de:	e7f7      	b.n	80076d0 <__mcmp+0x28>

080076e0 <__mdiff>:
 80076e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	460c      	mov	r4, r1
 80076e6:	4606      	mov	r6, r0
 80076e8:	4611      	mov	r1, r2
 80076ea:	4620      	mov	r0, r4
 80076ec:	4690      	mov	r8, r2
 80076ee:	f7ff ffdb 	bl	80076a8 <__mcmp>
 80076f2:	1e05      	subs	r5, r0, #0
 80076f4:	d110      	bne.n	8007718 <__mdiff+0x38>
 80076f6:	4629      	mov	r1, r5
 80076f8:	4630      	mov	r0, r6
 80076fa:	f7ff fd53 	bl	80071a4 <_Balloc>
 80076fe:	b930      	cbnz	r0, 800770e <__mdiff+0x2e>
 8007700:	4b3a      	ldr	r3, [pc, #232]	; (80077ec <__mdiff+0x10c>)
 8007702:	4602      	mov	r2, r0
 8007704:	f240 2132 	movw	r1, #562	; 0x232
 8007708:	4839      	ldr	r0, [pc, #228]	; (80077f0 <__mdiff+0x110>)
 800770a:	f000 fa3d 	bl	8007b88 <__assert_func>
 800770e:	2301      	movs	r3, #1
 8007710:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007718:	bfa4      	itt	ge
 800771a:	4643      	movge	r3, r8
 800771c:	46a0      	movge	r8, r4
 800771e:	4630      	mov	r0, r6
 8007720:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007724:	bfa6      	itte	ge
 8007726:	461c      	movge	r4, r3
 8007728:	2500      	movge	r5, #0
 800772a:	2501      	movlt	r5, #1
 800772c:	f7ff fd3a 	bl	80071a4 <_Balloc>
 8007730:	b920      	cbnz	r0, 800773c <__mdiff+0x5c>
 8007732:	4b2e      	ldr	r3, [pc, #184]	; (80077ec <__mdiff+0x10c>)
 8007734:	4602      	mov	r2, r0
 8007736:	f44f 7110 	mov.w	r1, #576	; 0x240
 800773a:	e7e5      	b.n	8007708 <__mdiff+0x28>
 800773c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007740:	6926      	ldr	r6, [r4, #16]
 8007742:	60c5      	str	r5, [r0, #12]
 8007744:	f104 0914 	add.w	r9, r4, #20
 8007748:	f108 0514 	add.w	r5, r8, #20
 800774c:	f100 0e14 	add.w	lr, r0, #20
 8007750:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007754:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007758:	f108 0210 	add.w	r2, r8, #16
 800775c:	46f2      	mov	sl, lr
 800775e:	2100      	movs	r1, #0
 8007760:	f859 3b04 	ldr.w	r3, [r9], #4
 8007764:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007768:	fa1f f883 	uxth.w	r8, r3
 800776c:	fa11 f18b 	uxtah	r1, r1, fp
 8007770:	0c1b      	lsrs	r3, r3, #16
 8007772:	eba1 0808 	sub.w	r8, r1, r8
 8007776:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800777a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800777e:	fa1f f888 	uxth.w	r8, r8
 8007782:	1419      	asrs	r1, r3, #16
 8007784:	454e      	cmp	r6, r9
 8007786:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800778a:	f84a 3b04 	str.w	r3, [sl], #4
 800778e:	d8e7      	bhi.n	8007760 <__mdiff+0x80>
 8007790:	1b33      	subs	r3, r6, r4
 8007792:	3b15      	subs	r3, #21
 8007794:	f023 0303 	bic.w	r3, r3, #3
 8007798:	3304      	adds	r3, #4
 800779a:	3415      	adds	r4, #21
 800779c:	42a6      	cmp	r6, r4
 800779e:	bf38      	it	cc
 80077a0:	2304      	movcc	r3, #4
 80077a2:	441d      	add	r5, r3
 80077a4:	4473      	add	r3, lr
 80077a6:	469e      	mov	lr, r3
 80077a8:	462e      	mov	r6, r5
 80077aa:	4566      	cmp	r6, ip
 80077ac:	d30e      	bcc.n	80077cc <__mdiff+0xec>
 80077ae:	f10c 0203 	add.w	r2, ip, #3
 80077b2:	1b52      	subs	r2, r2, r5
 80077b4:	f022 0203 	bic.w	r2, r2, #3
 80077b8:	3d03      	subs	r5, #3
 80077ba:	45ac      	cmp	ip, r5
 80077bc:	bf38      	it	cc
 80077be:	2200      	movcc	r2, #0
 80077c0:	441a      	add	r2, r3
 80077c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80077c6:	b17b      	cbz	r3, 80077e8 <__mdiff+0x108>
 80077c8:	6107      	str	r7, [r0, #16]
 80077ca:	e7a3      	b.n	8007714 <__mdiff+0x34>
 80077cc:	f856 8b04 	ldr.w	r8, [r6], #4
 80077d0:	fa11 f288 	uxtah	r2, r1, r8
 80077d4:	1414      	asrs	r4, r2, #16
 80077d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077da:	b292      	uxth	r2, r2
 80077dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80077e0:	f84e 2b04 	str.w	r2, [lr], #4
 80077e4:	1421      	asrs	r1, r4, #16
 80077e6:	e7e0      	b.n	80077aa <__mdiff+0xca>
 80077e8:	3f01      	subs	r7, #1
 80077ea:	e7ea      	b.n	80077c2 <__mdiff+0xe2>
 80077ec:	08009327 	.word	0x08009327
 80077f0:	08009338 	.word	0x08009338

080077f4 <__d2b>:
 80077f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077f8:	4689      	mov	r9, r1
 80077fa:	2101      	movs	r1, #1
 80077fc:	ec57 6b10 	vmov	r6, r7, d0
 8007800:	4690      	mov	r8, r2
 8007802:	f7ff fccf 	bl	80071a4 <_Balloc>
 8007806:	4604      	mov	r4, r0
 8007808:	b930      	cbnz	r0, 8007818 <__d2b+0x24>
 800780a:	4602      	mov	r2, r0
 800780c:	4b25      	ldr	r3, [pc, #148]	; (80078a4 <__d2b+0xb0>)
 800780e:	4826      	ldr	r0, [pc, #152]	; (80078a8 <__d2b+0xb4>)
 8007810:	f240 310a 	movw	r1, #778	; 0x30a
 8007814:	f000 f9b8 	bl	8007b88 <__assert_func>
 8007818:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800781c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007820:	bb35      	cbnz	r5, 8007870 <__d2b+0x7c>
 8007822:	2e00      	cmp	r6, #0
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	d028      	beq.n	800787a <__d2b+0x86>
 8007828:	4668      	mov	r0, sp
 800782a:	9600      	str	r6, [sp, #0]
 800782c:	f7ff fd82 	bl	8007334 <__lo0bits>
 8007830:	9900      	ldr	r1, [sp, #0]
 8007832:	b300      	cbz	r0, 8007876 <__d2b+0x82>
 8007834:	9a01      	ldr	r2, [sp, #4]
 8007836:	f1c0 0320 	rsb	r3, r0, #32
 800783a:	fa02 f303 	lsl.w	r3, r2, r3
 800783e:	430b      	orrs	r3, r1
 8007840:	40c2      	lsrs	r2, r0
 8007842:	6163      	str	r3, [r4, #20]
 8007844:	9201      	str	r2, [sp, #4]
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	61a3      	str	r3, [r4, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	bf14      	ite	ne
 800784e:	2202      	movne	r2, #2
 8007850:	2201      	moveq	r2, #1
 8007852:	6122      	str	r2, [r4, #16]
 8007854:	b1d5      	cbz	r5, 800788c <__d2b+0x98>
 8007856:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800785a:	4405      	add	r5, r0
 800785c:	f8c9 5000 	str.w	r5, [r9]
 8007860:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007864:	f8c8 0000 	str.w	r0, [r8]
 8007868:	4620      	mov	r0, r4
 800786a:	b003      	add	sp, #12
 800786c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007874:	e7d5      	b.n	8007822 <__d2b+0x2e>
 8007876:	6161      	str	r1, [r4, #20]
 8007878:	e7e5      	b.n	8007846 <__d2b+0x52>
 800787a:	a801      	add	r0, sp, #4
 800787c:	f7ff fd5a 	bl	8007334 <__lo0bits>
 8007880:	9b01      	ldr	r3, [sp, #4]
 8007882:	6163      	str	r3, [r4, #20]
 8007884:	2201      	movs	r2, #1
 8007886:	6122      	str	r2, [r4, #16]
 8007888:	3020      	adds	r0, #32
 800788a:	e7e3      	b.n	8007854 <__d2b+0x60>
 800788c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007890:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007894:	f8c9 0000 	str.w	r0, [r9]
 8007898:	6918      	ldr	r0, [r3, #16]
 800789a:	f7ff fd2b 	bl	80072f4 <__hi0bits>
 800789e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078a2:	e7df      	b.n	8007864 <__d2b+0x70>
 80078a4:	08009327 	.word	0x08009327
 80078a8:	08009338 	.word	0x08009338

080078ac <__ssputs_r>:
 80078ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b0:	688e      	ldr	r6, [r1, #8]
 80078b2:	429e      	cmp	r6, r3
 80078b4:	4682      	mov	sl, r0
 80078b6:	460c      	mov	r4, r1
 80078b8:	4690      	mov	r8, r2
 80078ba:	461f      	mov	r7, r3
 80078bc:	d838      	bhi.n	8007930 <__ssputs_r+0x84>
 80078be:	898a      	ldrh	r2, [r1, #12]
 80078c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078c4:	d032      	beq.n	800792c <__ssputs_r+0x80>
 80078c6:	6825      	ldr	r5, [r4, #0]
 80078c8:	6909      	ldr	r1, [r1, #16]
 80078ca:	eba5 0901 	sub.w	r9, r5, r1
 80078ce:	6965      	ldr	r5, [r4, #20]
 80078d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078d8:	3301      	adds	r3, #1
 80078da:	444b      	add	r3, r9
 80078dc:	106d      	asrs	r5, r5, #1
 80078de:	429d      	cmp	r5, r3
 80078e0:	bf38      	it	cc
 80078e2:	461d      	movcc	r5, r3
 80078e4:	0553      	lsls	r3, r2, #21
 80078e6:	d531      	bpl.n	800794c <__ssputs_r+0xa0>
 80078e8:	4629      	mov	r1, r5
 80078ea:	f7fe f8e3 	bl	8005ab4 <_malloc_r>
 80078ee:	4606      	mov	r6, r0
 80078f0:	b950      	cbnz	r0, 8007908 <__ssputs_r+0x5c>
 80078f2:	230c      	movs	r3, #12
 80078f4:	f8ca 3000 	str.w	r3, [sl]
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078fe:	81a3      	strh	r3, [r4, #12]
 8007900:	f04f 30ff 	mov.w	r0, #4294967295
 8007904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007908:	6921      	ldr	r1, [r4, #16]
 800790a:	464a      	mov	r2, r9
 800790c:	f7ff fc30 	bl	8007170 <memcpy>
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800791a:	81a3      	strh	r3, [r4, #12]
 800791c:	6126      	str	r6, [r4, #16]
 800791e:	6165      	str	r5, [r4, #20]
 8007920:	444e      	add	r6, r9
 8007922:	eba5 0509 	sub.w	r5, r5, r9
 8007926:	6026      	str	r6, [r4, #0]
 8007928:	60a5      	str	r5, [r4, #8]
 800792a:	463e      	mov	r6, r7
 800792c:	42be      	cmp	r6, r7
 800792e:	d900      	bls.n	8007932 <__ssputs_r+0x86>
 8007930:	463e      	mov	r6, r7
 8007932:	6820      	ldr	r0, [r4, #0]
 8007934:	4632      	mov	r2, r6
 8007936:	4641      	mov	r1, r8
 8007938:	f000 fb22 	bl	8007f80 <memmove>
 800793c:	68a3      	ldr	r3, [r4, #8]
 800793e:	1b9b      	subs	r3, r3, r6
 8007940:	60a3      	str	r3, [r4, #8]
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	4433      	add	r3, r6
 8007946:	6023      	str	r3, [r4, #0]
 8007948:	2000      	movs	r0, #0
 800794a:	e7db      	b.n	8007904 <__ssputs_r+0x58>
 800794c:	462a      	mov	r2, r5
 800794e:	f000 fb31 	bl	8007fb4 <_realloc_r>
 8007952:	4606      	mov	r6, r0
 8007954:	2800      	cmp	r0, #0
 8007956:	d1e1      	bne.n	800791c <__ssputs_r+0x70>
 8007958:	6921      	ldr	r1, [r4, #16]
 800795a:	4650      	mov	r0, sl
 800795c:	f7fe f83e 	bl	80059dc <_free_r>
 8007960:	e7c7      	b.n	80078f2 <__ssputs_r+0x46>
	...

08007964 <_svfiprintf_r>:
 8007964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	4698      	mov	r8, r3
 800796a:	898b      	ldrh	r3, [r1, #12]
 800796c:	061b      	lsls	r3, r3, #24
 800796e:	b09d      	sub	sp, #116	; 0x74
 8007970:	4607      	mov	r7, r0
 8007972:	460d      	mov	r5, r1
 8007974:	4614      	mov	r4, r2
 8007976:	d50e      	bpl.n	8007996 <_svfiprintf_r+0x32>
 8007978:	690b      	ldr	r3, [r1, #16]
 800797a:	b963      	cbnz	r3, 8007996 <_svfiprintf_r+0x32>
 800797c:	2140      	movs	r1, #64	; 0x40
 800797e:	f7fe f899 	bl	8005ab4 <_malloc_r>
 8007982:	6028      	str	r0, [r5, #0]
 8007984:	6128      	str	r0, [r5, #16]
 8007986:	b920      	cbnz	r0, 8007992 <_svfiprintf_r+0x2e>
 8007988:	230c      	movs	r3, #12
 800798a:	603b      	str	r3, [r7, #0]
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	e0d1      	b.n	8007b36 <_svfiprintf_r+0x1d2>
 8007992:	2340      	movs	r3, #64	; 0x40
 8007994:	616b      	str	r3, [r5, #20]
 8007996:	2300      	movs	r3, #0
 8007998:	9309      	str	r3, [sp, #36]	; 0x24
 800799a:	2320      	movs	r3, #32
 800799c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80079a4:	2330      	movs	r3, #48	; 0x30
 80079a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b50 <_svfiprintf_r+0x1ec>
 80079aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079ae:	f04f 0901 	mov.w	r9, #1
 80079b2:	4623      	mov	r3, r4
 80079b4:	469a      	mov	sl, r3
 80079b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079ba:	b10a      	cbz	r2, 80079c0 <_svfiprintf_r+0x5c>
 80079bc:	2a25      	cmp	r2, #37	; 0x25
 80079be:	d1f9      	bne.n	80079b4 <_svfiprintf_r+0x50>
 80079c0:	ebba 0b04 	subs.w	fp, sl, r4
 80079c4:	d00b      	beq.n	80079de <_svfiprintf_r+0x7a>
 80079c6:	465b      	mov	r3, fp
 80079c8:	4622      	mov	r2, r4
 80079ca:	4629      	mov	r1, r5
 80079cc:	4638      	mov	r0, r7
 80079ce:	f7ff ff6d 	bl	80078ac <__ssputs_r>
 80079d2:	3001      	adds	r0, #1
 80079d4:	f000 80aa 	beq.w	8007b2c <_svfiprintf_r+0x1c8>
 80079d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079da:	445a      	add	r2, fp
 80079dc:	9209      	str	r2, [sp, #36]	; 0x24
 80079de:	f89a 3000 	ldrb.w	r3, [sl]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 80a2 	beq.w	8007b2c <_svfiprintf_r+0x1c8>
 80079e8:	2300      	movs	r3, #0
 80079ea:	f04f 32ff 	mov.w	r2, #4294967295
 80079ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079f2:	f10a 0a01 	add.w	sl, sl, #1
 80079f6:	9304      	str	r3, [sp, #16]
 80079f8:	9307      	str	r3, [sp, #28]
 80079fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079fe:	931a      	str	r3, [sp, #104]	; 0x68
 8007a00:	4654      	mov	r4, sl
 8007a02:	2205      	movs	r2, #5
 8007a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a08:	4851      	ldr	r0, [pc, #324]	; (8007b50 <_svfiprintf_r+0x1ec>)
 8007a0a:	f7f8 fc21 	bl	8000250 <memchr>
 8007a0e:	9a04      	ldr	r2, [sp, #16]
 8007a10:	b9d8      	cbnz	r0, 8007a4a <_svfiprintf_r+0xe6>
 8007a12:	06d0      	lsls	r0, r2, #27
 8007a14:	bf44      	itt	mi
 8007a16:	2320      	movmi	r3, #32
 8007a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a1c:	0711      	lsls	r1, r2, #28
 8007a1e:	bf44      	itt	mi
 8007a20:	232b      	movmi	r3, #43	; 0x2b
 8007a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a26:	f89a 3000 	ldrb.w	r3, [sl]
 8007a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a2c:	d015      	beq.n	8007a5a <_svfiprintf_r+0xf6>
 8007a2e:	9a07      	ldr	r2, [sp, #28]
 8007a30:	4654      	mov	r4, sl
 8007a32:	2000      	movs	r0, #0
 8007a34:	f04f 0c0a 	mov.w	ip, #10
 8007a38:	4621      	mov	r1, r4
 8007a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a3e:	3b30      	subs	r3, #48	; 0x30
 8007a40:	2b09      	cmp	r3, #9
 8007a42:	d94e      	bls.n	8007ae2 <_svfiprintf_r+0x17e>
 8007a44:	b1b0      	cbz	r0, 8007a74 <_svfiprintf_r+0x110>
 8007a46:	9207      	str	r2, [sp, #28]
 8007a48:	e014      	b.n	8007a74 <_svfiprintf_r+0x110>
 8007a4a:	eba0 0308 	sub.w	r3, r0, r8
 8007a4e:	fa09 f303 	lsl.w	r3, r9, r3
 8007a52:	4313      	orrs	r3, r2
 8007a54:	9304      	str	r3, [sp, #16]
 8007a56:	46a2      	mov	sl, r4
 8007a58:	e7d2      	b.n	8007a00 <_svfiprintf_r+0x9c>
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	1d19      	adds	r1, r3, #4
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	9103      	str	r1, [sp, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bfbb      	ittet	lt
 8007a66:	425b      	neglt	r3, r3
 8007a68:	f042 0202 	orrlt.w	r2, r2, #2
 8007a6c:	9307      	strge	r3, [sp, #28]
 8007a6e:	9307      	strlt	r3, [sp, #28]
 8007a70:	bfb8      	it	lt
 8007a72:	9204      	strlt	r2, [sp, #16]
 8007a74:	7823      	ldrb	r3, [r4, #0]
 8007a76:	2b2e      	cmp	r3, #46	; 0x2e
 8007a78:	d10c      	bne.n	8007a94 <_svfiprintf_r+0x130>
 8007a7a:	7863      	ldrb	r3, [r4, #1]
 8007a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a7e:	d135      	bne.n	8007aec <_svfiprintf_r+0x188>
 8007a80:	9b03      	ldr	r3, [sp, #12]
 8007a82:	1d1a      	adds	r2, r3, #4
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	9203      	str	r2, [sp, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	bfb8      	it	lt
 8007a8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a90:	3402      	adds	r4, #2
 8007a92:	9305      	str	r3, [sp, #20]
 8007a94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b60 <_svfiprintf_r+0x1fc>
 8007a98:	7821      	ldrb	r1, [r4, #0]
 8007a9a:	2203      	movs	r2, #3
 8007a9c:	4650      	mov	r0, sl
 8007a9e:	f7f8 fbd7 	bl	8000250 <memchr>
 8007aa2:	b140      	cbz	r0, 8007ab6 <_svfiprintf_r+0x152>
 8007aa4:	2340      	movs	r3, #64	; 0x40
 8007aa6:	eba0 000a 	sub.w	r0, r0, sl
 8007aaa:	fa03 f000 	lsl.w	r0, r3, r0
 8007aae:	9b04      	ldr	r3, [sp, #16]
 8007ab0:	4303      	orrs	r3, r0
 8007ab2:	3401      	adds	r4, #1
 8007ab4:	9304      	str	r3, [sp, #16]
 8007ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aba:	4826      	ldr	r0, [pc, #152]	; (8007b54 <_svfiprintf_r+0x1f0>)
 8007abc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ac0:	2206      	movs	r2, #6
 8007ac2:	f7f8 fbc5 	bl	8000250 <memchr>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d038      	beq.n	8007b3c <_svfiprintf_r+0x1d8>
 8007aca:	4b23      	ldr	r3, [pc, #140]	; (8007b58 <_svfiprintf_r+0x1f4>)
 8007acc:	bb1b      	cbnz	r3, 8007b16 <_svfiprintf_r+0x1b2>
 8007ace:	9b03      	ldr	r3, [sp, #12]
 8007ad0:	3307      	adds	r3, #7
 8007ad2:	f023 0307 	bic.w	r3, r3, #7
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	9303      	str	r3, [sp, #12]
 8007ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007adc:	4433      	add	r3, r6
 8007ade:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae0:	e767      	b.n	80079b2 <_svfiprintf_r+0x4e>
 8007ae2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	2001      	movs	r0, #1
 8007aea:	e7a5      	b.n	8007a38 <_svfiprintf_r+0xd4>
 8007aec:	2300      	movs	r3, #0
 8007aee:	3401      	adds	r4, #1
 8007af0:	9305      	str	r3, [sp, #20]
 8007af2:	4619      	mov	r1, r3
 8007af4:	f04f 0c0a 	mov.w	ip, #10
 8007af8:	4620      	mov	r0, r4
 8007afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007afe:	3a30      	subs	r2, #48	; 0x30
 8007b00:	2a09      	cmp	r2, #9
 8007b02:	d903      	bls.n	8007b0c <_svfiprintf_r+0x1a8>
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0c5      	beq.n	8007a94 <_svfiprintf_r+0x130>
 8007b08:	9105      	str	r1, [sp, #20]
 8007b0a:	e7c3      	b.n	8007a94 <_svfiprintf_r+0x130>
 8007b0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b10:	4604      	mov	r4, r0
 8007b12:	2301      	movs	r3, #1
 8007b14:	e7f0      	b.n	8007af8 <_svfiprintf_r+0x194>
 8007b16:	ab03      	add	r3, sp, #12
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	462a      	mov	r2, r5
 8007b1c:	4b0f      	ldr	r3, [pc, #60]	; (8007b5c <_svfiprintf_r+0x1f8>)
 8007b1e:	a904      	add	r1, sp, #16
 8007b20:	4638      	mov	r0, r7
 8007b22:	f7fe f8cd 	bl	8005cc0 <_printf_float>
 8007b26:	1c42      	adds	r2, r0, #1
 8007b28:	4606      	mov	r6, r0
 8007b2a:	d1d6      	bne.n	8007ada <_svfiprintf_r+0x176>
 8007b2c:	89ab      	ldrh	r3, [r5, #12]
 8007b2e:	065b      	lsls	r3, r3, #25
 8007b30:	f53f af2c 	bmi.w	800798c <_svfiprintf_r+0x28>
 8007b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b36:	b01d      	add	sp, #116	; 0x74
 8007b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3c:	ab03      	add	r3, sp, #12
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	462a      	mov	r2, r5
 8007b42:	4b06      	ldr	r3, [pc, #24]	; (8007b5c <_svfiprintf_r+0x1f8>)
 8007b44:	a904      	add	r1, sp, #16
 8007b46:	4638      	mov	r0, r7
 8007b48:	f7fe fb46 	bl	80061d8 <_printf_i>
 8007b4c:	e7eb      	b.n	8007b26 <_svfiprintf_r+0x1c2>
 8007b4e:	bf00      	nop
 8007b50:	08009494 	.word	0x08009494
 8007b54:	0800949e 	.word	0x0800949e
 8007b58:	08005cc1 	.word	0x08005cc1
 8007b5c:	080078ad 	.word	0x080078ad
 8007b60:	0800949a 	.word	0x0800949a

08007b64 <_read_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	4d07      	ldr	r5, [pc, #28]	; (8007b84 <_read_r+0x20>)
 8007b68:	4604      	mov	r4, r0
 8007b6a:	4608      	mov	r0, r1
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	2200      	movs	r2, #0
 8007b70:	602a      	str	r2, [r5, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	f000 fd7e 	bl	8008674 <_read>
 8007b78:	1c43      	adds	r3, r0, #1
 8007b7a:	d102      	bne.n	8007b82 <_read_r+0x1e>
 8007b7c:	682b      	ldr	r3, [r5, #0]
 8007b7e:	b103      	cbz	r3, 8007b82 <_read_r+0x1e>
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	bd38      	pop	{r3, r4, r5, pc}
 8007b84:	20000bdc 	.word	0x20000bdc

08007b88 <__assert_func>:
 8007b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b8a:	4614      	mov	r4, r2
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <__assert_func+0x2c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4605      	mov	r5, r0
 8007b94:	68d8      	ldr	r0, [r3, #12]
 8007b96:	b14c      	cbz	r4, 8007bac <__assert_func+0x24>
 8007b98:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <__assert_func+0x30>)
 8007b9a:	9100      	str	r1, [sp, #0]
 8007b9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ba0:	4906      	ldr	r1, [pc, #24]	; (8007bbc <__assert_func+0x34>)
 8007ba2:	462b      	mov	r3, r5
 8007ba4:	f000 f9a6 	bl	8007ef4 <fiprintf>
 8007ba8:	f000 fc5a 	bl	8008460 <abort>
 8007bac:	4b04      	ldr	r3, [pc, #16]	; (8007bc0 <__assert_func+0x38>)
 8007bae:	461c      	mov	r4, r3
 8007bb0:	e7f3      	b.n	8007b9a <__assert_func+0x12>
 8007bb2:	bf00      	nop
 8007bb4:	2000004c 	.word	0x2000004c
 8007bb8:	080094a5 	.word	0x080094a5
 8007bbc:	080094b2 	.word	0x080094b2
 8007bc0:	080094e0 	.word	0x080094e0

08007bc4 <__sflush_r>:
 8007bc4:	898a      	ldrh	r2, [r1, #12]
 8007bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bca:	4605      	mov	r5, r0
 8007bcc:	0710      	lsls	r0, r2, #28
 8007bce:	460c      	mov	r4, r1
 8007bd0:	d458      	bmi.n	8007c84 <__sflush_r+0xc0>
 8007bd2:	684b      	ldr	r3, [r1, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dc05      	bgt.n	8007be4 <__sflush_r+0x20>
 8007bd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	dc02      	bgt.n	8007be4 <__sflush_r+0x20>
 8007bde:	2000      	movs	r0, #0
 8007be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007be6:	2e00      	cmp	r6, #0
 8007be8:	d0f9      	beq.n	8007bde <__sflush_r+0x1a>
 8007bea:	2300      	movs	r3, #0
 8007bec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bf0:	682f      	ldr	r7, [r5, #0]
 8007bf2:	602b      	str	r3, [r5, #0]
 8007bf4:	d032      	beq.n	8007c5c <__sflush_r+0x98>
 8007bf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bf8:	89a3      	ldrh	r3, [r4, #12]
 8007bfa:	075a      	lsls	r2, r3, #29
 8007bfc:	d505      	bpl.n	8007c0a <__sflush_r+0x46>
 8007bfe:	6863      	ldr	r3, [r4, #4]
 8007c00:	1ac0      	subs	r0, r0, r3
 8007c02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c04:	b10b      	cbz	r3, 8007c0a <__sflush_r+0x46>
 8007c06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c08:	1ac0      	subs	r0, r0, r3
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c10:	6a21      	ldr	r1, [r4, #32]
 8007c12:	4628      	mov	r0, r5
 8007c14:	47b0      	blx	r6
 8007c16:	1c43      	adds	r3, r0, #1
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	d106      	bne.n	8007c2a <__sflush_r+0x66>
 8007c1c:	6829      	ldr	r1, [r5, #0]
 8007c1e:	291d      	cmp	r1, #29
 8007c20:	d82c      	bhi.n	8007c7c <__sflush_r+0xb8>
 8007c22:	4a2a      	ldr	r2, [pc, #168]	; (8007ccc <__sflush_r+0x108>)
 8007c24:	40ca      	lsrs	r2, r1
 8007c26:	07d6      	lsls	r6, r2, #31
 8007c28:	d528      	bpl.n	8007c7c <__sflush_r+0xb8>
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	6062      	str	r2, [r4, #4]
 8007c2e:	04d9      	lsls	r1, r3, #19
 8007c30:	6922      	ldr	r2, [r4, #16]
 8007c32:	6022      	str	r2, [r4, #0]
 8007c34:	d504      	bpl.n	8007c40 <__sflush_r+0x7c>
 8007c36:	1c42      	adds	r2, r0, #1
 8007c38:	d101      	bne.n	8007c3e <__sflush_r+0x7a>
 8007c3a:	682b      	ldr	r3, [r5, #0]
 8007c3c:	b903      	cbnz	r3, 8007c40 <__sflush_r+0x7c>
 8007c3e:	6560      	str	r0, [r4, #84]	; 0x54
 8007c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c42:	602f      	str	r7, [r5, #0]
 8007c44:	2900      	cmp	r1, #0
 8007c46:	d0ca      	beq.n	8007bde <__sflush_r+0x1a>
 8007c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c4c:	4299      	cmp	r1, r3
 8007c4e:	d002      	beq.n	8007c56 <__sflush_r+0x92>
 8007c50:	4628      	mov	r0, r5
 8007c52:	f7fd fec3 	bl	80059dc <_free_r>
 8007c56:	2000      	movs	r0, #0
 8007c58:	6360      	str	r0, [r4, #52]	; 0x34
 8007c5a:	e7c1      	b.n	8007be0 <__sflush_r+0x1c>
 8007c5c:	6a21      	ldr	r1, [r4, #32]
 8007c5e:	2301      	movs	r3, #1
 8007c60:	4628      	mov	r0, r5
 8007c62:	47b0      	blx	r6
 8007c64:	1c41      	adds	r1, r0, #1
 8007c66:	d1c7      	bne.n	8007bf8 <__sflush_r+0x34>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0c4      	beq.n	8007bf8 <__sflush_r+0x34>
 8007c6e:	2b1d      	cmp	r3, #29
 8007c70:	d001      	beq.n	8007c76 <__sflush_r+0xb2>
 8007c72:	2b16      	cmp	r3, #22
 8007c74:	d101      	bne.n	8007c7a <__sflush_r+0xb6>
 8007c76:	602f      	str	r7, [r5, #0]
 8007c78:	e7b1      	b.n	8007bde <__sflush_r+0x1a>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c80:	81a3      	strh	r3, [r4, #12]
 8007c82:	e7ad      	b.n	8007be0 <__sflush_r+0x1c>
 8007c84:	690f      	ldr	r7, [r1, #16]
 8007c86:	2f00      	cmp	r7, #0
 8007c88:	d0a9      	beq.n	8007bde <__sflush_r+0x1a>
 8007c8a:	0793      	lsls	r3, r2, #30
 8007c8c:	680e      	ldr	r6, [r1, #0]
 8007c8e:	bf08      	it	eq
 8007c90:	694b      	ldreq	r3, [r1, #20]
 8007c92:	600f      	str	r7, [r1, #0]
 8007c94:	bf18      	it	ne
 8007c96:	2300      	movne	r3, #0
 8007c98:	eba6 0807 	sub.w	r8, r6, r7
 8007c9c:	608b      	str	r3, [r1, #8]
 8007c9e:	f1b8 0f00 	cmp.w	r8, #0
 8007ca2:	dd9c      	ble.n	8007bde <__sflush_r+0x1a>
 8007ca4:	6a21      	ldr	r1, [r4, #32]
 8007ca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ca8:	4643      	mov	r3, r8
 8007caa:	463a      	mov	r2, r7
 8007cac:	4628      	mov	r0, r5
 8007cae:	47b0      	blx	r6
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	dc06      	bgt.n	8007cc2 <__sflush_r+0xfe>
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cba:	81a3      	strh	r3, [r4, #12]
 8007cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc0:	e78e      	b.n	8007be0 <__sflush_r+0x1c>
 8007cc2:	4407      	add	r7, r0
 8007cc4:	eba8 0800 	sub.w	r8, r8, r0
 8007cc8:	e7e9      	b.n	8007c9e <__sflush_r+0xda>
 8007cca:	bf00      	nop
 8007ccc:	20400001 	.word	0x20400001

08007cd0 <_fflush_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	690b      	ldr	r3, [r1, #16]
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	b913      	cbnz	r3, 8007ce0 <_fflush_r+0x10>
 8007cda:	2500      	movs	r5, #0
 8007cdc:	4628      	mov	r0, r5
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	b118      	cbz	r0, 8007cea <_fflush_r+0x1a>
 8007ce2:	6983      	ldr	r3, [r0, #24]
 8007ce4:	b90b      	cbnz	r3, 8007cea <_fflush_r+0x1a>
 8007ce6:	f000 f887 	bl	8007df8 <__sinit>
 8007cea:	4b14      	ldr	r3, [pc, #80]	; (8007d3c <_fflush_r+0x6c>)
 8007cec:	429c      	cmp	r4, r3
 8007cee:	d11b      	bne.n	8007d28 <_fflush_r+0x58>
 8007cf0:	686c      	ldr	r4, [r5, #4]
 8007cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0ef      	beq.n	8007cda <_fflush_r+0xa>
 8007cfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cfc:	07d0      	lsls	r0, r2, #31
 8007cfe:	d404      	bmi.n	8007d0a <_fflush_r+0x3a>
 8007d00:	0599      	lsls	r1, r3, #22
 8007d02:	d402      	bmi.n	8007d0a <_fflush_r+0x3a>
 8007d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d06:	f000 f927 	bl	8007f58 <__retarget_lock_acquire_recursive>
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	4621      	mov	r1, r4
 8007d0e:	f7ff ff59 	bl	8007bc4 <__sflush_r>
 8007d12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d14:	07da      	lsls	r2, r3, #31
 8007d16:	4605      	mov	r5, r0
 8007d18:	d4e0      	bmi.n	8007cdc <_fflush_r+0xc>
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	059b      	lsls	r3, r3, #22
 8007d1e:	d4dd      	bmi.n	8007cdc <_fflush_r+0xc>
 8007d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d22:	f000 f91a 	bl	8007f5a <__retarget_lock_release_recursive>
 8007d26:	e7d9      	b.n	8007cdc <_fflush_r+0xc>
 8007d28:	4b05      	ldr	r3, [pc, #20]	; (8007d40 <_fflush_r+0x70>)
 8007d2a:	429c      	cmp	r4, r3
 8007d2c:	d101      	bne.n	8007d32 <_fflush_r+0x62>
 8007d2e:	68ac      	ldr	r4, [r5, #8]
 8007d30:	e7df      	b.n	8007cf2 <_fflush_r+0x22>
 8007d32:	4b04      	ldr	r3, [pc, #16]	; (8007d44 <_fflush_r+0x74>)
 8007d34:	429c      	cmp	r4, r3
 8007d36:	bf08      	it	eq
 8007d38:	68ec      	ldreq	r4, [r5, #12]
 8007d3a:	e7da      	b.n	8007cf2 <_fflush_r+0x22>
 8007d3c:	08009604 	.word	0x08009604
 8007d40:	08009624 	.word	0x08009624
 8007d44:	080095e4 	.word	0x080095e4

08007d48 <std>:
 8007d48:	2300      	movs	r3, #0
 8007d4a:	b510      	push	{r4, lr}
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d56:	6083      	str	r3, [r0, #8]
 8007d58:	8181      	strh	r1, [r0, #12]
 8007d5a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d5c:	81c2      	strh	r2, [r0, #14]
 8007d5e:	6183      	str	r3, [r0, #24]
 8007d60:	4619      	mov	r1, r3
 8007d62:	2208      	movs	r2, #8
 8007d64:	305c      	adds	r0, #92	; 0x5c
 8007d66:	f7fd fe1b 	bl	80059a0 <memset>
 8007d6a:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <std+0x38>)
 8007d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8007d6e:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <std+0x3c>)
 8007d70:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d72:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <std+0x40>)
 8007d74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d76:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <std+0x44>)
 8007d78:	6224      	str	r4, [r4, #32]
 8007d7a:	6323      	str	r3, [r4, #48]	; 0x30
 8007d7c:	bd10      	pop	{r4, pc}
 8007d7e:	bf00      	nop
 8007d80:	08006485 	.word	0x08006485
 8007d84:	080064a7 	.word	0x080064a7
 8007d88:	080064df 	.word	0x080064df
 8007d8c:	08006503 	.word	0x08006503

08007d90 <_cleanup_r>:
 8007d90:	4901      	ldr	r1, [pc, #4]	; (8007d98 <_cleanup_r+0x8>)
 8007d92:	f000 b8c1 	b.w	8007f18 <_fwalk_reent>
 8007d96:	bf00      	nop
 8007d98:	08007cd1 	.word	0x08007cd1

08007d9c <__sfmoreglue>:
 8007d9c:	b570      	push	{r4, r5, r6, lr}
 8007d9e:	2268      	movs	r2, #104	; 0x68
 8007da0:	1e4d      	subs	r5, r1, #1
 8007da2:	4355      	muls	r5, r2
 8007da4:	460e      	mov	r6, r1
 8007da6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007daa:	f7fd fe83 	bl	8005ab4 <_malloc_r>
 8007dae:	4604      	mov	r4, r0
 8007db0:	b140      	cbz	r0, 8007dc4 <__sfmoreglue+0x28>
 8007db2:	2100      	movs	r1, #0
 8007db4:	e9c0 1600 	strd	r1, r6, [r0]
 8007db8:	300c      	adds	r0, #12
 8007dba:	60a0      	str	r0, [r4, #8]
 8007dbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007dc0:	f7fd fdee 	bl	80059a0 <memset>
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}

08007dc8 <__sfp_lock_acquire>:
 8007dc8:	4801      	ldr	r0, [pc, #4]	; (8007dd0 <__sfp_lock_acquire+0x8>)
 8007dca:	f000 b8c5 	b.w	8007f58 <__retarget_lock_acquire_recursive>
 8007dce:	bf00      	nop
 8007dd0:	20000be1 	.word	0x20000be1

08007dd4 <__sfp_lock_release>:
 8007dd4:	4801      	ldr	r0, [pc, #4]	; (8007ddc <__sfp_lock_release+0x8>)
 8007dd6:	f000 b8c0 	b.w	8007f5a <__retarget_lock_release_recursive>
 8007dda:	bf00      	nop
 8007ddc:	20000be1 	.word	0x20000be1

08007de0 <__sinit_lock_acquire>:
 8007de0:	4801      	ldr	r0, [pc, #4]	; (8007de8 <__sinit_lock_acquire+0x8>)
 8007de2:	f000 b8b9 	b.w	8007f58 <__retarget_lock_acquire_recursive>
 8007de6:	bf00      	nop
 8007de8:	20000be2 	.word	0x20000be2

08007dec <__sinit_lock_release>:
 8007dec:	4801      	ldr	r0, [pc, #4]	; (8007df4 <__sinit_lock_release+0x8>)
 8007dee:	f000 b8b4 	b.w	8007f5a <__retarget_lock_release_recursive>
 8007df2:	bf00      	nop
 8007df4:	20000be2 	.word	0x20000be2

08007df8 <__sinit>:
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	f7ff fff0 	bl	8007de0 <__sinit_lock_acquire>
 8007e00:	69a3      	ldr	r3, [r4, #24]
 8007e02:	b11b      	cbz	r3, 8007e0c <__sinit+0x14>
 8007e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e08:	f7ff bff0 	b.w	8007dec <__sinit_lock_release>
 8007e0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e10:	6523      	str	r3, [r4, #80]	; 0x50
 8007e12:	4b13      	ldr	r3, [pc, #76]	; (8007e60 <__sinit+0x68>)
 8007e14:	4a13      	ldr	r2, [pc, #76]	; (8007e64 <__sinit+0x6c>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e1a:	42a3      	cmp	r3, r4
 8007e1c:	bf04      	itt	eq
 8007e1e:	2301      	moveq	r3, #1
 8007e20:	61a3      	streq	r3, [r4, #24]
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 f820 	bl	8007e68 <__sfp>
 8007e28:	6060      	str	r0, [r4, #4]
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f000 f81c 	bl	8007e68 <__sfp>
 8007e30:	60a0      	str	r0, [r4, #8]
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 f818 	bl	8007e68 <__sfp>
 8007e38:	2200      	movs	r2, #0
 8007e3a:	60e0      	str	r0, [r4, #12]
 8007e3c:	2104      	movs	r1, #4
 8007e3e:	6860      	ldr	r0, [r4, #4]
 8007e40:	f7ff ff82 	bl	8007d48 <std>
 8007e44:	68a0      	ldr	r0, [r4, #8]
 8007e46:	2201      	movs	r2, #1
 8007e48:	2109      	movs	r1, #9
 8007e4a:	f7ff ff7d 	bl	8007d48 <std>
 8007e4e:	68e0      	ldr	r0, [r4, #12]
 8007e50:	2202      	movs	r2, #2
 8007e52:	2112      	movs	r1, #18
 8007e54:	f7ff ff78 	bl	8007d48 <std>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	61a3      	str	r3, [r4, #24]
 8007e5c:	e7d2      	b.n	8007e04 <__sinit+0xc>
 8007e5e:	bf00      	nop
 8007e60:	08009270 	.word	0x08009270
 8007e64:	08007d91 	.word	0x08007d91

08007e68 <__sfp>:
 8007e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6a:	4607      	mov	r7, r0
 8007e6c:	f7ff ffac 	bl	8007dc8 <__sfp_lock_acquire>
 8007e70:	4b1e      	ldr	r3, [pc, #120]	; (8007eec <__sfp+0x84>)
 8007e72:	681e      	ldr	r6, [r3, #0]
 8007e74:	69b3      	ldr	r3, [r6, #24]
 8007e76:	b913      	cbnz	r3, 8007e7e <__sfp+0x16>
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f7ff ffbd 	bl	8007df8 <__sinit>
 8007e7e:	3648      	adds	r6, #72	; 0x48
 8007e80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	d503      	bpl.n	8007e90 <__sfp+0x28>
 8007e88:	6833      	ldr	r3, [r6, #0]
 8007e8a:	b30b      	cbz	r3, 8007ed0 <__sfp+0x68>
 8007e8c:	6836      	ldr	r6, [r6, #0]
 8007e8e:	e7f7      	b.n	8007e80 <__sfp+0x18>
 8007e90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e94:	b9d5      	cbnz	r5, 8007ecc <__sfp+0x64>
 8007e96:	4b16      	ldr	r3, [pc, #88]	; (8007ef0 <__sfp+0x88>)
 8007e98:	60e3      	str	r3, [r4, #12]
 8007e9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e9e:	6665      	str	r5, [r4, #100]	; 0x64
 8007ea0:	f000 f859 	bl	8007f56 <__retarget_lock_init_recursive>
 8007ea4:	f7ff ff96 	bl	8007dd4 <__sfp_lock_release>
 8007ea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007eac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007eb0:	6025      	str	r5, [r4, #0]
 8007eb2:	61a5      	str	r5, [r4, #24]
 8007eb4:	2208      	movs	r2, #8
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ebc:	f7fd fd70 	bl	80059a0 <memset>
 8007ec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ec8:	4620      	mov	r0, r4
 8007eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ecc:	3468      	adds	r4, #104	; 0x68
 8007ece:	e7d9      	b.n	8007e84 <__sfp+0x1c>
 8007ed0:	2104      	movs	r1, #4
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	f7ff ff62 	bl	8007d9c <__sfmoreglue>
 8007ed8:	4604      	mov	r4, r0
 8007eda:	6030      	str	r0, [r6, #0]
 8007edc:	2800      	cmp	r0, #0
 8007ede:	d1d5      	bne.n	8007e8c <__sfp+0x24>
 8007ee0:	f7ff ff78 	bl	8007dd4 <__sfp_lock_release>
 8007ee4:	230c      	movs	r3, #12
 8007ee6:	603b      	str	r3, [r7, #0]
 8007ee8:	e7ee      	b.n	8007ec8 <__sfp+0x60>
 8007eea:	bf00      	nop
 8007eec:	08009270 	.word	0x08009270
 8007ef0:	ffff0001 	.word	0xffff0001

08007ef4 <fiprintf>:
 8007ef4:	b40e      	push	{r1, r2, r3}
 8007ef6:	b503      	push	{r0, r1, lr}
 8007ef8:	4601      	mov	r1, r0
 8007efa:	ab03      	add	r3, sp, #12
 8007efc:	4805      	ldr	r0, [pc, #20]	; (8007f14 <fiprintf+0x20>)
 8007efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f02:	6800      	ldr	r0, [r0, #0]
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	f000 f8ad 	bl	8008064 <_vfiprintf_r>
 8007f0a:	b002      	add	sp, #8
 8007f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f10:	b003      	add	sp, #12
 8007f12:	4770      	bx	lr
 8007f14:	2000004c 	.word	0x2000004c

08007f18 <_fwalk_reent>:
 8007f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	4688      	mov	r8, r1
 8007f20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f24:	2700      	movs	r7, #0
 8007f26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f2a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f2e:	d505      	bpl.n	8007f3c <_fwalk_reent+0x24>
 8007f30:	6824      	ldr	r4, [r4, #0]
 8007f32:	2c00      	cmp	r4, #0
 8007f34:	d1f7      	bne.n	8007f26 <_fwalk_reent+0xe>
 8007f36:	4638      	mov	r0, r7
 8007f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f3c:	89ab      	ldrh	r3, [r5, #12]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d907      	bls.n	8007f52 <_fwalk_reent+0x3a>
 8007f42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f46:	3301      	adds	r3, #1
 8007f48:	d003      	beq.n	8007f52 <_fwalk_reent+0x3a>
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	47c0      	blx	r8
 8007f50:	4307      	orrs	r7, r0
 8007f52:	3568      	adds	r5, #104	; 0x68
 8007f54:	e7e9      	b.n	8007f2a <_fwalk_reent+0x12>

08007f56 <__retarget_lock_init_recursive>:
 8007f56:	4770      	bx	lr

08007f58 <__retarget_lock_acquire_recursive>:
 8007f58:	4770      	bx	lr

08007f5a <__retarget_lock_release_recursive>:
 8007f5a:	4770      	bx	lr

08007f5c <__ascii_mbtowc>:
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	b901      	cbnz	r1, 8007f62 <__ascii_mbtowc+0x6>
 8007f60:	a901      	add	r1, sp, #4
 8007f62:	b142      	cbz	r2, 8007f76 <__ascii_mbtowc+0x1a>
 8007f64:	b14b      	cbz	r3, 8007f7a <__ascii_mbtowc+0x1e>
 8007f66:	7813      	ldrb	r3, [r2, #0]
 8007f68:	600b      	str	r3, [r1, #0]
 8007f6a:	7812      	ldrb	r2, [r2, #0]
 8007f6c:	1e10      	subs	r0, r2, #0
 8007f6e:	bf18      	it	ne
 8007f70:	2001      	movne	r0, #1
 8007f72:	b002      	add	sp, #8
 8007f74:	4770      	bx	lr
 8007f76:	4610      	mov	r0, r2
 8007f78:	e7fb      	b.n	8007f72 <__ascii_mbtowc+0x16>
 8007f7a:	f06f 0001 	mvn.w	r0, #1
 8007f7e:	e7f8      	b.n	8007f72 <__ascii_mbtowc+0x16>

08007f80 <memmove>:
 8007f80:	4288      	cmp	r0, r1
 8007f82:	b510      	push	{r4, lr}
 8007f84:	eb01 0402 	add.w	r4, r1, r2
 8007f88:	d902      	bls.n	8007f90 <memmove+0x10>
 8007f8a:	4284      	cmp	r4, r0
 8007f8c:	4623      	mov	r3, r4
 8007f8e:	d807      	bhi.n	8007fa0 <memmove+0x20>
 8007f90:	1e43      	subs	r3, r0, #1
 8007f92:	42a1      	cmp	r1, r4
 8007f94:	d008      	beq.n	8007fa8 <memmove+0x28>
 8007f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f9e:	e7f8      	b.n	8007f92 <memmove+0x12>
 8007fa0:	4402      	add	r2, r0
 8007fa2:	4601      	mov	r1, r0
 8007fa4:	428a      	cmp	r2, r1
 8007fa6:	d100      	bne.n	8007faa <memmove+0x2a>
 8007fa8:	bd10      	pop	{r4, pc}
 8007faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fb2:	e7f7      	b.n	8007fa4 <memmove+0x24>

08007fb4 <_realloc_r>:
 8007fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb8:	4680      	mov	r8, r0
 8007fba:	4614      	mov	r4, r2
 8007fbc:	460e      	mov	r6, r1
 8007fbe:	b921      	cbnz	r1, 8007fca <_realloc_r+0x16>
 8007fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	f7fd bd75 	b.w	8005ab4 <_malloc_r>
 8007fca:	b92a      	cbnz	r2, 8007fd8 <_realloc_r+0x24>
 8007fcc:	f7fd fd06 	bl	80059dc <_free_r>
 8007fd0:	4625      	mov	r5, r4
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd8:	f000 faae 	bl	8008538 <_malloc_usable_size_r>
 8007fdc:	4284      	cmp	r4, r0
 8007fde:	4607      	mov	r7, r0
 8007fe0:	d802      	bhi.n	8007fe8 <_realloc_r+0x34>
 8007fe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007fe6:	d812      	bhi.n	800800e <_realloc_r+0x5a>
 8007fe8:	4621      	mov	r1, r4
 8007fea:	4640      	mov	r0, r8
 8007fec:	f7fd fd62 	bl	8005ab4 <_malloc_r>
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	d0ed      	beq.n	8007fd2 <_realloc_r+0x1e>
 8007ff6:	42bc      	cmp	r4, r7
 8007ff8:	4622      	mov	r2, r4
 8007ffa:	4631      	mov	r1, r6
 8007ffc:	bf28      	it	cs
 8007ffe:	463a      	movcs	r2, r7
 8008000:	f7ff f8b6 	bl	8007170 <memcpy>
 8008004:	4631      	mov	r1, r6
 8008006:	4640      	mov	r0, r8
 8008008:	f7fd fce8 	bl	80059dc <_free_r>
 800800c:	e7e1      	b.n	8007fd2 <_realloc_r+0x1e>
 800800e:	4635      	mov	r5, r6
 8008010:	e7df      	b.n	8007fd2 <_realloc_r+0x1e>

08008012 <__sfputc_r>:
 8008012:	6893      	ldr	r3, [r2, #8]
 8008014:	3b01      	subs	r3, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	b410      	push	{r4}
 800801a:	6093      	str	r3, [r2, #8]
 800801c:	da08      	bge.n	8008030 <__sfputc_r+0x1e>
 800801e:	6994      	ldr	r4, [r2, #24]
 8008020:	42a3      	cmp	r3, r4
 8008022:	db01      	blt.n	8008028 <__sfputc_r+0x16>
 8008024:	290a      	cmp	r1, #10
 8008026:	d103      	bne.n	8008030 <__sfputc_r+0x1e>
 8008028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800802c:	f000 b94a 	b.w	80082c4 <__swbuf_r>
 8008030:	6813      	ldr	r3, [r2, #0]
 8008032:	1c58      	adds	r0, r3, #1
 8008034:	6010      	str	r0, [r2, #0]
 8008036:	7019      	strb	r1, [r3, #0]
 8008038:	4608      	mov	r0, r1
 800803a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800803e:	4770      	bx	lr

08008040 <__sfputs_r>:
 8008040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008042:	4606      	mov	r6, r0
 8008044:	460f      	mov	r7, r1
 8008046:	4614      	mov	r4, r2
 8008048:	18d5      	adds	r5, r2, r3
 800804a:	42ac      	cmp	r4, r5
 800804c:	d101      	bne.n	8008052 <__sfputs_r+0x12>
 800804e:	2000      	movs	r0, #0
 8008050:	e007      	b.n	8008062 <__sfputs_r+0x22>
 8008052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008056:	463a      	mov	r2, r7
 8008058:	4630      	mov	r0, r6
 800805a:	f7ff ffda 	bl	8008012 <__sfputc_r>
 800805e:	1c43      	adds	r3, r0, #1
 8008060:	d1f3      	bne.n	800804a <__sfputs_r+0xa>
 8008062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008064 <_vfiprintf_r>:
 8008064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008068:	460d      	mov	r5, r1
 800806a:	b09d      	sub	sp, #116	; 0x74
 800806c:	4614      	mov	r4, r2
 800806e:	4698      	mov	r8, r3
 8008070:	4606      	mov	r6, r0
 8008072:	b118      	cbz	r0, 800807c <_vfiprintf_r+0x18>
 8008074:	6983      	ldr	r3, [r0, #24]
 8008076:	b90b      	cbnz	r3, 800807c <_vfiprintf_r+0x18>
 8008078:	f7ff febe 	bl	8007df8 <__sinit>
 800807c:	4b89      	ldr	r3, [pc, #548]	; (80082a4 <_vfiprintf_r+0x240>)
 800807e:	429d      	cmp	r5, r3
 8008080:	d11b      	bne.n	80080ba <_vfiprintf_r+0x56>
 8008082:	6875      	ldr	r5, [r6, #4]
 8008084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008086:	07d9      	lsls	r1, r3, #31
 8008088:	d405      	bmi.n	8008096 <_vfiprintf_r+0x32>
 800808a:	89ab      	ldrh	r3, [r5, #12]
 800808c:	059a      	lsls	r2, r3, #22
 800808e:	d402      	bmi.n	8008096 <_vfiprintf_r+0x32>
 8008090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008092:	f7ff ff61 	bl	8007f58 <__retarget_lock_acquire_recursive>
 8008096:	89ab      	ldrh	r3, [r5, #12]
 8008098:	071b      	lsls	r3, r3, #28
 800809a:	d501      	bpl.n	80080a0 <_vfiprintf_r+0x3c>
 800809c:	692b      	ldr	r3, [r5, #16]
 800809e:	b9eb      	cbnz	r3, 80080dc <_vfiprintf_r+0x78>
 80080a0:	4629      	mov	r1, r5
 80080a2:	4630      	mov	r0, r6
 80080a4:	f000 f96e 	bl	8008384 <__swsetup_r>
 80080a8:	b1c0      	cbz	r0, 80080dc <_vfiprintf_r+0x78>
 80080aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080ac:	07dc      	lsls	r4, r3, #31
 80080ae:	d50e      	bpl.n	80080ce <_vfiprintf_r+0x6a>
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295
 80080b4:	b01d      	add	sp, #116	; 0x74
 80080b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ba:	4b7b      	ldr	r3, [pc, #492]	; (80082a8 <_vfiprintf_r+0x244>)
 80080bc:	429d      	cmp	r5, r3
 80080be:	d101      	bne.n	80080c4 <_vfiprintf_r+0x60>
 80080c0:	68b5      	ldr	r5, [r6, #8]
 80080c2:	e7df      	b.n	8008084 <_vfiprintf_r+0x20>
 80080c4:	4b79      	ldr	r3, [pc, #484]	; (80082ac <_vfiprintf_r+0x248>)
 80080c6:	429d      	cmp	r5, r3
 80080c8:	bf08      	it	eq
 80080ca:	68f5      	ldreq	r5, [r6, #12]
 80080cc:	e7da      	b.n	8008084 <_vfiprintf_r+0x20>
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	0598      	lsls	r0, r3, #22
 80080d2:	d4ed      	bmi.n	80080b0 <_vfiprintf_r+0x4c>
 80080d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080d6:	f7ff ff40 	bl	8007f5a <__retarget_lock_release_recursive>
 80080da:	e7e9      	b.n	80080b0 <_vfiprintf_r+0x4c>
 80080dc:	2300      	movs	r3, #0
 80080de:	9309      	str	r3, [sp, #36]	; 0x24
 80080e0:	2320      	movs	r3, #32
 80080e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80080ea:	2330      	movs	r3, #48	; 0x30
 80080ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80082b0 <_vfiprintf_r+0x24c>
 80080f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080f4:	f04f 0901 	mov.w	r9, #1
 80080f8:	4623      	mov	r3, r4
 80080fa:	469a      	mov	sl, r3
 80080fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008100:	b10a      	cbz	r2, 8008106 <_vfiprintf_r+0xa2>
 8008102:	2a25      	cmp	r2, #37	; 0x25
 8008104:	d1f9      	bne.n	80080fa <_vfiprintf_r+0x96>
 8008106:	ebba 0b04 	subs.w	fp, sl, r4
 800810a:	d00b      	beq.n	8008124 <_vfiprintf_r+0xc0>
 800810c:	465b      	mov	r3, fp
 800810e:	4622      	mov	r2, r4
 8008110:	4629      	mov	r1, r5
 8008112:	4630      	mov	r0, r6
 8008114:	f7ff ff94 	bl	8008040 <__sfputs_r>
 8008118:	3001      	adds	r0, #1
 800811a:	f000 80aa 	beq.w	8008272 <_vfiprintf_r+0x20e>
 800811e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008120:	445a      	add	r2, fp
 8008122:	9209      	str	r2, [sp, #36]	; 0x24
 8008124:	f89a 3000 	ldrb.w	r3, [sl]
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 80a2 	beq.w	8008272 <_vfiprintf_r+0x20e>
 800812e:	2300      	movs	r3, #0
 8008130:	f04f 32ff 	mov.w	r2, #4294967295
 8008134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008138:	f10a 0a01 	add.w	sl, sl, #1
 800813c:	9304      	str	r3, [sp, #16]
 800813e:	9307      	str	r3, [sp, #28]
 8008140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008144:	931a      	str	r3, [sp, #104]	; 0x68
 8008146:	4654      	mov	r4, sl
 8008148:	2205      	movs	r2, #5
 800814a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800814e:	4858      	ldr	r0, [pc, #352]	; (80082b0 <_vfiprintf_r+0x24c>)
 8008150:	f7f8 f87e 	bl	8000250 <memchr>
 8008154:	9a04      	ldr	r2, [sp, #16]
 8008156:	b9d8      	cbnz	r0, 8008190 <_vfiprintf_r+0x12c>
 8008158:	06d1      	lsls	r1, r2, #27
 800815a:	bf44      	itt	mi
 800815c:	2320      	movmi	r3, #32
 800815e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008162:	0713      	lsls	r3, r2, #28
 8008164:	bf44      	itt	mi
 8008166:	232b      	movmi	r3, #43	; 0x2b
 8008168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800816c:	f89a 3000 	ldrb.w	r3, [sl]
 8008170:	2b2a      	cmp	r3, #42	; 0x2a
 8008172:	d015      	beq.n	80081a0 <_vfiprintf_r+0x13c>
 8008174:	9a07      	ldr	r2, [sp, #28]
 8008176:	4654      	mov	r4, sl
 8008178:	2000      	movs	r0, #0
 800817a:	f04f 0c0a 	mov.w	ip, #10
 800817e:	4621      	mov	r1, r4
 8008180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008184:	3b30      	subs	r3, #48	; 0x30
 8008186:	2b09      	cmp	r3, #9
 8008188:	d94e      	bls.n	8008228 <_vfiprintf_r+0x1c4>
 800818a:	b1b0      	cbz	r0, 80081ba <_vfiprintf_r+0x156>
 800818c:	9207      	str	r2, [sp, #28]
 800818e:	e014      	b.n	80081ba <_vfiprintf_r+0x156>
 8008190:	eba0 0308 	sub.w	r3, r0, r8
 8008194:	fa09 f303 	lsl.w	r3, r9, r3
 8008198:	4313      	orrs	r3, r2
 800819a:	9304      	str	r3, [sp, #16]
 800819c:	46a2      	mov	sl, r4
 800819e:	e7d2      	b.n	8008146 <_vfiprintf_r+0xe2>
 80081a0:	9b03      	ldr	r3, [sp, #12]
 80081a2:	1d19      	adds	r1, r3, #4
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	9103      	str	r1, [sp, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	bfbb      	ittet	lt
 80081ac:	425b      	neglt	r3, r3
 80081ae:	f042 0202 	orrlt.w	r2, r2, #2
 80081b2:	9307      	strge	r3, [sp, #28]
 80081b4:	9307      	strlt	r3, [sp, #28]
 80081b6:	bfb8      	it	lt
 80081b8:	9204      	strlt	r2, [sp, #16]
 80081ba:	7823      	ldrb	r3, [r4, #0]
 80081bc:	2b2e      	cmp	r3, #46	; 0x2e
 80081be:	d10c      	bne.n	80081da <_vfiprintf_r+0x176>
 80081c0:	7863      	ldrb	r3, [r4, #1]
 80081c2:	2b2a      	cmp	r3, #42	; 0x2a
 80081c4:	d135      	bne.n	8008232 <_vfiprintf_r+0x1ce>
 80081c6:	9b03      	ldr	r3, [sp, #12]
 80081c8:	1d1a      	adds	r2, r3, #4
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	9203      	str	r2, [sp, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	bfb8      	it	lt
 80081d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80081d6:	3402      	adds	r4, #2
 80081d8:	9305      	str	r3, [sp, #20]
 80081da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80082c0 <_vfiprintf_r+0x25c>
 80081de:	7821      	ldrb	r1, [r4, #0]
 80081e0:	2203      	movs	r2, #3
 80081e2:	4650      	mov	r0, sl
 80081e4:	f7f8 f834 	bl	8000250 <memchr>
 80081e8:	b140      	cbz	r0, 80081fc <_vfiprintf_r+0x198>
 80081ea:	2340      	movs	r3, #64	; 0x40
 80081ec:	eba0 000a 	sub.w	r0, r0, sl
 80081f0:	fa03 f000 	lsl.w	r0, r3, r0
 80081f4:	9b04      	ldr	r3, [sp, #16]
 80081f6:	4303      	orrs	r3, r0
 80081f8:	3401      	adds	r4, #1
 80081fa:	9304      	str	r3, [sp, #16]
 80081fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008200:	482c      	ldr	r0, [pc, #176]	; (80082b4 <_vfiprintf_r+0x250>)
 8008202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008206:	2206      	movs	r2, #6
 8008208:	f7f8 f822 	bl	8000250 <memchr>
 800820c:	2800      	cmp	r0, #0
 800820e:	d03f      	beq.n	8008290 <_vfiprintf_r+0x22c>
 8008210:	4b29      	ldr	r3, [pc, #164]	; (80082b8 <_vfiprintf_r+0x254>)
 8008212:	bb1b      	cbnz	r3, 800825c <_vfiprintf_r+0x1f8>
 8008214:	9b03      	ldr	r3, [sp, #12]
 8008216:	3307      	adds	r3, #7
 8008218:	f023 0307 	bic.w	r3, r3, #7
 800821c:	3308      	adds	r3, #8
 800821e:	9303      	str	r3, [sp, #12]
 8008220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008222:	443b      	add	r3, r7
 8008224:	9309      	str	r3, [sp, #36]	; 0x24
 8008226:	e767      	b.n	80080f8 <_vfiprintf_r+0x94>
 8008228:	fb0c 3202 	mla	r2, ip, r2, r3
 800822c:	460c      	mov	r4, r1
 800822e:	2001      	movs	r0, #1
 8008230:	e7a5      	b.n	800817e <_vfiprintf_r+0x11a>
 8008232:	2300      	movs	r3, #0
 8008234:	3401      	adds	r4, #1
 8008236:	9305      	str	r3, [sp, #20]
 8008238:	4619      	mov	r1, r3
 800823a:	f04f 0c0a 	mov.w	ip, #10
 800823e:	4620      	mov	r0, r4
 8008240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008244:	3a30      	subs	r2, #48	; 0x30
 8008246:	2a09      	cmp	r2, #9
 8008248:	d903      	bls.n	8008252 <_vfiprintf_r+0x1ee>
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0c5      	beq.n	80081da <_vfiprintf_r+0x176>
 800824e:	9105      	str	r1, [sp, #20]
 8008250:	e7c3      	b.n	80081da <_vfiprintf_r+0x176>
 8008252:	fb0c 2101 	mla	r1, ip, r1, r2
 8008256:	4604      	mov	r4, r0
 8008258:	2301      	movs	r3, #1
 800825a:	e7f0      	b.n	800823e <_vfiprintf_r+0x1da>
 800825c:	ab03      	add	r3, sp, #12
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	462a      	mov	r2, r5
 8008262:	4b16      	ldr	r3, [pc, #88]	; (80082bc <_vfiprintf_r+0x258>)
 8008264:	a904      	add	r1, sp, #16
 8008266:	4630      	mov	r0, r6
 8008268:	f7fd fd2a 	bl	8005cc0 <_printf_float>
 800826c:	4607      	mov	r7, r0
 800826e:	1c78      	adds	r0, r7, #1
 8008270:	d1d6      	bne.n	8008220 <_vfiprintf_r+0x1bc>
 8008272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008274:	07d9      	lsls	r1, r3, #31
 8008276:	d405      	bmi.n	8008284 <_vfiprintf_r+0x220>
 8008278:	89ab      	ldrh	r3, [r5, #12]
 800827a:	059a      	lsls	r2, r3, #22
 800827c:	d402      	bmi.n	8008284 <_vfiprintf_r+0x220>
 800827e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008280:	f7ff fe6b 	bl	8007f5a <__retarget_lock_release_recursive>
 8008284:	89ab      	ldrh	r3, [r5, #12]
 8008286:	065b      	lsls	r3, r3, #25
 8008288:	f53f af12 	bmi.w	80080b0 <_vfiprintf_r+0x4c>
 800828c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800828e:	e711      	b.n	80080b4 <_vfiprintf_r+0x50>
 8008290:	ab03      	add	r3, sp, #12
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	462a      	mov	r2, r5
 8008296:	4b09      	ldr	r3, [pc, #36]	; (80082bc <_vfiprintf_r+0x258>)
 8008298:	a904      	add	r1, sp, #16
 800829a:	4630      	mov	r0, r6
 800829c:	f7fd ff9c 	bl	80061d8 <_printf_i>
 80082a0:	e7e4      	b.n	800826c <_vfiprintf_r+0x208>
 80082a2:	bf00      	nop
 80082a4:	08009604 	.word	0x08009604
 80082a8:	08009624 	.word	0x08009624
 80082ac:	080095e4 	.word	0x080095e4
 80082b0:	08009494 	.word	0x08009494
 80082b4:	0800949e 	.word	0x0800949e
 80082b8:	08005cc1 	.word	0x08005cc1
 80082bc:	08008041 	.word	0x08008041
 80082c0:	0800949a 	.word	0x0800949a

080082c4 <__swbuf_r>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	460e      	mov	r6, r1
 80082c8:	4614      	mov	r4, r2
 80082ca:	4605      	mov	r5, r0
 80082cc:	b118      	cbz	r0, 80082d6 <__swbuf_r+0x12>
 80082ce:	6983      	ldr	r3, [r0, #24]
 80082d0:	b90b      	cbnz	r3, 80082d6 <__swbuf_r+0x12>
 80082d2:	f7ff fd91 	bl	8007df8 <__sinit>
 80082d6:	4b21      	ldr	r3, [pc, #132]	; (800835c <__swbuf_r+0x98>)
 80082d8:	429c      	cmp	r4, r3
 80082da:	d12b      	bne.n	8008334 <__swbuf_r+0x70>
 80082dc:	686c      	ldr	r4, [r5, #4]
 80082de:	69a3      	ldr	r3, [r4, #24]
 80082e0:	60a3      	str	r3, [r4, #8]
 80082e2:	89a3      	ldrh	r3, [r4, #12]
 80082e4:	071a      	lsls	r2, r3, #28
 80082e6:	d52f      	bpl.n	8008348 <__swbuf_r+0x84>
 80082e8:	6923      	ldr	r3, [r4, #16]
 80082ea:	b36b      	cbz	r3, 8008348 <__swbuf_r+0x84>
 80082ec:	6923      	ldr	r3, [r4, #16]
 80082ee:	6820      	ldr	r0, [r4, #0]
 80082f0:	1ac0      	subs	r0, r0, r3
 80082f2:	6963      	ldr	r3, [r4, #20]
 80082f4:	b2f6      	uxtb	r6, r6
 80082f6:	4283      	cmp	r3, r0
 80082f8:	4637      	mov	r7, r6
 80082fa:	dc04      	bgt.n	8008306 <__swbuf_r+0x42>
 80082fc:	4621      	mov	r1, r4
 80082fe:	4628      	mov	r0, r5
 8008300:	f7ff fce6 	bl	8007cd0 <_fflush_r>
 8008304:	bb30      	cbnz	r0, 8008354 <__swbuf_r+0x90>
 8008306:	68a3      	ldr	r3, [r4, #8]
 8008308:	3b01      	subs	r3, #1
 800830a:	60a3      	str	r3, [r4, #8]
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	1c5a      	adds	r2, r3, #1
 8008310:	6022      	str	r2, [r4, #0]
 8008312:	701e      	strb	r6, [r3, #0]
 8008314:	6963      	ldr	r3, [r4, #20]
 8008316:	3001      	adds	r0, #1
 8008318:	4283      	cmp	r3, r0
 800831a:	d004      	beq.n	8008326 <__swbuf_r+0x62>
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	07db      	lsls	r3, r3, #31
 8008320:	d506      	bpl.n	8008330 <__swbuf_r+0x6c>
 8008322:	2e0a      	cmp	r6, #10
 8008324:	d104      	bne.n	8008330 <__swbuf_r+0x6c>
 8008326:	4621      	mov	r1, r4
 8008328:	4628      	mov	r0, r5
 800832a:	f7ff fcd1 	bl	8007cd0 <_fflush_r>
 800832e:	b988      	cbnz	r0, 8008354 <__swbuf_r+0x90>
 8008330:	4638      	mov	r0, r7
 8008332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008334:	4b0a      	ldr	r3, [pc, #40]	; (8008360 <__swbuf_r+0x9c>)
 8008336:	429c      	cmp	r4, r3
 8008338:	d101      	bne.n	800833e <__swbuf_r+0x7a>
 800833a:	68ac      	ldr	r4, [r5, #8]
 800833c:	e7cf      	b.n	80082de <__swbuf_r+0x1a>
 800833e:	4b09      	ldr	r3, [pc, #36]	; (8008364 <__swbuf_r+0xa0>)
 8008340:	429c      	cmp	r4, r3
 8008342:	bf08      	it	eq
 8008344:	68ec      	ldreq	r4, [r5, #12]
 8008346:	e7ca      	b.n	80082de <__swbuf_r+0x1a>
 8008348:	4621      	mov	r1, r4
 800834a:	4628      	mov	r0, r5
 800834c:	f000 f81a 	bl	8008384 <__swsetup_r>
 8008350:	2800      	cmp	r0, #0
 8008352:	d0cb      	beq.n	80082ec <__swbuf_r+0x28>
 8008354:	f04f 37ff 	mov.w	r7, #4294967295
 8008358:	e7ea      	b.n	8008330 <__swbuf_r+0x6c>
 800835a:	bf00      	nop
 800835c:	08009604 	.word	0x08009604
 8008360:	08009624 	.word	0x08009624
 8008364:	080095e4 	.word	0x080095e4

08008368 <__ascii_wctomb>:
 8008368:	b149      	cbz	r1, 800837e <__ascii_wctomb+0x16>
 800836a:	2aff      	cmp	r2, #255	; 0xff
 800836c:	bf85      	ittet	hi
 800836e:	238a      	movhi	r3, #138	; 0x8a
 8008370:	6003      	strhi	r3, [r0, #0]
 8008372:	700a      	strbls	r2, [r1, #0]
 8008374:	f04f 30ff 	movhi.w	r0, #4294967295
 8008378:	bf98      	it	ls
 800837a:	2001      	movls	r0, #1
 800837c:	4770      	bx	lr
 800837e:	4608      	mov	r0, r1
 8008380:	4770      	bx	lr
	...

08008384 <__swsetup_r>:
 8008384:	4b32      	ldr	r3, [pc, #200]	; (8008450 <__swsetup_r+0xcc>)
 8008386:	b570      	push	{r4, r5, r6, lr}
 8008388:	681d      	ldr	r5, [r3, #0]
 800838a:	4606      	mov	r6, r0
 800838c:	460c      	mov	r4, r1
 800838e:	b125      	cbz	r5, 800839a <__swsetup_r+0x16>
 8008390:	69ab      	ldr	r3, [r5, #24]
 8008392:	b913      	cbnz	r3, 800839a <__swsetup_r+0x16>
 8008394:	4628      	mov	r0, r5
 8008396:	f7ff fd2f 	bl	8007df8 <__sinit>
 800839a:	4b2e      	ldr	r3, [pc, #184]	; (8008454 <__swsetup_r+0xd0>)
 800839c:	429c      	cmp	r4, r3
 800839e:	d10f      	bne.n	80083c0 <__swsetup_r+0x3c>
 80083a0:	686c      	ldr	r4, [r5, #4]
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083a8:	0719      	lsls	r1, r3, #28
 80083aa:	d42c      	bmi.n	8008406 <__swsetup_r+0x82>
 80083ac:	06dd      	lsls	r5, r3, #27
 80083ae:	d411      	bmi.n	80083d4 <__swsetup_r+0x50>
 80083b0:	2309      	movs	r3, #9
 80083b2:	6033      	str	r3, [r6, #0]
 80083b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083b8:	81a3      	strh	r3, [r4, #12]
 80083ba:	f04f 30ff 	mov.w	r0, #4294967295
 80083be:	e03e      	b.n	800843e <__swsetup_r+0xba>
 80083c0:	4b25      	ldr	r3, [pc, #148]	; (8008458 <__swsetup_r+0xd4>)
 80083c2:	429c      	cmp	r4, r3
 80083c4:	d101      	bne.n	80083ca <__swsetup_r+0x46>
 80083c6:	68ac      	ldr	r4, [r5, #8]
 80083c8:	e7eb      	b.n	80083a2 <__swsetup_r+0x1e>
 80083ca:	4b24      	ldr	r3, [pc, #144]	; (800845c <__swsetup_r+0xd8>)
 80083cc:	429c      	cmp	r4, r3
 80083ce:	bf08      	it	eq
 80083d0:	68ec      	ldreq	r4, [r5, #12]
 80083d2:	e7e6      	b.n	80083a2 <__swsetup_r+0x1e>
 80083d4:	0758      	lsls	r0, r3, #29
 80083d6:	d512      	bpl.n	80083fe <__swsetup_r+0x7a>
 80083d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083da:	b141      	cbz	r1, 80083ee <__swsetup_r+0x6a>
 80083dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083e0:	4299      	cmp	r1, r3
 80083e2:	d002      	beq.n	80083ea <__swsetup_r+0x66>
 80083e4:	4630      	mov	r0, r6
 80083e6:	f7fd faf9 	bl	80059dc <_free_r>
 80083ea:	2300      	movs	r3, #0
 80083ec:	6363      	str	r3, [r4, #52]	; 0x34
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083f4:	81a3      	strh	r3, [r4, #12]
 80083f6:	2300      	movs	r3, #0
 80083f8:	6063      	str	r3, [r4, #4]
 80083fa:	6923      	ldr	r3, [r4, #16]
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	f043 0308 	orr.w	r3, r3, #8
 8008404:	81a3      	strh	r3, [r4, #12]
 8008406:	6923      	ldr	r3, [r4, #16]
 8008408:	b94b      	cbnz	r3, 800841e <__swsetup_r+0x9a>
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008414:	d003      	beq.n	800841e <__swsetup_r+0x9a>
 8008416:	4621      	mov	r1, r4
 8008418:	4630      	mov	r0, r6
 800841a:	f000 f84d 	bl	80084b8 <__smakebuf_r>
 800841e:	89a0      	ldrh	r0, [r4, #12]
 8008420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008424:	f010 0301 	ands.w	r3, r0, #1
 8008428:	d00a      	beq.n	8008440 <__swsetup_r+0xbc>
 800842a:	2300      	movs	r3, #0
 800842c:	60a3      	str	r3, [r4, #8]
 800842e:	6963      	ldr	r3, [r4, #20]
 8008430:	425b      	negs	r3, r3
 8008432:	61a3      	str	r3, [r4, #24]
 8008434:	6923      	ldr	r3, [r4, #16]
 8008436:	b943      	cbnz	r3, 800844a <__swsetup_r+0xc6>
 8008438:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800843c:	d1ba      	bne.n	80083b4 <__swsetup_r+0x30>
 800843e:	bd70      	pop	{r4, r5, r6, pc}
 8008440:	0781      	lsls	r1, r0, #30
 8008442:	bf58      	it	pl
 8008444:	6963      	ldrpl	r3, [r4, #20]
 8008446:	60a3      	str	r3, [r4, #8]
 8008448:	e7f4      	b.n	8008434 <__swsetup_r+0xb0>
 800844a:	2000      	movs	r0, #0
 800844c:	e7f7      	b.n	800843e <__swsetup_r+0xba>
 800844e:	bf00      	nop
 8008450:	2000004c 	.word	0x2000004c
 8008454:	08009604 	.word	0x08009604
 8008458:	08009624 	.word	0x08009624
 800845c:	080095e4 	.word	0x080095e4

08008460 <abort>:
 8008460:	b508      	push	{r3, lr}
 8008462:	2006      	movs	r0, #6
 8008464:	f000 f898 	bl	8008598 <raise>
 8008468:	2001      	movs	r0, #1
 800846a:	f000 f921 	bl	80086b0 <_exit>

0800846e <__swhatbuf_r>:
 800846e:	b570      	push	{r4, r5, r6, lr}
 8008470:	460e      	mov	r6, r1
 8008472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008476:	2900      	cmp	r1, #0
 8008478:	b096      	sub	sp, #88	; 0x58
 800847a:	4614      	mov	r4, r2
 800847c:	461d      	mov	r5, r3
 800847e:	da08      	bge.n	8008492 <__swhatbuf_r+0x24>
 8008480:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	602a      	str	r2, [r5, #0]
 8008488:	061a      	lsls	r2, r3, #24
 800848a:	d410      	bmi.n	80084ae <__swhatbuf_r+0x40>
 800848c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008490:	e00e      	b.n	80084b0 <__swhatbuf_r+0x42>
 8008492:	466a      	mov	r2, sp
 8008494:	f000 f89c 	bl	80085d0 <_fstat_r>
 8008498:	2800      	cmp	r0, #0
 800849a:	dbf1      	blt.n	8008480 <__swhatbuf_r+0x12>
 800849c:	9a01      	ldr	r2, [sp, #4]
 800849e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084a6:	425a      	negs	r2, r3
 80084a8:	415a      	adcs	r2, r3
 80084aa:	602a      	str	r2, [r5, #0]
 80084ac:	e7ee      	b.n	800848c <__swhatbuf_r+0x1e>
 80084ae:	2340      	movs	r3, #64	; 0x40
 80084b0:	2000      	movs	r0, #0
 80084b2:	6023      	str	r3, [r4, #0]
 80084b4:	b016      	add	sp, #88	; 0x58
 80084b6:	bd70      	pop	{r4, r5, r6, pc}

080084b8 <__smakebuf_r>:
 80084b8:	898b      	ldrh	r3, [r1, #12]
 80084ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084bc:	079d      	lsls	r5, r3, #30
 80084be:	4606      	mov	r6, r0
 80084c0:	460c      	mov	r4, r1
 80084c2:	d507      	bpl.n	80084d4 <__smakebuf_r+0x1c>
 80084c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	6123      	str	r3, [r4, #16]
 80084cc:	2301      	movs	r3, #1
 80084ce:	6163      	str	r3, [r4, #20]
 80084d0:	b002      	add	sp, #8
 80084d2:	bd70      	pop	{r4, r5, r6, pc}
 80084d4:	ab01      	add	r3, sp, #4
 80084d6:	466a      	mov	r2, sp
 80084d8:	f7ff ffc9 	bl	800846e <__swhatbuf_r>
 80084dc:	9900      	ldr	r1, [sp, #0]
 80084de:	4605      	mov	r5, r0
 80084e0:	4630      	mov	r0, r6
 80084e2:	f7fd fae7 	bl	8005ab4 <_malloc_r>
 80084e6:	b948      	cbnz	r0, 80084fc <__smakebuf_r+0x44>
 80084e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ec:	059a      	lsls	r2, r3, #22
 80084ee:	d4ef      	bmi.n	80084d0 <__smakebuf_r+0x18>
 80084f0:	f023 0303 	bic.w	r3, r3, #3
 80084f4:	f043 0302 	orr.w	r3, r3, #2
 80084f8:	81a3      	strh	r3, [r4, #12]
 80084fa:	e7e3      	b.n	80084c4 <__smakebuf_r+0xc>
 80084fc:	4b0d      	ldr	r3, [pc, #52]	; (8008534 <__smakebuf_r+0x7c>)
 80084fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	6020      	str	r0, [r4, #0]
 8008504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	9b00      	ldr	r3, [sp, #0]
 800850c:	6163      	str	r3, [r4, #20]
 800850e:	9b01      	ldr	r3, [sp, #4]
 8008510:	6120      	str	r0, [r4, #16]
 8008512:	b15b      	cbz	r3, 800852c <__smakebuf_r+0x74>
 8008514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008518:	4630      	mov	r0, r6
 800851a:	f000 f86b 	bl	80085f4 <_isatty_r>
 800851e:	b128      	cbz	r0, 800852c <__smakebuf_r+0x74>
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	f023 0303 	bic.w	r3, r3, #3
 8008526:	f043 0301 	orr.w	r3, r3, #1
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	89a0      	ldrh	r0, [r4, #12]
 800852e:	4305      	orrs	r5, r0
 8008530:	81a5      	strh	r5, [r4, #12]
 8008532:	e7cd      	b.n	80084d0 <__smakebuf_r+0x18>
 8008534:	08007d91 	.word	0x08007d91

08008538 <_malloc_usable_size_r>:
 8008538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800853c:	1f18      	subs	r0, r3, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	bfbc      	itt	lt
 8008542:	580b      	ldrlt	r3, [r1, r0]
 8008544:	18c0      	addlt	r0, r0, r3
 8008546:	4770      	bx	lr

08008548 <_raise_r>:
 8008548:	291f      	cmp	r1, #31
 800854a:	b538      	push	{r3, r4, r5, lr}
 800854c:	4604      	mov	r4, r0
 800854e:	460d      	mov	r5, r1
 8008550:	d904      	bls.n	800855c <_raise_r+0x14>
 8008552:	2316      	movs	r3, #22
 8008554:	6003      	str	r3, [r0, #0]
 8008556:	f04f 30ff 	mov.w	r0, #4294967295
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800855e:	b112      	cbz	r2, 8008566 <_raise_r+0x1e>
 8008560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008564:	b94b      	cbnz	r3, 800857a <_raise_r+0x32>
 8008566:	4620      	mov	r0, r4
 8008568:	f000 f830 	bl	80085cc <_getpid_r>
 800856c:	462a      	mov	r2, r5
 800856e:	4601      	mov	r1, r0
 8008570:	4620      	mov	r0, r4
 8008572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008576:	f000 b817 	b.w	80085a8 <_kill_r>
 800857a:	2b01      	cmp	r3, #1
 800857c:	d00a      	beq.n	8008594 <_raise_r+0x4c>
 800857e:	1c59      	adds	r1, r3, #1
 8008580:	d103      	bne.n	800858a <_raise_r+0x42>
 8008582:	2316      	movs	r3, #22
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	2001      	movs	r0, #1
 8008588:	e7e7      	b.n	800855a <_raise_r+0x12>
 800858a:	2400      	movs	r4, #0
 800858c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008590:	4628      	mov	r0, r5
 8008592:	4798      	blx	r3
 8008594:	2000      	movs	r0, #0
 8008596:	e7e0      	b.n	800855a <_raise_r+0x12>

08008598 <raise>:
 8008598:	4b02      	ldr	r3, [pc, #8]	; (80085a4 <raise+0xc>)
 800859a:	4601      	mov	r1, r0
 800859c:	6818      	ldr	r0, [r3, #0]
 800859e:	f7ff bfd3 	b.w	8008548 <_raise_r>
 80085a2:	bf00      	nop
 80085a4:	2000004c 	.word	0x2000004c

080085a8 <_kill_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4d07      	ldr	r5, [pc, #28]	; (80085c8 <_kill_r+0x20>)
 80085ac:	2300      	movs	r3, #0
 80085ae:	4604      	mov	r4, r0
 80085b0:	4608      	mov	r0, r1
 80085b2:	4611      	mov	r1, r2
 80085b4:	602b      	str	r3, [r5, #0]
 80085b6:	f000 f84d 	bl	8008654 <_kill>
 80085ba:	1c43      	adds	r3, r0, #1
 80085bc:	d102      	bne.n	80085c4 <_kill_r+0x1c>
 80085be:	682b      	ldr	r3, [r5, #0]
 80085c0:	b103      	cbz	r3, 80085c4 <_kill_r+0x1c>
 80085c2:	6023      	str	r3, [r4, #0]
 80085c4:	bd38      	pop	{r3, r4, r5, pc}
 80085c6:	bf00      	nop
 80085c8:	20000bdc 	.word	0x20000bdc

080085cc <_getpid_r>:
 80085cc:	f000 b832 	b.w	8008634 <_getpid>

080085d0 <_fstat_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d07      	ldr	r5, [pc, #28]	; (80085f0 <_fstat_r+0x20>)
 80085d4:	2300      	movs	r3, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	4611      	mov	r1, r2
 80085dc:	602b      	str	r3, [r5, #0]
 80085de:	f000 f821 	bl	8008624 <_fstat>
 80085e2:	1c43      	adds	r3, r0, #1
 80085e4:	d102      	bne.n	80085ec <_fstat_r+0x1c>
 80085e6:	682b      	ldr	r3, [r5, #0]
 80085e8:	b103      	cbz	r3, 80085ec <_fstat_r+0x1c>
 80085ea:	6023      	str	r3, [r4, #0]
 80085ec:	bd38      	pop	{r3, r4, r5, pc}
 80085ee:	bf00      	nop
 80085f0:	20000bdc 	.word	0x20000bdc

080085f4 <_isatty_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4d06      	ldr	r5, [pc, #24]	; (8008610 <_isatty_r+0x1c>)
 80085f8:	2300      	movs	r3, #0
 80085fa:	4604      	mov	r4, r0
 80085fc:	4608      	mov	r0, r1
 80085fe:	602b      	str	r3, [r5, #0]
 8008600:	f000 f820 	bl	8008644 <_isatty>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d102      	bne.n	800860e <_isatty_r+0x1a>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	b103      	cbz	r3, 800860e <_isatty_r+0x1a>
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	20000bdc 	.word	0x20000bdc

08008614 <_close>:
 8008614:	4b02      	ldr	r3, [pc, #8]	; (8008620 <_close+0xc>)
 8008616:	2258      	movs	r2, #88	; 0x58
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	f04f 30ff 	mov.w	r0, #4294967295
 800861e:	4770      	bx	lr
 8008620:	20000bdc 	.word	0x20000bdc

08008624 <_fstat>:
 8008624:	4b02      	ldr	r3, [pc, #8]	; (8008630 <_fstat+0xc>)
 8008626:	2258      	movs	r2, #88	; 0x58
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	f04f 30ff 	mov.w	r0, #4294967295
 800862e:	4770      	bx	lr
 8008630:	20000bdc 	.word	0x20000bdc

08008634 <_getpid>:
 8008634:	4b02      	ldr	r3, [pc, #8]	; (8008640 <_getpid+0xc>)
 8008636:	2258      	movs	r2, #88	; 0x58
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	f04f 30ff 	mov.w	r0, #4294967295
 800863e:	4770      	bx	lr
 8008640:	20000bdc 	.word	0x20000bdc

08008644 <_isatty>:
 8008644:	4b02      	ldr	r3, [pc, #8]	; (8008650 <_isatty+0xc>)
 8008646:	2258      	movs	r2, #88	; 0x58
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	2000      	movs	r0, #0
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	20000bdc 	.word	0x20000bdc

08008654 <_kill>:
 8008654:	4b02      	ldr	r3, [pc, #8]	; (8008660 <_kill+0xc>)
 8008656:	2258      	movs	r2, #88	; 0x58
 8008658:	601a      	str	r2, [r3, #0]
 800865a:	f04f 30ff 	mov.w	r0, #4294967295
 800865e:	4770      	bx	lr
 8008660:	20000bdc 	.word	0x20000bdc

08008664 <_lseek>:
 8008664:	4b02      	ldr	r3, [pc, #8]	; (8008670 <_lseek+0xc>)
 8008666:	2258      	movs	r2, #88	; 0x58
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	f04f 30ff 	mov.w	r0, #4294967295
 800866e:	4770      	bx	lr
 8008670:	20000bdc 	.word	0x20000bdc

08008674 <_read>:
 8008674:	4b02      	ldr	r3, [pc, #8]	; (8008680 <_read+0xc>)
 8008676:	2258      	movs	r2, #88	; 0x58
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	f04f 30ff 	mov.w	r0, #4294967295
 800867e:	4770      	bx	lr
 8008680:	20000bdc 	.word	0x20000bdc

08008684 <_sbrk>:
 8008684:	4a04      	ldr	r2, [pc, #16]	; (8008698 <_sbrk+0x14>)
 8008686:	6811      	ldr	r1, [r2, #0]
 8008688:	4603      	mov	r3, r0
 800868a:	b909      	cbnz	r1, 8008690 <_sbrk+0xc>
 800868c:	4903      	ldr	r1, [pc, #12]	; (800869c <_sbrk+0x18>)
 800868e:	6011      	str	r1, [r2, #0]
 8008690:	6810      	ldr	r0, [r2, #0]
 8008692:	4403      	add	r3, r0
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	4770      	bx	lr
 8008698:	20000be4 	.word	0x20000be4
 800869c:	20000be8 	.word	0x20000be8

080086a0 <_write>:
 80086a0:	4b02      	ldr	r3, [pc, #8]	; (80086ac <_write+0xc>)
 80086a2:	2258      	movs	r2, #88	; 0x58
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	f04f 30ff 	mov.w	r0, #4294967295
 80086aa:	4770      	bx	lr
 80086ac:	20000bdc 	.word	0x20000bdc

080086b0 <_exit>:
 80086b0:	e7fe      	b.n	80086b0 <_exit>
	...

080086b4 <_init>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	bf00      	nop
 80086b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ba:	bc08      	pop	{r3}
 80086bc:	469e      	mov	lr, r3
 80086be:	4770      	bx	lr

080086c0 <_fini>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	bf00      	nop
 80086c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c6:	bc08      	pop	{r3}
 80086c8:	469e      	mov	lr, r3
 80086ca:	4770      	bx	lr
